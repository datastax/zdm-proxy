bindings:
  seq_key: Mod(TEMPLATE(keycount,1000000000)); ToInt();
  seq_value: Hash(); Mod(TEMPLATE(valuecount,1000000000)); ToString() -> String
#  rw_key: TEMPLATE(keydist,Uniform(0,1000000000)->int);
  rw_key: Uniform(0,1000000000)->int
#  rw_value: Hash(); TEMPLATE(valdist,Uniform(0,1000000000)->int); ToString() -> String
  rw_value: Hash(); Uniform(0,1000000000)->int; ToString() -> String

scenarios:
  rampup: run driver=cqld4 tags=block:rampup cycles=20000
  write: run driver=cqld4 tags=block:write cycles=20000
  read: run driver=cqld4 tags=block:read cycles=20000
  verify: run driver=cqld4 tags=block:verify errors=warn,unverified->count compare=all cycles=20000

params:
  driver: cql
  prepared: true

blocks:
  rampup:
    params:
      cl: TEMPLATE(write_cl,LOCAL_QUORUM)
    ops:
      rampup_insert: |
        INSERT INTO TEMPLATE(keyspace,test).TEMPLATE(table,keyvalue)
        (key, value)
        VALUES ({seq_key},{seq_value});

  verify:
    params:
      cl: TEMPLATE(read_cl,LOCAL_QUORUM)
    ops:
      verify_select: |
        SELECT * FROM TEMPLATE(keyspace,test).TEMPLATE(table,keyvalue) WHERE key={rw_key};
      verify_fields: key->rw_key, value->rw_value

  read:
    params:
      ratio: 1
      cl: TEMPLATE(read_cl,LOCAL_QUORUM)
    ops:
      main_select: |
        select * from TEMPLATE(keyspace,test).TEMPLATE(table,keyvalue) where key={rw_key};

  write:
    params:
      ratio: 1
      cl: TEMPLATE(write_cl,LOCAL_QUORUM)
    ops:
      main-insert: |
        insert into TEMPLATE(keyspace,test).TEMPLATE(table,keyvalue)
        (key, value) values ({rw_key}, {rw_value});
