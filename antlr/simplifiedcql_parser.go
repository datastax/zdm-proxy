// Code generated from SimplifiedCql.g4 by ANTLR 4.9.3. DO NOT EDIT.

package parser // SimplifiedCql

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 110, 849,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9,
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65,
	4, 66, 9, 66, 4, 67, 9, 67, 4, 68, 9, 68, 4, 69, 9, 69, 3, 2, 3, 2, 5,
	2, 141, 10, 2, 3, 2, 3, 2, 5, 2, 145, 10, 2, 3, 2, 3, 2, 5, 2, 149, 10,
	2, 3, 2, 3, 2, 5, 2, 153, 10, 2, 3, 2, 3, 2, 5, 2, 157, 10, 2, 3, 2, 3,
	2, 5, 2, 161, 10, 2, 3, 2, 3, 2, 5, 2, 165, 10, 2, 5, 2, 167, 10, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 3, 182, 10, 3, 3, 3, 5, 3, 185, 10, 3, 3, 4, 3, 4, 3, 4, 5, 4, 190,
	10, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 5, 4, 198, 10, 4, 5, 4, 200,
	10, 4, 3, 5, 3, 5, 3, 5, 7, 5, 205, 10, 5, 12, 5, 14, 5, 208, 11, 5, 3,
	6, 3, 6, 3, 6, 3, 6, 3, 6, 5, 6, 215, 10, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3,
	6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3,
	6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 5, 6, 240, 10, 6, 3, 7, 3, 7, 5,
	7, 244, 10, 7, 3, 7, 3, 7, 3, 7, 3, 7, 5, 7, 250, 10, 7, 3, 7, 3, 7, 3,
	7, 3, 7, 5, 7, 256, 10, 7, 5, 7, 258, 10, 7, 3, 8, 3, 8, 3, 8, 7, 8, 263,
	10, 8, 12, 8, 14, 8, 266, 11, 8, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3,
	9, 3, 9, 3, 9, 3, 9, 5, 9, 278, 10, 9, 3, 10, 3, 10, 5, 10, 282, 10, 10,
	3, 10, 3, 10, 5, 10, 286, 10, 10, 3, 10, 3, 10, 5, 10, 290, 10, 10, 7,
	10, 292, 10, 10, 12, 10, 14, 10, 295, 11, 10, 3, 10, 3, 10, 3, 10, 3, 11,
	3, 11, 3, 11, 5, 11, 303, 10, 11, 3, 12, 3, 12, 5, 12, 307, 10, 12, 3,
	12, 5, 12, 310, 10, 12, 3, 12, 3, 12, 3, 12, 3, 12, 5, 12, 316, 10, 12,
	3, 12, 5, 12, 319, 10, 12, 3, 12, 5, 12, 322, 10, 12, 3, 12, 5, 12, 325,
	10, 12, 3, 12, 5, 12, 328, 10, 12, 3, 12, 3, 12, 5, 12, 332, 10, 12, 3,
	13, 3, 13, 5, 13, 336, 10, 13, 3, 14, 3, 14, 3, 14, 7, 14, 341, 10, 14,
	12, 14, 14, 14, 344, 11, 14, 3, 15, 3, 15, 3, 15, 5, 15, 349, 10, 15, 3,
	16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16,
	3, 16, 3, 16, 5, 16, 364, 10, 16, 3, 17, 3, 17, 3, 17, 3, 18, 3, 18, 3,
	18, 3, 18, 3, 19, 3, 19, 3, 19, 7, 19, 376, 10, 19, 12, 19, 14, 19, 379,
	11, 19, 3, 20, 3, 20, 5, 20, 383, 10, 20, 3, 21, 3, 21, 3, 21, 3, 21, 3,
	22, 3, 22, 3, 22, 3, 22, 3, 22, 5, 22, 394, 10, 22, 3, 23, 3, 23, 3, 23,
	5, 23, 399, 10, 23, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3,
	24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 5, 24, 415, 10, 24, 3, 25,
	3, 25, 3, 25, 5, 25, 420, 10, 25, 3, 26, 3, 26, 3, 26, 5, 26, 425, 10,
	26, 3, 27, 3, 27, 3, 27, 7, 27, 430, 10, 27, 12, 27, 14, 27, 433, 11, 27,
	3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 5, 28, 443, 10,
	28, 3, 28, 3, 28, 5, 28, 447, 10, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28,
	3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 5, 28, 463,
	10, 28, 3, 28, 3, 28, 5, 28, 467, 10, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3,
	28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 5, 28, 481, 10, 28,
	3, 28, 3, 28, 5, 28, 485, 10, 28, 5, 28, 487, 10, 28, 3, 29, 3, 29, 3,
	29, 3, 29, 3, 29, 7, 29, 494, 10, 29, 12, 29, 14, 29, 497, 11, 29, 3, 30,
	3, 30, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3,
	31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31,
	3, 31, 3, 31, 3, 31, 5, 31, 524, 10, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3,
	31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 5, 31, 539,
	10, 31, 3, 31, 3, 31, 5, 31, 543, 10, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3,
	31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31,
	3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3,
	31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31,
	3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3,
	31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 5, 31, 598, 10, 31, 3, 32,
	3, 32, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 5, 33, 607, 10, 33, 3, 34, 3,
	34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 5, 34, 617, 10, 34, 3, 34,
	3, 34, 5, 34, 621, 10, 34, 3, 34, 5, 34, 624, 10, 34, 3, 35, 3, 35, 3,
	35, 5, 35, 629, 10, 35, 3, 36, 3, 36, 5, 36, 633, 10, 36, 3, 36, 3, 36,
	3, 37, 3, 37, 5, 37, 639, 10, 37, 3, 37, 3, 37, 3, 38, 3, 38, 5, 38, 645,
	10, 38, 3, 38, 3, 38, 3, 39, 3, 39, 3, 39, 7, 39, 652, 10, 39, 12, 39,
	14, 39, 655, 11, 39, 3, 40, 3, 40, 3, 40, 3, 40, 3, 41, 3, 41, 3, 41, 7,
	41, 664, 10, 41, 12, 41, 14, 41, 667, 11, 41, 3, 42, 3, 42, 3, 42, 3, 42,
	3, 43, 3, 43, 3, 43, 3, 43, 3, 44, 3, 44, 3, 44, 7, 44, 680, 10, 44, 12,
	44, 14, 44, 683, 11, 44, 3, 45, 3, 45, 3, 45, 3, 45, 3, 46, 3, 46, 3, 46,
	5, 46, 692, 10, 46, 3, 46, 3, 46, 3, 47, 3, 47, 3, 47, 7, 47, 699, 10,
	47, 12, 47, 14, 47, 702, 11, 47, 3, 48, 3, 48, 5, 48, 706, 10, 48, 3, 49,
	3, 49, 3, 49, 7, 49, 711, 10, 49, 12, 49, 14, 49, 714, 11, 49, 3, 50, 3,
	50, 5, 50, 718, 10, 50, 3, 51, 3, 51, 3, 52, 3, 52, 3, 52, 3, 53, 3, 53,
	3, 53, 7, 53, 728, 10, 53, 12, 53, 14, 53, 731, 11, 53, 3, 54, 3, 54, 3,
	54, 3, 54, 5, 54, 737, 10, 54, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 56,
	3, 56, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56, 5, 56, 753, 10,
	56, 3, 57, 3, 57, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58,
	3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 5, 58, 774,
	10, 58, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 7, 59, 781, 10, 59, 12, 59,
	14, 59, 784, 11, 59, 3, 59, 3, 59, 3, 60, 3, 60, 3, 61, 3, 61, 3, 62, 3,
	62, 3, 63, 3, 63, 3, 64, 3, 64, 3, 64, 5, 64, 799, 10, 64, 3, 64, 3, 64,
	3, 65, 3, 65, 3, 65, 7, 65, 806, 10, 65, 12, 65, 14, 65, 809, 11, 65, 3,
	66, 3, 66, 3, 66, 5, 66, 814, 10, 66, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67,
	3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3,
	67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 5, 67, 839, 10, 67,
	3, 68, 7, 68, 842, 10, 68, 12, 68, 14, 68, 845, 11, 68, 3, 69, 3, 69, 3,
	69, 2, 2, 70, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32,
	34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68,
	70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104,
	106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134,
	136, 2, 9, 3, 2, 7, 8, 3, 2, 9, 10, 4, 2, 38, 38, 86, 86, 4, 2, 26, 26,
	43, 43, 4, 2, 24, 24, 70, 70, 4, 2, 6, 6, 15, 20, 13, 2, 28, 28, 31, 33,
	38, 38, 40, 41, 45, 46, 49, 49, 54, 54, 58, 58, 76, 81, 90, 90, 92, 93,
	2, 935, 2, 166, 3, 2, 2, 2, 4, 168, 3, 2, 2, 2, 6, 186, 3, 2, 2, 2, 8,
	201, 3, 2, 2, 2, 10, 239, 3, 2, 2, 2, 12, 241, 3, 2, 2, 2, 14, 259, 3,
	2, 2, 2, 16, 277, 3, 2, 2, 2, 18, 279, 3, 2, 2, 2, 20, 302, 3, 2, 2, 2,
	22, 304, 3, 2, 2, 2, 24, 335, 3, 2, 2, 2, 26, 337, 3, 2, 2, 2, 28, 345,
	3, 2, 2, 2, 30, 363, 3, 2, 2, 2, 32, 365, 3, 2, 2, 2, 34, 368, 3, 2, 2,
	2, 36, 372, 3, 2, 2, 2, 38, 380, 3, 2, 2, 2, 40, 384, 3, 2, 2, 2, 42, 388,
	3, 2, 2, 2, 44, 395, 3, 2, 2, 2, 46, 414, 3, 2, 2, 2, 48, 416, 3, 2, 2,
	2, 50, 421, 3, 2, 2, 2, 52, 426, 3, 2, 2, 2, 54, 486, 3, 2, 2, 2, 56, 488,
	3, 2, 2, 2, 58, 498, 3, 2, 2, 2, 60, 597, 3, 2, 2, 2, 62, 599, 3, 2, 2,
	2, 64, 606, 3, 2, 2, 2, 66, 623, 3, 2, 2, 2, 68, 628, 3, 2, 2, 2, 70, 630,
	3, 2, 2, 2, 72, 636, 3, 2, 2, 2, 74, 642, 3, 2, 2, 2, 76, 648, 3, 2, 2,
	2, 78, 656, 3, 2, 2, 2, 80, 660, 3, 2, 2, 2, 82, 668, 3, 2, 2, 2, 84, 672,
	3, 2, 2, 2, 86, 676, 3, 2, 2, 2, 88, 684, 3, 2, 2, 2, 90, 688, 3, 2, 2,
	2, 92, 695, 3, 2, 2, 2, 94, 705, 3, 2, 2, 2, 96, 707, 3, 2, 2, 2, 98, 717,
	3, 2, 2, 2, 100, 719, 3, 2, 2, 2, 102, 721, 3, 2, 2, 2, 104, 724, 3, 2,
	2, 2, 106, 736, 3, 2, 2, 2, 108, 738, 3, 2, 2, 2, 110, 752, 3, 2, 2, 2,
	112, 754, 3, 2, 2, 2, 114, 773, 3, 2, 2, 2, 116, 775, 3, 2, 2, 2, 118,
	787, 3, 2, 2, 2, 120, 789, 3, 2, 2, 2, 122, 791, 3, 2, 2, 2, 124, 793,
	3, 2, 2, 2, 126, 798, 3, 2, 2, 2, 128, 802, 3, 2, 2, 2, 130, 813, 3, 2,
	2, 2, 132, 838, 3, 2, 2, 2, 134, 843, 3, 2, 2, 2, 136, 846, 3, 2, 2, 2,
	138, 140, 5, 4, 3, 2, 139, 141, 7, 109, 2, 2, 140, 139, 3, 2, 2, 2, 140,
	141, 3, 2, 2, 2, 141, 167, 3, 2, 2, 2, 142, 144, 5, 6, 4, 2, 143, 145,
	7, 109, 2, 2, 144, 143, 3, 2, 2, 2, 144, 145, 3, 2, 2, 2, 145, 167, 3,
	2, 2, 2, 146, 148, 5, 12, 7, 2, 147, 149, 7, 109, 2, 2, 148, 147, 3, 2,
	2, 2, 148, 149, 3, 2, 2, 2, 149, 167, 3, 2, 2, 2, 150, 152, 5, 18, 10,
	2, 151, 153, 7, 109, 2, 2, 152, 151, 3, 2, 2, 2, 152, 153, 3, 2, 2, 2,
	153, 167, 3, 2, 2, 2, 154, 156, 5, 22, 12, 2, 155, 157, 7, 109, 2, 2, 156,
	155, 3, 2, 2, 2, 156, 157, 3, 2, 2, 2, 157, 167, 3, 2, 2, 2, 158, 160,
	5, 32, 17, 2, 159, 161, 7, 109, 2, 2, 160, 159, 3, 2, 2, 2, 160, 161, 3,
	2, 2, 2, 161, 167, 3, 2, 2, 2, 162, 164, 5, 134, 68, 2, 163, 165, 7, 109,
	2, 2, 164, 163, 3, 2, 2, 2, 164, 165, 3, 2, 2, 2, 165, 167, 3, 2, 2, 2,
	166, 138, 3, 2, 2, 2, 166, 142, 3, 2, 2, 2, 166, 146, 3, 2, 2, 2, 166,
	150, 3, 2, 2, 2, 166, 154, 3, 2, 2, 2, 166, 158, 3, 2, 2, 2, 166, 162,
	3, 2, 2, 2, 167, 3, 3, 2, 2, 2, 168, 169, 7, 56, 2, 2, 169, 170, 7, 57,
	2, 2, 170, 171, 5, 118, 60, 2, 171, 172, 7, 3, 2, 2, 172, 173, 5, 128,
	65, 2, 173, 174, 7, 4, 2, 2, 174, 175, 7, 91, 2, 2, 175, 176, 7, 3, 2,
	2, 176, 177, 5, 104, 53, 2, 177, 181, 7, 4, 2, 2, 178, 179, 7, 53, 2, 2,
	179, 180, 7, 68, 2, 2, 180, 182, 7, 47, 2, 2, 181, 178, 3, 2, 2, 2, 181,
	182, 3, 2, 2, 2, 182, 184, 3, 2, 2, 2, 183, 185, 5, 46, 24, 2, 184, 183,
	3, 2, 2, 2, 184, 185, 3, 2, 2, 2, 185, 5, 3, 2, 2, 2, 186, 187, 7, 87,
	2, 2, 187, 189, 5, 118, 60, 2, 188, 190, 5, 46, 24, 2, 189, 188, 3, 2,
	2, 2, 189, 190, 3, 2, 2, 2, 190, 191, 3, 2, 2, 2, 191, 192, 7, 75, 2, 2,
	192, 193, 5, 8, 5, 2, 193, 199, 5, 56, 29, 2, 194, 197, 7, 53, 2, 2, 195,
	198, 7, 47, 2, 2, 196, 198, 5, 52, 27, 2, 197, 195, 3, 2, 2, 2, 197, 196,
	3, 2, 2, 2, 198, 200, 3, 2, 2, 2, 199, 194, 3, 2, 2, 2, 199, 200, 3, 2,
	2, 2, 200, 7, 3, 2, 2, 2, 201, 206, 5, 10, 6, 2, 202, 203, 7, 5, 2, 2,
	203, 205, 5, 10, 6, 2, 204, 202, 3, 2, 2, 2, 205, 208, 3, 2, 2, 2, 206,
	204, 3, 2, 2, 2, 206, 207, 3, 2, 2, 2, 207, 9, 3, 2, 2, 2, 208, 206, 3,
	2, 2, 2, 209, 210, 5, 130, 66, 2, 210, 211, 7, 6, 2, 2, 211, 214, 5, 106,
	54, 2, 212, 213, 7, 7, 2, 2, 213, 215, 5, 130, 66, 2, 214, 212, 3, 2, 2,
	2, 214, 215, 3, 2, 2, 2, 215, 240, 3, 2, 2, 2, 216, 217, 5, 130, 66, 2,
	217, 218, 7, 6, 2, 2, 218, 219, 5, 130, 66, 2, 219, 220, 9, 2, 2, 2, 220,
	221, 5, 106, 54, 2, 221, 240, 3, 2, 2, 2, 222, 223, 5, 130, 66, 2, 223,
	224, 9, 3, 2, 2, 224, 225, 5, 106, 54, 2, 225, 240, 3, 2, 2, 2, 226, 227,
	5, 130, 66, 2, 227, 228, 7, 11, 2, 2, 228, 229, 5, 106, 54, 2, 229, 230,
	7, 12, 2, 2, 230, 231, 7, 6, 2, 2, 231, 232, 5, 106, 54, 2, 232, 240, 3,
	2, 2, 2, 233, 234, 5, 130, 66, 2, 234, 235, 7, 13, 2, 2, 235, 236, 5, 130,
	66, 2, 236, 237, 7, 6, 2, 2, 237, 238, 5, 106, 54, 2, 238, 240, 3, 2, 2,
	2, 239, 209, 3, 2, 2, 2, 239, 216, 3, 2, 2, 2, 239, 222, 3, 2, 2, 2, 239,
	226, 3, 2, 2, 2, 239, 233, 3, 2, 2, 2, 240, 11, 3, 2, 2, 2, 241, 243, 7,
	42, 2, 2, 242, 244, 5, 14, 8, 2, 243, 242, 3, 2, 2, 2, 243, 244, 3, 2,
	2, 2, 244, 245, 3, 2, 2, 2, 245, 246, 7, 50, 2, 2, 246, 249, 5, 118, 60,
	2, 247, 248, 7, 89, 2, 2, 248, 250, 5, 48, 25, 2, 249, 247, 3, 2, 2, 2,
	249, 250, 3, 2, 2, 2, 250, 251, 3, 2, 2, 2, 251, 257, 5, 56, 29, 2, 252,
	255, 7, 53, 2, 2, 253, 256, 7, 47, 2, 2, 254, 256, 5, 52, 27, 2, 255, 253,
	3, 2, 2, 2, 255, 254, 3, 2, 2, 2, 256, 258, 3, 2, 2, 2, 257, 252, 3, 2,
	2, 2, 257, 258, 3, 2, 2, 2, 258, 13, 3, 2, 2, 2, 259, 264, 5, 16, 9, 2,
	260, 261, 7, 5, 2, 2, 261, 263, 5, 16, 9, 2, 262, 260, 3, 2, 2, 2, 263,
	266, 3, 2, 2, 2, 264, 262, 3, 2, 2, 2, 264, 265, 3, 2, 2, 2, 265, 15, 3,
	2, 2, 2, 266, 264, 3, 2, 2, 2, 267, 278, 5, 130, 66, 2, 268, 269, 5, 130,
	66, 2, 269, 270, 7, 11, 2, 2, 270, 271, 5, 106, 54, 2, 271, 272, 7, 12,
	2, 2, 272, 278, 3, 2, 2, 2, 273, 274, 5, 130, 66, 2, 274, 275, 7, 13, 2,
	2, 275, 276, 5, 130, 66, 2, 276, 278, 3, 2, 2, 2, 277, 267, 3, 2, 2, 2,
	277, 268, 3, 2, 2, 2, 277, 273, 3, 2, 2, 2, 278, 17, 3, 2, 2, 2, 279, 281,
	7, 30, 2, 2, 280, 282, 9, 4, 2, 2, 281, 280, 3, 2, 2, 2, 281, 282, 3, 2,
	2, 2, 282, 283, 3, 2, 2, 2, 283, 285, 7, 29, 2, 2, 284, 286, 5, 46, 24,
	2, 285, 284, 3, 2, 2, 2, 285, 286, 3, 2, 2, 2, 286, 293, 3, 2, 2, 2, 287,
	289, 5, 20, 11, 2, 288, 290, 7, 109, 2, 2, 289, 288, 3, 2, 2, 2, 289, 290,
	3, 2, 2, 2, 290, 292, 3, 2, 2, 2, 291, 287, 3, 2, 2, 2, 292, 295, 3, 2,
	2, 2, 293, 291, 3, 2, 2, 2, 293, 294, 3, 2, 2, 2, 294, 296, 3, 2, 2, 2,
	295, 293, 3, 2, 2, 2, 296, 297, 7, 25, 2, 2, 297, 298, 7, 29, 2, 2, 298,
	19, 3, 2, 2, 2, 299, 303, 5, 4, 3, 2, 300, 303, 5, 6, 4, 2, 301, 303, 5,
	12, 7, 2, 302, 299, 3, 2, 2, 2, 302, 300, 3, 2, 2, 2, 302, 301, 3, 2, 2,
	2, 303, 21, 3, 2, 2, 2, 304, 306, 7, 74, 2, 2, 305, 307, 7, 61, 2, 2, 306,
	305, 3, 2, 2, 2, 306, 307, 3, 2, 2, 2, 307, 309, 3, 2, 2, 2, 308, 310,
	7, 44, 2, 2, 309, 308, 3, 2, 2, 2, 309, 310, 3, 2, 2, 2, 310, 311, 3, 2,
	2, 2, 311, 312, 5, 24, 13, 2, 312, 313, 7, 50, 2, 2, 313, 315, 5, 118,
	60, 2, 314, 316, 5, 56, 29, 2, 315, 314, 3, 2, 2, 2, 315, 316, 3, 2, 2,
	2, 316, 318, 3, 2, 2, 2, 317, 319, 5, 40, 21, 2, 318, 317, 3, 2, 2, 2,
	318, 319, 3, 2, 2, 2, 319, 321, 3, 2, 2, 2, 320, 322, 5, 34, 18, 2, 321,
	320, 3, 2, 2, 2, 321, 322, 3, 2, 2, 2, 322, 324, 3, 2, 2, 2, 323, 325,
	5, 42, 22, 2, 324, 323, 3, 2, 2, 2, 324, 325, 3, 2, 2, 2, 325, 327, 3,
	2, 2, 2, 326, 328, 5, 44, 23, 2, 327, 326, 3, 2, 2, 2, 327, 328, 3, 2,
	2, 2, 328, 331, 3, 2, 2, 2, 329, 330, 7, 23, 2, 2, 330, 332, 7, 48, 2,
	2, 331, 329, 3, 2, 2, 2, 331, 332, 3, 2, 2, 2, 332, 23, 3, 2, 2, 2, 333,
	336, 7, 14, 2, 2, 334, 336, 5, 26, 14, 2, 335, 333, 3, 2, 2, 2, 335, 334,
	3, 2, 2, 2, 336, 25, 3, 2, 2, 2, 337, 342, 5, 28, 15, 2, 338, 339, 7, 5,
	2, 2, 339, 341, 5, 28, 15, 2, 340, 338, 3, 2, 2, 2, 341, 344, 3, 2, 2,
	2, 342, 340, 3, 2, 2, 2, 342, 343, 3, 2, 2, 2, 343, 27, 3, 2, 2, 2, 344,
	342, 3, 2, 2, 2, 345, 348, 5, 30, 16, 2, 346, 347, 7, 27, 2, 2, 347, 349,
	5, 130, 66, 2, 348, 346, 3, 2, 2, 2, 348, 349, 3, 2, 2, 2, 349, 29, 3,
	2, 2, 2, 350, 364, 5, 130, 66, 2, 351, 364, 5, 106, 54, 2, 352, 353, 7,
	39, 2, 2, 353, 354, 7, 3, 2, 2, 354, 355, 7, 14, 2, 2, 355, 364, 7, 4,
	2, 2, 356, 357, 7, 35, 2, 2, 357, 358, 7, 3, 2, 2, 358, 359, 5, 30, 16,
	2, 359, 360, 7, 27, 2, 2, 360, 361, 5, 112, 57, 2, 361, 362, 7, 4, 2, 2,
	362, 364, 3, 2, 2, 2, 363, 350, 3, 2, 2, 2, 363, 351, 3, 2, 2, 2, 363,
	352, 3, 2, 2, 2, 363, 356, 3, 2, 2, 2, 364, 31, 3, 2, 2, 2, 365, 366, 7,
	88, 2, 2, 366, 367, 5, 124, 63, 2, 367, 33, 3, 2, 2, 2, 368, 369, 7, 71,
	2, 2, 369, 370, 7, 34, 2, 2, 370, 371, 5, 36, 19, 2, 371, 35, 3, 2, 2,
	2, 372, 377, 5, 38, 20, 2, 373, 374, 7, 5, 2, 2, 374, 376, 5, 38, 20, 2,
	375, 373, 3, 2, 2, 2, 376, 379, 3, 2, 2, 2, 377, 375, 3, 2, 2, 2, 377,
	378, 3, 2, 2, 2, 378, 37, 3, 2, 2, 2, 379, 377, 3, 2, 2, 2, 380, 382, 5,
	130, 66, 2, 381, 383, 9, 5, 2, 2, 382, 381, 3, 2, 2, 2, 382, 383, 3, 2,
	2, 2, 383, 39, 3, 2, 2, 2, 384, 385, 7, 52, 2, 2, 385, 386, 7, 34, 2, 2,
	386, 387, 5, 128, 65, 2, 387, 41, 3, 2, 2, 2, 388, 389, 7, 73, 2, 2, 389,
	390, 7, 72, 2, 2, 390, 393, 7, 64, 2, 2, 391, 394, 7, 98, 2, 2, 392, 394,
	5, 98, 50, 2, 393, 391, 3, 2, 2, 2, 393, 392, 3, 2, 2, 2, 394, 43, 3, 2,
	2, 2, 395, 398, 7, 64, 2, 2, 396, 399, 7, 98, 2, 2, 397, 399, 5, 98, 50,
	2, 398, 396, 3, 2, 2, 2, 398, 397, 3, 2, 2, 2, 399, 45, 3, 2, 2, 2, 400,
	401, 7, 89, 2, 2, 401, 415, 5, 48, 25, 2, 402, 403, 7, 89, 2, 2, 403, 415,
	5, 50, 26, 2, 404, 405, 7, 89, 2, 2, 405, 406, 5, 48, 25, 2, 406, 407,
	7, 24, 2, 2, 407, 408, 5, 50, 26, 2, 408, 415, 3, 2, 2, 2, 409, 410, 7,
	89, 2, 2, 410, 411, 5, 50, 26, 2, 411, 412, 7, 24, 2, 2, 412, 413, 5, 48,
	25, 2, 413, 415, 3, 2, 2, 2, 414, 400, 3, 2, 2, 2, 414, 402, 3, 2, 2, 2,
	414, 404, 3, 2, 2, 2, 414, 409, 3, 2, 2, 2, 415, 47, 3, 2, 2, 2, 416, 419,
	7, 78, 2, 2, 417, 420, 7, 98, 2, 2, 418, 420, 5, 98, 50, 2, 419, 417, 3,
	2, 2, 2, 419, 418, 3, 2, 2, 2, 420, 49, 3, 2, 2, 2, 421, 424, 7, 83, 2,
	2, 422, 425, 7, 98, 2, 2, 423, 425, 5, 98, 50, 2, 424, 422, 3, 2, 2, 2,
	424, 423, 3, 2, 2, 2, 425, 51, 3, 2, 2, 2, 426, 431, 5, 54, 28, 2, 427,
	428, 7, 24, 2, 2, 428, 430, 5, 54, 28, 2, 429, 427, 3, 2, 2, 2, 430, 433,
	3, 2, 2, 2, 431, 429, 3, 2, 2, 2, 431, 432, 3, 2, 2, 2, 432, 53, 3, 2,
	2, 2, 433, 431, 3, 2, 2, 2, 434, 435, 5, 130, 66, 2, 435, 436, 5, 62, 32,
	2, 436, 437, 5, 106, 54, 2, 437, 487, 3, 2, 2, 2, 438, 439, 5, 130, 66,
	2, 439, 446, 7, 59, 2, 2, 440, 442, 7, 3, 2, 2, 441, 443, 5, 104, 53, 2,
	442, 441, 3, 2, 2, 2, 442, 443, 3, 2, 2, 2, 443, 444, 3, 2, 2, 2, 444,
	447, 7, 4, 2, 2, 445, 447, 5, 98, 50, 2, 446, 440, 3, 2, 2, 2, 446, 445,
	3, 2, 2, 2, 447, 487, 3, 2, 2, 2, 448, 449, 5, 130, 66, 2, 449, 450, 7,
	11, 2, 2, 450, 451, 5, 106, 54, 2, 451, 452, 7, 12, 2, 2, 452, 453, 5,
	62, 32, 2, 453, 454, 5, 106, 54, 2, 454, 487, 3, 2, 2, 2, 455, 456, 5,
	130, 66, 2, 456, 457, 7, 11, 2, 2, 457, 458, 5, 106, 54, 2, 458, 459, 7,
	12, 2, 2, 459, 466, 7, 59, 2, 2, 460, 462, 7, 3, 2, 2, 461, 463, 5, 104,
	53, 2, 462, 461, 3, 2, 2, 2, 462, 463, 3, 2, 2, 2, 463, 464, 3, 2, 2, 2,
	464, 467, 7, 4, 2, 2, 465, 467, 5, 98, 50, 2, 466, 460, 3, 2, 2, 2, 466,
	465, 3, 2, 2, 2, 467, 487, 3, 2, 2, 2, 468, 469, 5, 130, 66, 2, 469, 470,
	7, 13, 2, 2, 470, 471, 5, 130, 66, 2, 471, 472, 5, 62, 32, 2, 472, 473,
	5, 106, 54, 2, 473, 487, 3, 2, 2, 2, 474, 475, 5, 130, 66, 2, 475, 476,
	7, 13, 2, 2, 476, 477, 5, 130, 66, 2, 477, 484, 7, 59, 2, 2, 478, 480,
	7, 3, 2, 2, 479, 481, 5, 104, 53, 2, 480, 479, 3, 2, 2, 2, 480, 481, 3,
	2, 2, 2, 481, 482, 3, 2, 2, 2, 482, 485, 7, 4, 2, 2, 483, 485, 5, 98, 50,
	2, 484, 478, 3, 2, 2, 2, 484, 483, 3, 2, 2, 2, 485, 487, 3, 2, 2, 2, 486,
	434, 3, 2, 2, 2, 486, 438, 3, 2, 2, 2, 486, 448, 3, 2, 2, 2, 486, 455,
	3, 2, 2, 2, 486, 468, 3, 2, 2, 2, 486, 474, 3, 2, 2, 2, 487, 55, 3, 2,
	2, 2, 488, 489, 7, 94, 2, 2, 489, 495, 5, 60, 31, 2, 490, 491, 5, 58, 30,
	2, 491, 492, 5, 60, 31, 2, 492, 494, 3, 2, 2, 2, 493, 490, 3, 2, 2, 2,
	494, 497, 3, 2, 2, 2, 495, 493, 3, 2, 2, 2, 495, 496, 3, 2, 2, 2, 496,
	57, 3, 2, 2, 2, 497, 495, 3, 2, 2, 2, 498, 499, 9, 6, 2, 2, 499, 59, 3,
	2, 2, 2, 500, 501, 5, 130, 66, 2, 501, 502, 5, 62, 32, 2, 502, 503, 5,
	106, 54, 2, 503, 598, 3, 2, 2, 2, 504, 505, 7, 82, 2, 2, 505, 506, 7, 3,
	2, 2, 506, 507, 5, 128, 65, 2, 507, 508, 7, 4, 2, 2, 508, 509, 5, 62, 32,
	2, 509, 510, 5, 106, 54, 2, 510, 598, 3, 2, 2, 2, 511, 512, 5, 130, 66,
	2, 512, 513, 7, 63, 2, 2, 513, 514, 5, 106, 54, 2, 514, 598, 3, 2, 2, 2,
	515, 516, 5, 130, 66, 2, 516, 517, 7, 60, 2, 2, 517, 518, 7, 68, 2, 2,
	518, 519, 7, 69, 2, 2, 519, 598, 3, 2, 2, 2, 520, 521, 5, 130, 66, 2, 521,
	523, 7, 37, 2, 2, 522, 524, 7, 62, 2, 2, 523, 522, 3, 2, 2, 2, 523, 524,
	3, 2, 2, 2, 524, 525, 3, 2, 2, 2, 525, 526, 5, 106, 54, 2, 526, 598, 3,
	2, 2, 2, 527, 528, 5, 130, 66, 2, 528, 529, 7, 11, 2, 2, 529, 530, 5, 106,
	54, 2, 530, 531, 7, 12, 2, 2, 531, 532, 5, 62, 32, 2, 532, 533, 5, 106,
	54, 2, 533, 598, 3, 2, 2, 2, 534, 535, 5, 130, 66, 2, 535, 542, 7, 59,
	2, 2, 536, 538, 7, 3, 2, 2, 537, 539, 5, 104, 53, 2, 538, 537, 3, 2, 2,
	2, 538, 539, 3, 2, 2, 2, 539, 540, 3, 2, 2, 2, 540, 543, 7, 4, 2, 2, 541,
	543, 5, 98, 50, 2, 542, 536, 3, 2, 2, 2, 542, 541, 3, 2, 2, 2, 543, 598,
	3, 2, 2, 2, 544, 545, 7, 3, 2, 2, 545, 546, 5, 128, 65, 2, 546, 547, 7,
	4, 2, 2, 547, 548, 7, 59, 2, 2, 548, 549, 7, 3, 2, 2, 549, 550, 7, 4, 2,
	2, 550, 598, 3, 2, 2, 2, 551, 552, 7, 3, 2, 2, 552, 553, 5, 128, 65, 2,
	553, 554, 7, 4, 2, 2, 554, 555, 7, 59, 2, 2, 555, 556, 5, 98, 50, 2, 556,
	598, 3, 2, 2, 2, 557, 558, 7, 3, 2, 2, 558, 559, 5, 128, 65, 2, 559, 560,
	7, 4, 2, 2, 560, 561, 7, 59, 2, 2, 561, 562, 7, 3, 2, 2, 562, 563, 5, 80,
	41, 2, 563, 564, 7, 4, 2, 2, 564, 598, 3, 2, 2, 2, 565, 566, 7, 3, 2, 2,
	566, 567, 5, 128, 65, 2, 567, 568, 7, 4, 2, 2, 568, 569, 7, 59, 2, 2, 569,
	570, 7, 3, 2, 2, 570, 571, 5, 96, 49, 2, 571, 572, 7, 4, 2, 2, 572, 598,
	3, 2, 2, 2, 573, 574, 7, 3, 2, 2, 574, 575, 5, 128, 65, 2, 575, 576, 7,
	4, 2, 2, 576, 577, 5, 62, 32, 2, 577, 578, 5, 82, 42, 2, 578, 598, 3, 2,
	2, 2, 579, 580, 7, 3, 2, 2, 580, 581, 5, 128, 65, 2, 581, 582, 7, 4, 2,
	2, 582, 583, 5, 62, 32, 2, 583, 584, 7, 3, 2, 2, 584, 585, 5, 96, 49, 2,
	585, 586, 7, 4, 2, 2, 586, 598, 3, 2, 2, 2, 587, 588, 7, 3, 2, 2, 588,
	589, 5, 128, 65, 2, 589, 590, 7, 4, 2, 2, 590, 591, 5, 62, 32, 2, 591,
	592, 5, 98, 50, 2, 592, 598, 3, 2, 2, 2, 593, 594, 7, 3, 2, 2, 594, 595,
	5, 60, 31, 2, 595, 596, 7, 4, 2, 2, 596, 598, 3, 2, 2, 2, 597, 500, 3,
	2, 2, 2, 597, 504, 3, 2, 2, 2, 597, 511, 3, 2, 2, 2, 597, 515, 3, 2, 2,
	2, 597, 520, 3, 2, 2, 2, 597, 527, 3, 2, 2, 2, 597, 534, 3, 2, 2, 2, 597,
	544, 3, 2, 2, 2, 597, 551, 3, 2, 2, 2, 597, 557, 3, 2, 2, 2, 597, 565,
	3, 2, 2, 2, 597, 573, 3, 2, 2, 2, 597, 579, 3, 2, 2, 2, 597, 587, 3, 2,
	2, 2, 597, 593, 3, 2, 2, 2, 598, 61, 3, 2, 2, 2, 599, 600, 9, 7, 2, 2,
	600, 63, 3, 2, 2, 2, 601, 607, 5, 66, 34, 2, 602, 607, 5, 68, 35, 2, 603,
	607, 5, 82, 42, 2, 604, 607, 5, 84, 43, 2, 605, 607, 7, 69, 2, 2, 606,
	601, 3, 2, 2, 2, 606, 602, 3, 2, 2, 2, 606, 603, 3, 2, 2, 2, 606, 604,
	3, 2, 2, 2, 606, 605, 3, 2, 2, 2, 607, 65, 3, 2, 2, 2, 608, 624, 7, 96,
	2, 2, 609, 624, 7, 98, 2, 2, 610, 624, 7, 100, 2, 2, 611, 624, 7, 101,
	2, 2, 612, 624, 7, 102, 2, 2, 613, 624, 7, 105, 2, 2, 614, 624, 7, 104,
	2, 2, 615, 617, 7, 8, 2, 2, 616, 615, 3, 2, 2, 2, 616, 617, 3, 2, 2, 2,
	617, 618, 3, 2, 2, 2, 618, 624, 7, 67, 2, 2, 619, 621, 7, 8, 2, 2, 620,
	619, 3, 2, 2, 2, 620, 621, 3, 2, 2, 2, 621, 622, 3, 2, 2, 2, 622, 624,
	7, 55, 2, 2, 623, 608, 3, 2, 2, 2, 623, 609, 3, 2, 2, 2, 623, 610, 3, 2,
	2, 2, 623, 611, 3, 2, 2, 2, 623, 612, 3, 2, 2, 2, 623, 613, 3, 2, 2, 2,
	623, 614, 3, 2, 2, 2, 623, 616, 3, 2, 2, 2, 623, 620, 3, 2, 2, 2, 624,
	67, 3, 2, 2, 2, 625, 629, 5, 70, 36, 2, 626, 629, 5, 72, 37, 2, 627, 629,
	5, 74, 38, 2, 628, 625, 3, 2, 2, 2, 628, 626, 3, 2, 2, 2, 628, 627, 3,
	2, 2, 2, 629, 69, 3, 2, 2, 2, 630, 632, 7, 11, 2, 2, 631, 633, 5, 104,
	53, 2, 632, 631, 3, 2, 2, 2, 632, 633, 3, 2, 2, 2, 633, 634, 3, 2, 2, 2,
	634, 635, 7, 12, 2, 2, 635, 71, 3, 2, 2, 2, 636, 638, 7, 21, 2, 2, 637,
	639, 5, 104, 53, 2, 638, 637, 3, 2, 2, 2, 638, 639, 3, 2, 2, 2, 639, 640,
	3, 2, 2, 2, 640, 641, 7, 22, 2, 2, 641, 73, 3, 2, 2, 2, 642, 644, 7, 21,
	2, 2, 643, 645, 5, 76, 39, 2, 644, 643, 3, 2, 2, 2, 644, 645, 3, 2, 2,
	2, 645, 646, 3, 2, 2, 2, 646, 647, 7, 22, 2, 2, 647, 75, 3, 2, 2, 2, 648,
	653, 5, 78, 40, 2, 649, 650, 7, 5, 2, 2, 650, 652, 5, 78, 40, 2, 651, 649,
	3, 2, 2, 2, 652, 655, 3, 2, 2, 2, 653, 651, 3, 2, 2, 2, 653, 654, 3, 2,
	2, 2, 654, 77, 3, 2, 2, 2, 655, 653, 3, 2, 2, 2, 656, 657, 5, 106, 54,
	2, 657, 658, 7, 20, 2, 2, 658, 659, 5, 106, 54, 2, 659, 79, 3, 2, 2, 2,
	660, 665, 5, 82, 42, 2, 661, 662, 7, 5, 2, 2, 662, 664, 5, 82, 42, 2, 663,
	661, 3, 2, 2, 2, 664, 667, 3, 2, 2, 2, 665, 663, 3, 2, 2, 2, 665, 666,
	3, 2, 2, 2, 666, 81, 3, 2, 2, 2, 667, 665, 3, 2, 2, 2, 668, 669, 7, 3,
	2, 2, 669, 670, 5, 104, 53, 2, 670, 671, 7, 4, 2, 2, 671, 83, 3, 2, 2,
	2, 672, 673, 7, 21, 2, 2, 673, 674, 5, 86, 44, 2, 674, 675, 7, 22, 2, 2,
	675, 85, 3, 2, 2, 2, 676, 681, 5, 88, 45, 2, 677, 678, 7, 5, 2, 2, 678,
	680, 5, 88, 45, 2, 679, 677, 3, 2, 2, 2, 680, 683, 3, 2, 2, 2, 681, 679,
	3, 2, 2, 2, 681, 682, 3, 2, 2, 2, 682, 87, 3, 2, 2, 2, 683, 681, 3, 2,
	2, 2, 684, 685, 5, 130, 66, 2, 685, 686, 7, 20, 2, 2, 686, 687, 5, 106,
	54, 2, 687, 89, 3, 2, 2, 2, 688, 689, 5, 120, 61, 2, 689, 691, 7, 3, 2,
	2, 690, 692, 5, 92, 47, 2, 691, 690, 3, 2, 2, 2, 691, 692, 3, 2, 2, 2,
	692, 693, 3, 2, 2, 2, 693, 694, 7, 4, 2, 2, 694, 91, 3, 2, 2, 2, 695, 700,
	5, 94, 48, 2, 696, 697, 7, 5, 2, 2, 697, 699, 5, 94, 48, 2, 698, 696, 3,
	2, 2, 2, 699, 702, 3, 2, 2, 2, 700, 698, 3, 2, 2, 2, 700, 701, 3, 2, 2,
	2, 701, 93, 3, 2, 2, 2, 702, 700, 3, 2, 2, 2, 703, 706, 5, 130, 66, 2,
	704, 706, 5, 106, 54, 2, 705, 703, 3, 2, 2, 2, 705, 704, 3, 2, 2, 2, 706,
	95, 3, 2, 2, 2, 707, 712, 5, 98, 50, 2, 708, 709, 7, 5, 2, 2, 709, 711,
	5, 98, 50, 2, 710, 708, 3, 2, 2, 2, 711, 714, 3, 2, 2, 2, 712, 710, 3,
	2, 2, 2, 712, 713, 3, 2, 2, 2, 713, 97, 3, 2, 2, 2, 714, 712, 3, 2, 2,
	2, 715, 718, 5, 100, 51, 2, 716, 718, 5, 102, 52, 2, 717, 715, 3, 2, 2,
	2, 717, 716, 3, 2, 2, 2, 718, 99, 3, 2, 2, 2, 719, 720, 7, 99, 2, 2, 720,
	101, 3, 2, 2, 2, 721, 722, 7, 20, 2, 2, 722, 723, 5, 130, 66, 2, 723, 103,
	3, 2, 2, 2, 724, 729, 5, 106, 54, 2, 725, 726, 7, 5, 2, 2, 726, 728, 5,
	106, 54, 2, 727, 725, 3, 2, 2, 2, 728, 731, 3, 2, 2, 2, 729, 727, 3, 2,
	2, 2, 729, 730, 3, 2, 2, 2, 730, 105, 3, 2, 2, 2, 731, 729, 3, 2, 2, 2,
	732, 737, 5, 64, 33, 2, 733, 737, 5, 98, 50, 2, 734, 737, 5, 90, 46, 2,
	735, 737, 5, 108, 55, 2, 736, 732, 3, 2, 2, 2, 736, 733, 3, 2, 2, 2, 736,
	734, 3, 2, 2, 2, 736, 735, 3, 2, 2, 2, 737, 107, 3, 2, 2, 2, 738, 739,
	7, 3, 2, 2, 739, 740, 5, 110, 56, 2, 740, 741, 7, 4, 2, 2, 741, 742, 5,
	106, 54, 2, 742, 109, 3, 2, 2, 2, 743, 753, 5, 112, 57, 2, 744, 753, 5,
	114, 58, 2, 745, 753, 5, 116, 59, 2, 746, 753, 5, 122, 62, 2, 747, 748,
	7, 51, 2, 2, 748, 749, 7, 15, 2, 2, 749, 750, 5, 110, 56, 2, 750, 751,
	7, 17, 2, 2, 751, 753, 3, 2, 2, 2, 752, 743, 3, 2, 2, 2, 752, 744, 3, 2,
	2, 2, 752, 745, 3, 2, 2, 2, 752, 746, 3, 2, 2, 2, 752, 747, 3, 2, 2, 2,
	753, 111, 3, 2, 2, 2, 754, 755, 9, 8, 2, 2, 755, 113, 3, 2, 2, 2, 756,
	757, 7, 65, 2, 2, 757, 758, 7, 15, 2, 2, 758, 759, 5, 110, 56, 2, 759,
	760, 7, 17, 2, 2, 760, 774, 3, 2, 2, 2, 761, 762, 7, 75, 2, 2, 762, 763,
	7, 15, 2, 2, 763, 764, 5, 110, 56, 2, 764, 765, 7, 17, 2, 2, 765, 774,
	3, 2, 2, 2, 766, 767, 7, 66, 2, 2, 767, 768, 7, 15, 2, 2, 768, 769, 5,
	110, 56, 2, 769, 770, 7, 5, 2, 2, 770, 771, 5, 110, 56, 2, 771, 772, 7,
	17, 2, 2, 772, 774, 3, 2, 2, 2, 773, 756, 3, 2, 2, 2, 773, 761, 3, 2, 2,
	2, 773, 766, 3, 2, 2, 2, 774, 115, 3, 2, 2, 2, 775, 776, 7, 84, 2, 2, 776,
	777, 7, 15, 2, 2, 777, 782, 5, 110, 56, 2, 778, 779, 7, 5, 2, 2, 779, 781,
	5, 110, 56, 2, 780, 778, 3, 2, 2, 2, 781, 784, 3, 2, 2, 2, 782, 780, 3,
	2, 2, 2, 782, 783, 3, 2, 2, 2, 783, 785, 3, 2, 2, 2, 784, 782, 3, 2, 2,
	2, 785, 786, 7, 17, 2, 2, 786, 117, 3, 2, 2, 2, 787, 788, 5, 126, 64, 2,
	788, 119, 3, 2, 2, 2, 789, 790, 5, 126, 64, 2, 790, 121, 3, 2, 2, 2, 791,
	792, 5, 126, 64, 2, 792, 123, 3, 2, 2, 2, 793, 794, 5, 130, 66, 2, 794,
	125, 3, 2, 2, 2, 795, 796, 5, 124, 63, 2, 796, 797, 7, 13, 2, 2, 797, 799,
	3, 2, 2, 2, 798, 795, 3, 2, 2, 2, 798, 799, 3, 2, 2, 2, 799, 800, 3, 2,
	2, 2, 800, 801, 5, 130, 66, 2, 801, 127, 3, 2, 2, 2, 802, 807, 5, 130,
	66, 2, 803, 804, 7, 5, 2, 2, 804, 806, 5, 130, 66, 2, 805, 803, 3, 2, 2,
	2, 806, 809, 3, 2, 2, 2, 807, 805, 3, 2, 2, 2, 807, 808, 3, 2, 2, 2, 808,
	129, 3, 2, 2, 2, 809, 807, 3, 2, 2, 2, 810, 814, 7, 103, 2, 2, 811, 814,
	7, 97, 2, 2, 812, 814, 5, 132, 67, 2, 813, 810, 3, 2, 2, 2, 813, 811, 3,
	2, 2, 2, 813, 812, 3, 2, 2, 2, 814, 131, 3, 2, 2, 2, 815, 839, 7, 27, 2,
	2, 816, 839, 7, 35, 2, 2, 817, 839, 7, 36, 2, 2, 818, 839, 7, 37, 2, 2,
	819, 839, 7, 39, 2, 2, 820, 839, 7, 44, 2, 2, 821, 839, 7, 47, 2, 2, 822,
	839, 7, 48, 2, 2, 823, 839, 7, 51, 2, 2, 824, 839, 7, 52, 2, 2, 825, 839,
	7, 61, 2, 2, 826, 839, 7, 62, 2, 2, 827, 839, 7, 63, 2, 2, 828, 839, 7,
	65, 2, 2, 829, 839, 7, 66, 2, 2, 830, 839, 7, 72, 2, 2, 831, 839, 7, 73,
	2, 2, 832, 839, 7, 83, 2, 2, 833, 839, 7, 84, 2, 2, 834, 839, 7, 85, 2,
	2, 835, 839, 7, 91, 2, 2, 836, 839, 7, 95, 2, 2, 837, 839, 5, 112, 57,
	2, 838, 815, 3, 2, 2, 2, 838, 816, 3, 2, 2, 2, 838, 817, 3, 2, 2, 2, 838,
	818, 3, 2, 2, 2, 838, 819, 3, 2, 2, 2, 838, 820, 3, 2, 2, 2, 838, 821,
	3, 2, 2, 2, 838, 822, 3, 2, 2, 2, 838, 823, 3, 2, 2, 2, 838, 824, 3, 2,
	2, 2, 838, 825, 3, 2, 2, 2, 838, 826, 3, 2, 2, 2, 838, 827, 3, 2, 2, 2,
	838, 828, 3, 2, 2, 2, 838, 829, 3, 2, 2, 2, 838, 830, 3, 2, 2, 2, 838,
	831, 3, 2, 2, 2, 838, 832, 3, 2, 2, 2, 838, 833, 3, 2, 2, 2, 838, 834,
	3, 2, 2, 2, 838, 835, 3, 2, 2, 2, 838, 836, 3, 2, 2, 2, 838, 837, 3, 2,
	2, 2, 839, 133, 3, 2, 2, 2, 840, 842, 5, 136, 69, 2, 841, 840, 3, 2, 2,
	2, 842, 845, 3, 2, 2, 2, 843, 841, 3, 2, 2, 2, 843, 844, 3, 2, 2, 2, 844,
	135, 3, 2, 2, 2, 845, 843, 3, 2, 2, 2, 846, 847, 11, 2, 2, 2, 847, 137,
	3, 2, 2, 2, 87, 140, 144, 148, 152, 156, 160, 164, 166, 181, 184, 189,
	197, 199, 206, 214, 239, 243, 249, 255, 257, 264, 277, 281, 285, 289, 293,
	302, 306, 309, 315, 318, 321, 324, 327, 331, 335, 342, 348, 363, 377, 382,
	393, 398, 414, 419, 424, 431, 442, 446, 462, 466, 480, 484, 486, 495, 523,
	538, 542, 597, 606, 616, 620, 623, 628, 632, 638, 644, 653, 665, 681, 691,
	700, 705, 712, 717, 729, 736, 752, 773, 782, 798, 807, 813, 838, 843,
}
var literalNames = []string{
	"", "'('", "')'", "','", "'='", "'+'", "'-'", "'+='", "'-='", "'['", "']'",
	"'.'", "'*'", "'<'", "'<='", "'>'", "'>='", "'!='", "':'", "'{'", "'}'",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "'?'", "", "", "", "", "", "", "", "", "", "';'",
}
var symbolicNames = []string{
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "K_ALLOW", "K_AND", "K_APPLY", "K_ASC", "K_AS", "K_ASCII",
	"K_BATCH", "K_BEGIN", "K_BIGINT", "K_BLOB", "K_BOOLEAN", "K_BY", "K_CAST",
	"K_CLUSTERING", "K_CONTAINS", "K_COUNTER", "K_COUNT", "K_DATE", "K_DECIMAL",
	"K_DELETE", "K_DESC", "K_DISTINCT", "K_DOUBLE", "K_DURATION", "K_EXISTS",
	"K_FILTERING", "K_FLOAT", "K_FROM", "K_FROZEN", "K_GROUP", "K_IF", "K_INET",
	"K_INFINITY", "K_INSERT", "K_INTO", "K_INT", "K_IN", "K_IS", "K_JSON",
	"K_KEY", "K_LIKE", "K_LIMIT", "K_LIST", "K_MAP", "K_NAN", "K_NOT", "K_NULL",
	"K_OR", "K_ORDER", "K_PARTITION", "K_PER", "K_SELECT", "K_SET", "K_SMALLINT",
	"K_TEXT", "K_TIMESTAMP", "K_TIMEUUID", "K_TIME", "K_TINYINT", "K_TOKEN",
	"K_TTL", "K_TUPLE", "K_TYPE", "K_UNLOGGED", "K_UPDATE", "K_USE", "K_USING",
	"K_UUID", "K_VALUES", "K_VARCHAR", "K_VARINT", "K_WHERE", "K_WRITETIME",
	"STRING_LITERAL", "QUOTED_IDENTIFIER", "INTEGER", "QMARK", "FLOAT", "BOOLEAN",
	"DURATION", "UNQUOTED_IDENTIFIER", "HEXNUMBER", "UUID", "WS", "COMMENT",
	"MULTILINE_COMMENT", "EOS", "OTHER",
}

var ruleNames = []string{
	"cqlStatement", "insertStatement", "updateStatement", "updateOperations",
	"updateOperation", "deleteStatement", "deleteOperations", "deleteOperation",
	"batchStatement", "batchChildStatement", "selectStatement", "selectClause",
	"selectors", "selector", "unaliasedSelector", "useStatement", "orderByClause",
	"orderings", "ordering", "groupByClause", "perPartitionLimitClause", "limitClause",
	"usingClause", "timestamp", "ttl", "conditions", "condition", "whereClause",
	"logicalOperator", "relation", "operator", "literal", "primitiveLiteral",
	"collectionLiteral", "listLiteral", "setLiteral", "mapLiteral", "mapEntries",
	"mapEntry", "tupleLiterals", "tupleLiteral", "udtLiteral", "fieldLiterals",
	"fieldLiteral", "functionCall", "functionArgs", "functionArg", "bindMarkers",
	"bindMarker", "positionalBindMarker", "namedBindMarker", "terms", "term",
	"typeCast", "cqlType", "primitiveType", "collectionType", "tupleType",
	"tableName", "functionName", "userTypeName", "keyspaceName", "qualifiedIdentifier",
	"identifiers", "identifier", "unreservedKeyword", "unrecognizedStatement",
	"unrecognizedToken",
}

type SimplifiedCqlParser struct {
	*antlr.BaseParser
}

// NewSimplifiedCqlParser produces a new parser instance for the optional input antlr.TokenStream.
//
// The *SimplifiedCqlParser instance produced may be reused by calling the SetInputStream method.
// The initial parser configuration is expensive to construct, and the object is not thread-safe;
// however, if used within a Golang sync.Pool, the construction cost amortizes well and the
// objects can be used in a thread-safe manner.
func NewSimplifiedCqlParser(input antlr.TokenStream) *SimplifiedCqlParser {
	this := new(SimplifiedCqlParser)
	deserializer := antlr.NewATNDeserializer(nil)
	deserializedATN := deserializer.DeserializeFromUInt16(parserATN)
	decisionToDFA := make([]*antlr.DFA, len(deserializedATN.DecisionToState))
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "SimplifiedCql.g4"

	return this
}

// SimplifiedCqlParser tokens.
const (
	SimplifiedCqlParserEOF                 = antlr.TokenEOF
	SimplifiedCqlParserT__0                = 1
	SimplifiedCqlParserT__1                = 2
	SimplifiedCqlParserT__2                = 3
	SimplifiedCqlParserT__3                = 4
	SimplifiedCqlParserT__4                = 5
	SimplifiedCqlParserT__5                = 6
	SimplifiedCqlParserT__6                = 7
	SimplifiedCqlParserT__7                = 8
	SimplifiedCqlParserT__8                = 9
	SimplifiedCqlParserT__9                = 10
	SimplifiedCqlParserT__10               = 11
	SimplifiedCqlParserT__11               = 12
	SimplifiedCqlParserT__12               = 13
	SimplifiedCqlParserT__13               = 14
	SimplifiedCqlParserT__14               = 15
	SimplifiedCqlParserT__15               = 16
	SimplifiedCqlParserT__16               = 17
	SimplifiedCqlParserT__17               = 18
	SimplifiedCqlParserT__18               = 19
	SimplifiedCqlParserT__19               = 20
	SimplifiedCqlParserK_ALLOW             = 21
	SimplifiedCqlParserK_AND               = 22
	SimplifiedCqlParserK_APPLY             = 23
	SimplifiedCqlParserK_ASC               = 24
	SimplifiedCqlParserK_AS                = 25
	SimplifiedCqlParserK_ASCII             = 26
	SimplifiedCqlParserK_BATCH             = 27
	SimplifiedCqlParserK_BEGIN             = 28
	SimplifiedCqlParserK_BIGINT            = 29
	SimplifiedCqlParserK_BLOB              = 30
	SimplifiedCqlParserK_BOOLEAN           = 31
	SimplifiedCqlParserK_BY                = 32
	SimplifiedCqlParserK_CAST              = 33
	SimplifiedCqlParserK_CLUSTERING        = 34
	SimplifiedCqlParserK_CONTAINS          = 35
	SimplifiedCqlParserK_COUNTER           = 36
	SimplifiedCqlParserK_COUNT             = 37
	SimplifiedCqlParserK_DATE              = 38
	SimplifiedCqlParserK_DECIMAL           = 39
	SimplifiedCqlParserK_DELETE            = 40
	SimplifiedCqlParserK_DESC              = 41
	SimplifiedCqlParserK_DISTINCT          = 42
	SimplifiedCqlParserK_DOUBLE            = 43
	SimplifiedCqlParserK_DURATION          = 44
	SimplifiedCqlParserK_EXISTS            = 45
	SimplifiedCqlParserK_FILTERING         = 46
	SimplifiedCqlParserK_FLOAT             = 47
	SimplifiedCqlParserK_FROM              = 48
	SimplifiedCqlParserK_FROZEN            = 49
	SimplifiedCqlParserK_GROUP             = 50
	SimplifiedCqlParserK_IF                = 51
	SimplifiedCqlParserK_INET              = 52
	SimplifiedCqlParserK_INFINITY          = 53
	SimplifiedCqlParserK_INSERT            = 54
	SimplifiedCqlParserK_INTO              = 55
	SimplifiedCqlParserK_INT               = 56
	SimplifiedCqlParserK_IN                = 57
	SimplifiedCqlParserK_IS                = 58
	SimplifiedCqlParserK_JSON              = 59
	SimplifiedCqlParserK_KEY               = 60
	SimplifiedCqlParserK_LIKE              = 61
	SimplifiedCqlParserK_LIMIT             = 62
	SimplifiedCqlParserK_LIST              = 63
	SimplifiedCqlParserK_MAP               = 64
	SimplifiedCqlParserK_NAN               = 65
	SimplifiedCqlParserK_NOT               = 66
	SimplifiedCqlParserK_NULL              = 67
	SimplifiedCqlParserK_OR                = 68
	SimplifiedCqlParserK_ORDER             = 69
	SimplifiedCqlParserK_PARTITION         = 70
	SimplifiedCqlParserK_PER               = 71
	SimplifiedCqlParserK_SELECT            = 72
	SimplifiedCqlParserK_SET               = 73
	SimplifiedCqlParserK_SMALLINT          = 74
	SimplifiedCqlParserK_TEXT              = 75
	SimplifiedCqlParserK_TIMESTAMP         = 76
	SimplifiedCqlParserK_TIMEUUID          = 77
	SimplifiedCqlParserK_TIME              = 78
	SimplifiedCqlParserK_TINYINT           = 79
	SimplifiedCqlParserK_TOKEN             = 80
	SimplifiedCqlParserK_TTL               = 81
	SimplifiedCqlParserK_TUPLE             = 82
	SimplifiedCqlParserK_TYPE              = 83
	SimplifiedCqlParserK_UNLOGGED          = 84
	SimplifiedCqlParserK_UPDATE            = 85
	SimplifiedCqlParserK_USE               = 86
	SimplifiedCqlParserK_USING             = 87
	SimplifiedCqlParserK_UUID              = 88
	SimplifiedCqlParserK_VALUES            = 89
	SimplifiedCqlParserK_VARCHAR           = 90
	SimplifiedCqlParserK_VARINT            = 91
	SimplifiedCqlParserK_WHERE             = 92
	SimplifiedCqlParserK_WRITETIME         = 93
	SimplifiedCqlParserSTRING_LITERAL      = 94
	SimplifiedCqlParserQUOTED_IDENTIFIER   = 95
	SimplifiedCqlParserINTEGER             = 96
	SimplifiedCqlParserQMARK               = 97
	SimplifiedCqlParserFLOAT               = 98
	SimplifiedCqlParserBOOLEAN             = 99
	SimplifiedCqlParserDURATION            = 100
	SimplifiedCqlParserUNQUOTED_IDENTIFIER = 101
	SimplifiedCqlParserHEXNUMBER           = 102
	SimplifiedCqlParserUUID                = 103
	SimplifiedCqlParserWS                  = 104
	SimplifiedCqlParserCOMMENT             = 105
	SimplifiedCqlParserMULTILINE_COMMENT   = 106
	SimplifiedCqlParserEOS                 = 107
	SimplifiedCqlParserOTHER               = 108
)

// SimplifiedCqlParser rules.
const (
	SimplifiedCqlParserRULE_cqlStatement            = 0
	SimplifiedCqlParserRULE_insertStatement         = 1
	SimplifiedCqlParserRULE_updateStatement         = 2
	SimplifiedCqlParserRULE_updateOperations        = 3
	SimplifiedCqlParserRULE_updateOperation         = 4
	SimplifiedCqlParserRULE_deleteStatement         = 5
	SimplifiedCqlParserRULE_deleteOperations        = 6
	SimplifiedCqlParserRULE_deleteOperation         = 7
	SimplifiedCqlParserRULE_batchStatement          = 8
	SimplifiedCqlParserRULE_batchChildStatement     = 9
	SimplifiedCqlParserRULE_selectStatement         = 10
	SimplifiedCqlParserRULE_selectClause            = 11
	SimplifiedCqlParserRULE_selectors               = 12
	SimplifiedCqlParserRULE_selector                = 13
	SimplifiedCqlParserRULE_unaliasedSelector       = 14
	SimplifiedCqlParserRULE_useStatement            = 15
	SimplifiedCqlParserRULE_orderByClause           = 16
	SimplifiedCqlParserRULE_orderings               = 17
	SimplifiedCqlParserRULE_ordering                = 18
	SimplifiedCqlParserRULE_groupByClause           = 19
	SimplifiedCqlParserRULE_perPartitionLimitClause = 20
	SimplifiedCqlParserRULE_limitClause             = 21
	SimplifiedCqlParserRULE_usingClause             = 22
	SimplifiedCqlParserRULE_timestamp               = 23
	SimplifiedCqlParserRULE_ttl                     = 24
	SimplifiedCqlParserRULE_conditions              = 25
	SimplifiedCqlParserRULE_condition               = 26
	SimplifiedCqlParserRULE_whereClause             = 27
	SimplifiedCqlParserRULE_logicalOperator         = 28
	SimplifiedCqlParserRULE_relation                = 29
	SimplifiedCqlParserRULE_operator                = 30
	SimplifiedCqlParserRULE_literal                 = 31
	SimplifiedCqlParserRULE_primitiveLiteral        = 32
	SimplifiedCqlParserRULE_collectionLiteral       = 33
	SimplifiedCqlParserRULE_listLiteral             = 34
	SimplifiedCqlParserRULE_setLiteral              = 35
	SimplifiedCqlParserRULE_mapLiteral              = 36
	SimplifiedCqlParserRULE_mapEntries              = 37
	SimplifiedCqlParserRULE_mapEntry                = 38
	SimplifiedCqlParserRULE_tupleLiterals           = 39
	SimplifiedCqlParserRULE_tupleLiteral            = 40
	SimplifiedCqlParserRULE_udtLiteral              = 41
	SimplifiedCqlParserRULE_fieldLiterals           = 42
	SimplifiedCqlParserRULE_fieldLiteral            = 43
	SimplifiedCqlParserRULE_functionCall            = 44
	SimplifiedCqlParserRULE_functionArgs            = 45
	SimplifiedCqlParserRULE_functionArg             = 46
	SimplifiedCqlParserRULE_bindMarkers             = 47
	SimplifiedCqlParserRULE_bindMarker              = 48
	SimplifiedCqlParserRULE_positionalBindMarker    = 49
	SimplifiedCqlParserRULE_namedBindMarker         = 50
	SimplifiedCqlParserRULE_terms                   = 51
	SimplifiedCqlParserRULE_term                    = 52
	SimplifiedCqlParserRULE_typeCast                = 53
	SimplifiedCqlParserRULE_cqlType                 = 54
	SimplifiedCqlParserRULE_primitiveType           = 55
	SimplifiedCqlParserRULE_collectionType          = 56
	SimplifiedCqlParserRULE_tupleType               = 57
	SimplifiedCqlParserRULE_tableName               = 58
	SimplifiedCqlParserRULE_functionName            = 59
	SimplifiedCqlParserRULE_userTypeName            = 60
	SimplifiedCqlParserRULE_keyspaceName            = 61
	SimplifiedCqlParserRULE_qualifiedIdentifier     = 62
	SimplifiedCqlParserRULE_identifiers             = 63
	SimplifiedCqlParserRULE_identifier              = 64
	SimplifiedCqlParserRULE_unreservedKeyword       = 65
	SimplifiedCqlParserRULE_unrecognizedStatement   = 66
	SimplifiedCqlParserRULE_unrecognizedToken       = 67
)

// ICqlStatementContext is an interface to support dynamic dispatch.
type ICqlStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCqlStatementContext differentiates from other interfaces.
	IsCqlStatementContext()
}

type CqlStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCqlStatementContext() *CqlStatementContext {
	var p = new(CqlStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_cqlStatement
	return p
}

func (*CqlStatementContext) IsCqlStatementContext() {}

func NewCqlStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CqlStatementContext {
	var p = new(CqlStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_cqlStatement

	return p
}

func (s *CqlStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CqlStatementContext) InsertStatement() IInsertStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsertStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsertStatementContext)
}

func (s *CqlStatementContext) EOS() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserEOS, 0)
}

func (s *CqlStatementContext) UpdateStatement() IUpdateStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdateStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdateStatementContext)
}

func (s *CqlStatementContext) DeleteStatement() IDeleteStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeleteStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeleteStatementContext)
}

func (s *CqlStatementContext) BatchStatement() IBatchStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBatchStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBatchStatementContext)
}

func (s *CqlStatementContext) SelectStatement() ISelectStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectStatementContext)
}

func (s *CqlStatementContext) UseStatement() IUseStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUseStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUseStatementContext)
}

func (s *CqlStatementContext) UnrecognizedStatement() IUnrecognizedStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnrecognizedStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnrecognizedStatementContext)
}

func (s *CqlStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CqlStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CqlStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterCqlStatement(s)
	}
}

func (s *CqlStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitCqlStatement(s)
	}
}

func (p *SimplifiedCqlParser) CqlStatement() (localctx ICqlStatementContext) {
	this := p
	_ = this

	localctx = NewCqlStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, SimplifiedCqlParserRULE_cqlStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(164)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 7, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(136)
			p.InsertStatement()
		}
		p.SetState(138)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SimplifiedCqlParserEOS {
			{
				p.SetState(137)
				p.Match(SimplifiedCqlParserEOS)
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(140)
			p.UpdateStatement()
		}
		p.SetState(142)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SimplifiedCqlParserEOS {
			{
				p.SetState(141)
				p.Match(SimplifiedCqlParserEOS)
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(144)
			p.DeleteStatement()
		}
		p.SetState(146)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SimplifiedCqlParserEOS {
			{
				p.SetState(145)
				p.Match(SimplifiedCqlParserEOS)
			}

		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(148)
			p.BatchStatement()
		}
		p.SetState(150)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SimplifiedCqlParserEOS {
			{
				p.SetState(149)
				p.Match(SimplifiedCqlParserEOS)
			}

		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(152)
			p.SelectStatement()
		}
		p.SetState(154)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SimplifiedCqlParserEOS {
			{
				p.SetState(153)
				p.Match(SimplifiedCqlParserEOS)
			}

		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(156)
			p.UseStatement()
		}
		p.SetState(158)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SimplifiedCqlParserEOS {
			{
				p.SetState(157)
				p.Match(SimplifiedCqlParserEOS)
			}

		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(160)
			p.UnrecognizedStatement()
		}
		p.SetState(162)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SimplifiedCqlParserEOS {
			{
				p.SetState(161)
				p.Match(SimplifiedCqlParserEOS)
			}

		}

	}

	return localctx
}

// IInsertStatementContext is an interface to support dynamic dispatch.
type IInsertStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInsertStatementContext differentiates from other interfaces.
	IsInsertStatementContext()
}

type InsertStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInsertStatementContext() *InsertStatementContext {
	var p = new(InsertStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_insertStatement
	return p
}

func (*InsertStatementContext) IsInsertStatementContext() {}

func NewInsertStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InsertStatementContext {
	var p = new(InsertStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_insertStatement

	return p
}

func (s *InsertStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *InsertStatementContext) K_INSERT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_INSERT, 0)
}

func (s *InsertStatementContext) K_INTO() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_INTO, 0)
}

func (s *InsertStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *InsertStatementContext) Identifiers() IIdentifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifiersContext)
}

func (s *InsertStatementContext) K_VALUES() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_VALUES, 0)
}

func (s *InsertStatementContext) Terms() ITermsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITermsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITermsContext)
}

func (s *InsertStatementContext) K_IF() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_IF, 0)
}

func (s *InsertStatementContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_NOT, 0)
}

func (s *InsertStatementContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_EXISTS, 0)
}

func (s *InsertStatementContext) UsingClause() IUsingClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUsingClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUsingClauseContext)
}

func (s *InsertStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InsertStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InsertStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterInsertStatement(s)
	}
}

func (s *InsertStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitInsertStatement(s)
	}
}

func (p *SimplifiedCqlParser) InsertStatement() (localctx IInsertStatementContext) {
	this := p
	_ = this

	localctx = NewInsertStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, SimplifiedCqlParserRULE_insertStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(166)
		p.Match(SimplifiedCqlParserK_INSERT)
	}
	{
		p.SetState(167)
		p.Match(SimplifiedCqlParserK_INTO)
	}
	{
		p.SetState(168)
		p.TableName()
	}
	{
		p.SetState(169)
		p.Match(SimplifiedCqlParserT__0)
	}
	{
		p.SetState(170)
		p.Identifiers()
	}
	{
		p.SetState(171)
		p.Match(SimplifiedCqlParserT__1)
	}
	{
		p.SetState(172)
		p.Match(SimplifiedCqlParserK_VALUES)
	}
	{
		p.SetState(173)
		p.Match(SimplifiedCqlParserT__0)
	}
	{
		p.SetState(174)
		p.Terms()
	}
	{
		p.SetState(175)
		p.Match(SimplifiedCqlParserT__1)
	}
	p.SetState(179)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_IF {
		{
			p.SetState(176)
			p.Match(SimplifiedCqlParserK_IF)
		}
		{
			p.SetState(177)
			p.Match(SimplifiedCqlParserK_NOT)
		}
		{
			p.SetState(178)
			p.Match(SimplifiedCqlParserK_EXISTS)
		}

	}
	p.SetState(182)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_USING {
		{
			p.SetState(181)
			p.UsingClause()
		}

	}

	return localctx
}

// IUpdateStatementContext is an interface to support dynamic dispatch.
type IUpdateStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUpdateStatementContext differentiates from other interfaces.
	IsUpdateStatementContext()
}

type UpdateStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdateStatementContext() *UpdateStatementContext {
	var p = new(UpdateStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_updateStatement
	return p
}

func (*UpdateStatementContext) IsUpdateStatementContext() {}

func NewUpdateStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UpdateStatementContext {
	var p = new(UpdateStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_updateStatement

	return p
}

func (s *UpdateStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *UpdateStatementContext) K_UPDATE() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_UPDATE, 0)
}

func (s *UpdateStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *UpdateStatementContext) K_SET() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_SET, 0)
}

func (s *UpdateStatementContext) UpdateOperations() IUpdateOperationsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdateOperationsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdateOperationsContext)
}

func (s *UpdateStatementContext) WhereClause() IWhereClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhereClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhereClauseContext)
}

func (s *UpdateStatementContext) UsingClause() IUsingClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUsingClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUsingClauseContext)
}

func (s *UpdateStatementContext) K_IF() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_IF, 0)
}

func (s *UpdateStatementContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_EXISTS, 0)
}

func (s *UpdateStatementContext) Conditions() IConditionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditionsContext)
}

func (s *UpdateStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UpdateStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UpdateStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterUpdateStatement(s)
	}
}

func (s *UpdateStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitUpdateStatement(s)
	}
}

func (p *SimplifiedCqlParser) UpdateStatement() (localctx IUpdateStatementContext) {
	this := p
	_ = this

	localctx = NewUpdateStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, SimplifiedCqlParserRULE_updateStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(184)
		p.Match(SimplifiedCqlParserK_UPDATE)
	}
	{
		p.SetState(185)
		p.TableName()
	}
	p.SetState(187)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_USING {
		{
			p.SetState(186)
			p.UsingClause()
		}

	}
	{
		p.SetState(189)
		p.Match(SimplifiedCqlParserK_SET)
	}
	{
		p.SetState(190)
		p.UpdateOperations()
	}
	{
		p.SetState(191)
		p.WhereClause()
	}
	p.SetState(197)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_IF {
		{
			p.SetState(192)
			p.Match(SimplifiedCqlParserK_IF)
		}
		p.SetState(195)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 11, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(193)
				p.Match(SimplifiedCqlParserK_EXISTS)
			}

		case 2:
			{
				p.SetState(194)
				p.Conditions()
			}

		}

	}

	return localctx
}

// IUpdateOperationsContext is an interface to support dynamic dispatch.
type IUpdateOperationsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUpdateOperationsContext differentiates from other interfaces.
	IsUpdateOperationsContext()
}

type UpdateOperationsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdateOperationsContext() *UpdateOperationsContext {
	var p = new(UpdateOperationsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_updateOperations
	return p
}

func (*UpdateOperationsContext) IsUpdateOperationsContext() {}

func NewUpdateOperationsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UpdateOperationsContext {
	var p = new(UpdateOperationsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_updateOperations

	return p
}

func (s *UpdateOperationsContext) GetParser() antlr.Parser { return s.parser }

func (s *UpdateOperationsContext) AllUpdateOperation() []IUpdateOperationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUpdateOperationContext)(nil)).Elem())
	var tst = make([]IUpdateOperationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUpdateOperationContext)
		}
	}

	return tst
}

func (s *UpdateOperationsContext) UpdateOperation(i int) IUpdateOperationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdateOperationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUpdateOperationContext)
}

func (s *UpdateOperationsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UpdateOperationsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UpdateOperationsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterUpdateOperations(s)
	}
}

func (s *UpdateOperationsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitUpdateOperations(s)
	}
}

func (p *SimplifiedCqlParser) UpdateOperations() (localctx IUpdateOperationsContext) {
	this := p
	_ = this

	localctx = NewUpdateOperationsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, SimplifiedCqlParserRULE_updateOperations)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(199)
		p.UpdateOperation()
	}
	p.SetState(204)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserT__2 {
		{
			p.SetState(200)
			p.Match(SimplifiedCqlParserT__2)
		}
		{
			p.SetState(201)
			p.UpdateOperation()
		}

		p.SetState(206)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IUpdateOperationContext is an interface to support dynamic dispatch.
type IUpdateOperationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUpdateOperationContext differentiates from other interfaces.
	IsUpdateOperationContext()
}

type UpdateOperationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdateOperationContext() *UpdateOperationContext {
	var p = new(UpdateOperationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_updateOperation
	return p
}

func (*UpdateOperationContext) IsUpdateOperationContext() {}

func NewUpdateOperationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UpdateOperationContext {
	var p = new(UpdateOperationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_updateOperation

	return p
}

func (s *UpdateOperationContext) GetParser() antlr.Parser { return s.parser }

func (s *UpdateOperationContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *UpdateOperationContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *UpdateOperationContext) AllTerm() []ITermContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITermContext)(nil)).Elem())
	var tst = make([]ITermContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITermContext)
		}
	}

	return tst
}

func (s *UpdateOperationContext) Term(i int) ITermContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITermContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITermContext)
}

func (s *UpdateOperationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UpdateOperationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UpdateOperationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterUpdateOperation(s)
	}
}

func (s *UpdateOperationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitUpdateOperation(s)
	}
}

func (p *SimplifiedCqlParser) UpdateOperation() (localctx IUpdateOperationContext) {
	this := p
	_ = this

	localctx = NewUpdateOperationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, SimplifiedCqlParserRULE_updateOperation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(237)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 15, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(207)
			p.Identifier()
		}
		{
			p.SetState(208)
			p.Match(SimplifiedCqlParserT__3)
		}
		{
			p.SetState(209)
			p.Term()
		}
		p.SetState(212)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SimplifiedCqlParserT__4 {
			{
				p.SetState(210)
				p.Match(SimplifiedCqlParserT__4)
			}
			{
				p.SetState(211)
				p.Identifier()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(214)
			p.Identifier()
		}
		{
			p.SetState(215)
			p.Match(SimplifiedCqlParserT__3)
		}
		{
			p.SetState(216)
			p.Identifier()
		}
		{
			p.SetState(217)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SimplifiedCqlParserT__4 || _la == SimplifiedCqlParserT__5) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(218)
			p.Term()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(220)
			p.Identifier()
		}
		{
			p.SetState(221)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SimplifiedCqlParserT__6 || _la == SimplifiedCqlParserT__7) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(222)
			p.Term()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(224)
			p.Identifier()
		}
		{
			p.SetState(225)
			p.Match(SimplifiedCqlParserT__8)
		}
		{
			p.SetState(226)
			p.Term()
		}
		{
			p.SetState(227)
			p.Match(SimplifiedCqlParserT__9)
		}
		{
			p.SetState(228)
			p.Match(SimplifiedCqlParserT__3)
		}
		{
			p.SetState(229)
			p.Term()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(231)
			p.Identifier()
		}
		{
			p.SetState(232)
			p.Match(SimplifiedCqlParserT__10)
		}
		{
			p.SetState(233)
			p.Identifier()
		}
		{
			p.SetState(234)
			p.Match(SimplifiedCqlParserT__3)
		}
		{
			p.SetState(235)
			p.Term()
		}

	}

	return localctx
}

// IDeleteStatementContext is an interface to support dynamic dispatch.
type IDeleteStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeleteStatementContext differentiates from other interfaces.
	IsDeleteStatementContext()
}

type DeleteStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeleteStatementContext() *DeleteStatementContext {
	var p = new(DeleteStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_deleteStatement
	return p
}

func (*DeleteStatementContext) IsDeleteStatementContext() {}

func NewDeleteStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeleteStatementContext {
	var p = new(DeleteStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_deleteStatement

	return p
}

func (s *DeleteStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DeleteStatementContext) K_DELETE() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_DELETE, 0)
}

func (s *DeleteStatementContext) K_FROM() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_FROM, 0)
}

func (s *DeleteStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *DeleteStatementContext) WhereClause() IWhereClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhereClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhereClauseContext)
}

func (s *DeleteStatementContext) DeleteOperations() IDeleteOperationsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeleteOperationsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeleteOperationsContext)
}

func (s *DeleteStatementContext) K_USING() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_USING, 0)
}

func (s *DeleteStatementContext) Timestamp() ITimestampContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITimestampContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITimestampContext)
}

func (s *DeleteStatementContext) K_IF() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_IF, 0)
}

func (s *DeleteStatementContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_EXISTS, 0)
}

func (s *DeleteStatementContext) Conditions() IConditionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditionsContext)
}

func (s *DeleteStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeleteStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeleteStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterDeleteStatement(s)
	}
}

func (s *DeleteStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitDeleteStatement(s)
	}
}

func (p *SimplifiedCqlParser) DeleteStatement() (localctx IDeleteStatementContext) {
	this := p
	_ = this

	localctx = NewDeleteStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, SimplifiedCqlParserRULE_deleteStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(239)
		p.Match(SimplifiedCqlParserK_DELETE)
	}
	p.SetState(241)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SimplifiedCqlParserK_AS)|(1<<SimplifiedCqlParserK_ASCII)|(1<<SimplifiedCqlParserK_BIGINT)|(1<<SimplifiedCqlParserK_BLOB)|(1<<SimplifiedCqlParserK_BOOLEAN))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(SimplifiedCqlParserK_CAST-33))|(1<<(SimplifiedCqlParserK_CLUSTERING-33))|(1<<(SimplifiedCqlParserK_CONTAINS-33))|(1<<(SimplifiedCqlParserK_COUNTER-33))|(1<<(SimplifiedCqlParserK_COUNT-33))|(1<<(SimplifiedCqlParserK_DATE-33))|(1<<(SimplifiedCqlParserK_DECIMAL-33))|(1<<(SimplifiedCqlParserK_DISTINCT-33))|(1<<(SimplifiedCqlParserK_DOUBLE-33))|(1<<(SimplifiedCqlParserK_DURATION-33))|(1<<(SimplifiedCqlParserK_EXISTS-33))|(1<<(SimplifiedCqlParserK_FILTERING-33))|(1<<(SimplifiedCqlParserK_FLOAT-33))|(1<<(SimplifiedCqlParserK_FROZEN-33))|(1<<(SimplifiedCqlParserK_GROUP-33))|(1<<(SimplifiedCqlParserK_INET-33))|(1<<(SimplifiedCqlParserK_INT-33))|(1<<(SimplifiedCqlParserK_JSON-33))|(1<<(SimplifiedCqlParserK_KEY-33))|(1<<(SimplifiedCqlParserK_LIKE-33))|(1<<(SimplifiedCqlParserK_LIST-33))|(1<<(SimplifiedCqlParserK_MAP-33)))) != 0) || (((_la-70)&-(0x1f+1)) == 0 && ((1<<uint((_la-70)))&((1<<(SimplifiedCqlParserK_PARTITION-70))|(1<<(SimplifiedCqlParserK_PER-70))|(1<<(SimplifiedCqlParserK_SMALLINT-70))|(1<<(SimplifiedCqlParserK_TEXT-70))|(1<<(SimplifiedCqlParserK_TIMESTAMP-70))|(1<<(SimplifiedCqlParserK_TIMEUUID-70))|(1<<(SimplifiedCqlParserK_TIME-70))|(1<<(SimplifiedCqlParserK_TINYINT-70))|(1<<(SimplifiedCqlParserK_TTL-70))|(1<<(SimplifiedCqlParserK_TUPLE-70))|(1<<(SimplifiedCqlParserK_TYPE-70))|(1<<(SimplifiedCqlParserK_UUID-70))|(1<<(SimplifiedCqlParserK_VALUES-70))|(1<<(SimplifiedCqlParserK_VARCHAR-70))|(1<<(SimplifiedCqlParserK_VARINT-70))|(1<<(SimplifiedCqlParserK_WRITETIME-70))|(1<<(SimplifiedCqlParserQUOTED_IDENTIFIER-70))|(1<<(SimplifiedCqlParserUNQUOTED_IDENTIFIER-70)))) != 0) {
		{
			p.SetState(240)
			p.DeleteOperations()
		}

	}
	{
		p.SetState(243)
		p.Match(SimplifiedCqlParserK_FROM)
	}
	{
		p.SetState(244)
		p.TableName()
	}
	p.SetState(247)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_USING {
		{
			p.SetState(245)
			p.Match(SimplifiedCqlParserK_USING)
		}
		{
			p.SetState(246)
			p.Timestamp()
		}

	}
	{
		p.SetState(249)
		p.WhereClause()
	}
	p.SetState(255)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_IF {
		{
			p.SetState(250)
			p.Match(SimplifiedCqlParserK_IF)
		}
		p.SetState(253)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 18, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(251)
				p.Match(SimplifiedCqlParserK_EXISTS)
			}

		case 2:
			{
				p.SetState(252)
				p.Conditions()
			}

		}

	}

	return localctx
}

// IDeleteOperationsContext is an interface to support dynamic dispatch.
type IDeleteOperationsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeleteOperationsContext differentiates from other interfaces.
	IsDeleteOperationsContext()
}

type DeleteOperationsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeleteOperationsContext() *DeleteOperationsContext {
	var p = new(DeleteOperationsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_deleteOperations
	return p
}

func (*DeleteOperationsContext) IsDeleteOperationsContext() {}

func NewDeleteOperationsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeleteOperationsContext {
	var p = new(DeleteOperationsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_deleteOperations

	return p
}

func (s *DeleteOperationsContext) GetParser() antlr.Parser { return s.parser }

func (s *DeleteOperationsContext) AllDeleteOperation() []IDeleteOperationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDeleteOperationContext)(nil)).Elem())
	var tst = make([]IDeleteOperationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDeleteOperationContext)
		}
	}

	return tst
}

func (s *DeleteOperationsContext) DeleteOperation(i int) IDeleteOperationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeleteOperationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDeleteOperationContext)
}

func (s *DeleteOperationsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeleteOperationsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeleteOperationsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterDeleteOperations(s)
	}
}

func (s *DeleteOperationsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitDeleteOperations(s)
	}
}

func (p *SimplifiedCqlParser) DeleteOperations() (localctx IDeleteOperationsContext) {
	this := p
	_ = this

	localctx = NewDeleteOperationsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, SimplifiedCqlParserRULE_deleteOperations)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(257)
		p.DeleteOperation()
	}
	p.SetState(262)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserT__2 {
		{
			p.SetState(258)
			p.Match(SimplifiedCqlParserT__2)
		}
		{
			p.SetState(259)
			p.DeleteOperation()
		}

		p.SetState(264)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IDeleteOperationContext is an interface to support dynamic dispatch.
type IDeleteOperationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeleteOperationContext differentiates from other interfaces.
	IsDeleteOperationContext()
}

type DeleteOperationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeleteOperationContext() *DeleteOperationContext {
	var p = new(DeleteOperationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_deleteOperation
	return p
}

func (*DeleteOperationContext) IsDeleteOperationContext() {}

func NewDeleteOperationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeleteOperationContext {
	var p = new(DeleteOperationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_deleteOperation

	return p
}

func (s *DeleteOperationContext) GetParser() antlr.Parser { return s.parser }

func (s *DeleteOperationContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *DeleteOperationContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *DeleteOperationContext) Term() ITermContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITermContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITermContext)
}

func (s *DeleteOperationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeleteOperationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeleteOperationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterDeleteOperation(s)
	}
}

func (s *DeleteOperationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitDeleteOperation(s)
	}
}

func (p *SimplifiedCqlParser) DeleteOperation() (localctx IDeleteOperationContext) {
	this := p
	_ = this

	localctx = NewDeleteOperationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, SimplifiedCqlParserRULE_deleteOperation)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(275)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 21, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(265)
			p.Identifier()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(266)
			p.Identifier()
		}
		{
			p.SetState(267)
			p.Match(SimplifiedCqlParserT__8)
		}
		{
			p.SetState(268)
			p.Term()
		}
		{
			p.SetState(269)
			p.Match(SimplifiedCqlParserT__9)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(271)
			p.Identifier()
		}
		{
			p.SetState(272)
			p.Match(SimplifiedCqlParserT__10)
		}
		{
			p.SetState(273)
			p.Identifier()
		}

	}

	return localctx
}

// IBatchStatementContext is an interface to support dynamic dispatch.
type IBatchStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBatchStatementContext differentiates from other interfaces.
	IsBatchStatementContext()
}

type BatchStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBatchStatementContext() *BatchStatementContext {
	var p = new(BatchStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_batchStatement
	return p
}

func (*BatchStatementContext) IsBatchStatementContext() {}

func NewBatchStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BatchStatementContext {
	var p = new(BatchStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_batchStatement

	return p
}

func (s *BatchStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *BatchStatementContext) K_BEGIN() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_BEGIN, 0)
}

func (s *BatchStatementContext) AllK_BATCH() []antlr.TerminalNode {
	return s.GetTokens(SimplifiedCqlParserK_BATCH)
}

func (s *BatchStatementContext) K_BATCH(i int) antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_BATCH, i)
}

func (s *BatchStatementContext) K_APPLY() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_APPLY, 0)
}

func (s *BatchStatementContext) UsingClause() IUsingClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUsingClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUsingClauseContext)
}

func (s *BatchStatementContext) AllBatchChildStatement() []IBatchChildStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBatchChildStatementContext)(nil)).Elem())
	var tst = make([]IBatchChildStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBatchChildStatementContext)
		}
	}

	return tst
}

func (s *BatchStatementContext) BatchChildStatement(i int) IBatchChildStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBatchChildStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBatchChildStatementContext)
}

func (s *BatchStatementContext) K_UNLOGGED() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_UNLOGGED, 0)
}

func (s *BatchStatementContext) K_COUNTER() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_COUNTER, 0)
}

func (s *BatchStatementContext) AllEOS() []antlr.TerminalNode {
	return s.GetTokens(SimplifiedCqlParserEOS)
}

func (s *BatchStatementContext) EOS(i int) antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserEOS, i)
}

func (s *BatchStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BatchStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BatchStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterBatchStatement(s)
	}
}

func (s *BatchStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitBatchStatement(s)
	}
}

func (p *SimplifiedCqlParser) BatchStatement() (localctx IBatchStatementContext) {
	this := p
	_ = this

	localctx = NewBatchStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, SimplifiedCqlParserRULE_batchStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(277)
		p.Match(SimplifiedCqlParserK_BEGIN)
	}
	p.SetState(279)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_COUNTER || _la == SimplifiedCqlParserK_UNLOGGED {
		{
			p.SetState(278)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SimplifiedCqlParserK_COUNTER || _la == SimplifiedCqlParserK_UNLOGGED) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(281)
		p.Match(SimplifiedCqlParserK_BATCH)
	}
	p.SetState(283)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_USING {
		{
			p.SetState(282)
			p.UsingClause()
		}

	}
	p.SetState(291)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserK_DELETE || _la == SimplifiedCqlParserK_INSERT || _la == SimplifiedCqlParserK_UPDATE {
		{
			p.SetState(285)
			p.BatchChildStatement()
		}
		p.SetState(287)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SimplifiedCqlParserEOS {
			{
				p.SetState(286)
				p.Match(SimplifiedCqlParserEOS)
			}

		}

		p.SetState(293)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(294)
		p.Match(SimplifiedCqlParserK_APPLY)
	}
	{
		p.SetState(295)
		p.Match(SimplifiedCqlParserK_BATCH)
	}

	return localctx
}

// IBatchChildStatementContext is an interface to support dynamic dispatch.
type IBatchChildStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBatchChildStatementContext differentiates from other interfaces.
	IsBatchChildStatementContext()
}

type BatchChildStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBatchChildStatementContext() *BatchChildStatementContext {
	var p = new(BatchChildStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_batchChildStatement
	return p
}

func (*BatchChildStatementContext) IsBatchChildStatementContext() {}

func NewBatchChildStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BatchChildStatementContext {
	var p = new(BatchChildStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_batchChildStatement

	return p
}

func (s *BatchChildStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *BatchChildStatementContext) InsertStatement() IInsertStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsertStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsertStatementContext)
}

func (s *BatchChildStatementContext) UpdateStatement() IUpdateStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdateStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdateStatementContext)
}

func (s *BatchChildStatementContext) DeleteStatement() IDeleteStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeleteStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeleteStatementContext)
}

func (s *BatchChildStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BatchChildStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BatchChildStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterBatchChildStatement(s)
	}
}

func (s *BatchChildStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitBatchChildStatement(s)
	}
}

func (p *SimplifiedCqlParser) BatchChildStatement() (localctx IBatchChildStatementContext) {
	this := p
	_ = this

	localctx = NewBatchChildStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, SimplifiedCqlParserRULE_batchChildStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(300)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SimplifiedCqlParserK_INSERT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(297)
			p.InsertStatement()
		}

	case SimplifiedCqlParserK_UPDATE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(298)
			p.UpdateStatement()
		}

	case SimplifiedCqlParserK_DELETE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(299)
			p.DeleteStatement()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISelectStatementContext is an interface to support dynamic dispatch.
type ISelectStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelectStatementContext differentiates from other interfaces.
	IsSelectStatementContext()
}

type SelectStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectStatementContext() *SelectStatementContext {
	var p = new(SelectStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_selectStatement
	return p
}

func (*SelectStatementContext) IsSelectStatementContext() {}

func NewSelectStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectStatementContext {
	var p = new(SelectStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_selectStatement

	return p
}

func (s *SelectStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectStatementContext) K_SELECT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_SELECT, 0)
}

func (s *SelectStatementContext) SelectClause() ISelectClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectClauseContext)
}

func (s *SelectStatementContext) K_FROM() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_FROM, 0)
}

func (s *SelectStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *SelectStatementContext) K_JSON() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_JSON, 0)
}

func (s *SelectStatementContext) K_DISTINCT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_DISTINCT, 0)
}

func (s *SelectStatementContext) WhereClause() IWhereClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhereClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhereClauseContext)
}

func (s *SelectStatementContext) GroupByClause() IGroupByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGroupByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGroupByClauseContext)
}

func (s *SelectStatementContext) OrderByClause() IOrderByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrderByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrderByClauseContext)
}

func (s *SelectStatementContext) PerPartitionLimitClause() IPerPartitionLimitClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPerPartitionLimitClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPerPartitionLimitClauseContext)
}

func (s *SelectStatementContext) LimitClause() ILimitClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILimitClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILimitClauseContext)
}

func (s *SelectStatementContext) K_ALLOW() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_ALLOW, 0)
}

func (s *SelectStatementContext) K_FILTERING() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_FILTERING, 0)
}

func (s *SelectStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterSelectStatement(s)
	}
}

func (s *SelectStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitSelectStatement(s)
	}
}

func (p *SimplifiedCqlParser) SelectStatement() (localctx ISelectStatementContext) {
	this := p
	_ = this

	localctx = NewSelectStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, SimplifiedCqlParserRULE_selectStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(302)
		p.Match(SimplifiedCqlParserK_SELECT)
	}
	p.SetState(304)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 27, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(303)
			p.Match(SimplifiedCqlParserK_JSON)
		}

	}
	p.SetState(307)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 28, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(306)
			p.Match(SimplifiedCqlParserK_DISTINCT)
		}

	}
	{
		p.SetState(309)
		p.SelectClause()
	}
	{
		p.SetState(310)
		p.Match(SimplifiedCqlParserK_FROM)
	}
	{
		p.SetState(311)
		p.TableName()
	}
	p.SetState(313)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_WHERE {
		{
			p.SetState(312)
			p.WhereClause()
		}

	}
	p.SetState(316)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_GROUP {
		{
			p.SetState(315)
			p.GroupByClause()
		}

	}
	p.SetState(319)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_ORDER {
		{
			p.SetState(318)
			p.OrderByClause()
		}

	}
	p.SetState(322)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_PER {
		{
			p.SetState(321)
			p.PerPartitionLimitClause()
		}

	}
	p.SetState(325)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_LIMIT {
		{
			p.SetState(324)
			p.LimitClause()
		}

	}
	p.SetState(329)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_ALLOW {
		{
			p.SetState(327)
			p.Match(SimplifiedCqlParserK_ALLOW)
		}
		{
			p.SetState(328)
			p.Match(SimplifiedCqlParserK_FILTERING)
		}

	}

	return localctx
}

// ISelectClauseContext is an interface to support dynamic dispatch.
type ISelectClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelectClauseContext differentiates from other interfaces.
	IsSelectClauseContext()
}

type SelectClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectClauseContext() *SelectClauseContext {
	var p = new(SelectClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_selectClause
	return p
}

func (*SelectClauseContext) IsSelectClauseContext() {}

func NewSelectClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectClauseContext {
	var p = new(SelectClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_selectClause

	return p
}

func (s *SelectClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectClauseContext) Selectors() ISelectorsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectorsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectorsContext)
}

func (s *SelectClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterSelectClause(s)
	}
}

func (s *SelectClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitSelectClause(s)
	}
}

func (p *SimplifiedCqlParser) SelectClause() (localctx ISelectClauseContext) {
	this := p
	_ = this

	localctx = NewSelectClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, SimplifiedCqlParserRULE_selectClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(333)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SimplifiedCqlParserT__11:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(331)
			p.Match(SimplifiedCqlParserT__11)
		}

	case SimplifiedCqlParserT__0, SimplifiedCqlParserT__5, SimplifiedCqlParserT__8, SimplifiedCqlParserT__17, SimplifiedCqlParserT__18, SimplifiedCqlParserK_AS, SimplifiedCqlParserK_ASCII, SimplifiedCqlParserK_BIGINT, SimplifiedCqlParserK_BLOB, SimplifiedCqlParserK_BOOLEAN, SimplifiedCqlParserK_CAST, SimplifiedCqlParserK_CLUSTERING, SimplifiedCqlParserK_CONTAINS, SimplifiedCqlParserK_COUNTER, SimplifiedCqlParserK_COUNT, SimplifiedCqlParserK_DATE, SimplifiedCqlParserK_DECIMAL, SimplifiedCqlParserK_DISTINCT, SimplifiedCqlParserK_DOUBLE, SimplifiedCqlParserK_DURATION, SimplifiedCqlParserK_EXISTS, SimplifiedCqlParserK_FILTERING, SimplifiedCqlParserK_FLOAT, SimplifiedCqlParserK_FROZEN, SimplifiedCqlParserK_GROUP, SimplifiedCqlParserK_INET, SimplifiedCqlParserK_INFINITY, SimplifiedCqlParserK_INT, SimplifiedCqlParserK_JSON, SimplifiedCqlParserK_KEY, SimplifiedCqlParserK_LIKE, SimplifiedCqlParserK_LIST, SimplifiedCqlParserK_MAP, SimplifiedCqlParserK_NAN, SimplifiedCqlParserK_NULL, SimplifiedCqlParserK_PARTITION, SimplifiedCqlParserK_PER, SimplifiedCqlParserK_SMALLINT, SimplifiedCqlParserK_TEXT, SimplifiedCqlParserK_TIMESTAMP, SimplifiedCqlParserK_TIMEUUID, SimplifiedCqlParserK_TIME, SimplifiedCqlParserK_TINYINT, SimplifiedCqlParserK_TTL, SimplifiedCqlParserK_TUPLE, SimplifiedCqlParserK_TYPE, SimplifiedCqlParserK_UUID, SimplifiedCqlParserK_VALUES, SimplifiedCqlParserK_VARCHAR, SimplifiedCqlParserK_VARINT, SimplifiedCqlParserK_WRITETIME, SimplifiedCqlParserSTRING_LITERAL, SimplifiedCqlParserQUOTED_IDENTIFIER, SimplifiedCqlParserINTEGER, SimplifiedCqlParserQMARK, SimplifiedCqlParserFLOAT, SimplifiedCqlParserBOOLEAN, SimplifiedCqlParserDURATION, SimplifiedCqlParserUNQUOTED_IDENTIFIER, SimplifiedCqlParserHEXNUMBER, SimplifiedCqlParserUUID:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(332)
			p.Selectors()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISelectorsContext is an interface to support dynamic dispatch.
type ISelectorsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelectorsContext differentiates from other interfaces.
	IsSelectorsContext()
}

type SelectorsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectorsContext() *SelectorsContext {
	var p = new(SelectorsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_selectors
	return p
}

func (*SelectorsContext) IsSelectorsContext() {}

func NewSelectorsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectorsContext {
	var p = new(SelectorsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_selectors

	return p
}

func (s *SelectorsContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectorsContext) AllSelector() []ISelectorContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelectorContext)(nil)).Elem())
	var tst = make([]ISelectorContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelectorContext)
		}
	}

	return tst
}

func (s *SelectorsContext) Selector(i int) ISelectorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectorContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelectorContext)
}

func (s *SelectorsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectorsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectorsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterSelectors(s)
	}
}

func (s *SelectorsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitSelectors(s)
	}
}

func (p *SimplifiedCqlParser) Selectors() (localctx ISelectorsContext) {
	this := p
	_ = this

	localctx = NewSelectorsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, SimplifiedCqlParserRULE_selectors)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(335)
		p.Selector()
	}
	p.SetState(340)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserT__2 {
		{
			p.SetState(336)
			p.Match(SimplifiedCqlParserT__2)
		}
		{
			p.SetState(337)
			p.Selector()
		}

		p.SetState(342)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ISelectorContext is an interface to support dynamic dispatch.
type ISelectorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelectorContext differentiates from other interfaces.
	IsSelectorContext()
}

type SelectorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectorContext() *SelectorContext {
	var p = new(SelectorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_selector
	return p
}

func (*SelectorContext) IsSelectorContext() {}

func NewSelectorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectorContext {
	var p = new(SelectorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_selector

	return p
}

func (s *SelectorContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectorContext) UnaliasedSelector() IUnaliasedSelectorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnaliasedSelectorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnaliasedSelectorContext)
}

func (s *SelectorContext) K_AS() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_AS, 0)
}

func (s *SelectorContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *SelectorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterSelector(s)
	}
}

func (s *SelectorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitSelector(s)
	}
}

func (p *SimplifiedCqlParser) Selector() (localctx ISelectorContext) {
	this := p
	_ = this

	localctx = NewSelectorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, SimplifiedCqlParserRULE_selector)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(343)
		p.UnaliasedSelector()
	}
	p.SetState(346)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_AS {
		{
			p.SetState(344)
			p.Match(SimplifiedCqlParserK_AS)
		}
		{
			p.SetState(345)
			p.Identifier()
		}

	}

	return localctx
}

// IUnaliasedSelectorContext is an interface to support dynamic dispatch.
type IUnaliasedSelectorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnaliasedSelectorContext differentiates from other interfaces.
	IsUnaliasedSelectorContext()
}

type UnaliasedSelectorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnaliasedSelectorContext() *UnaliasedSelectorContext {
	var p = new(UnaliasedSelectorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_unaliasedSelector
	return p
}

func (*UnaliasedSelectorContext) IsUnaliasedSelectorContext() {}

func NewUnaliasedSelectorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnaliasedSelectorContext {
	var p = new(UnaliasedSelectorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_unaliasedSelector

	return p
}

func (s *UnaliasedSelectorContext) GetParser() antlr.Parser { return s.parser }

func (s *UnaliasedSelectorContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *UnaliasedSelectorContext) Term() ITermContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITermContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITermContext)
}

func (s *UnaliasedSelectorContext) K_COUNT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_COUNT, 0)
}

func (s *UnaliasedSelectorContext) K_CAST() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_CAST, 0)
}

func (s *UnaliasedSelectorContext) UnaliasedSelector() IUnaliasedSelectorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnaliasedSelectorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnaliasedSelectorContext)
}

func (s *UnaliasedSelectorContext) K_AS() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_AS, 0)
}

func (s *UnaliasedSelectorContext) PrimitiveType() IPrimitiveTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimitiveTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimitiveTypeContext)
}

func (s *UnaliasedSelectorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnaliasedSelectorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnaliasedSelectorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterUnaliasedSelector(s)
	}
}

func (s *UnaliasedSelectorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitUnaliasedSelector(s)
	}
}

func (p *SimplifiedCqlParser) UnaliasedSelector() (localctx IUnaliasedSelectorContext) {
	this := p
	_ = this

	localctx = NewUnaliasedSelectorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, SimplifiedCqlParserRULE_unaliasedSelector)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(361)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 38, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(348)
			p.Identifier()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(349)
			p.Term()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(350)
			p.Match(SimplifiedCqlParserK_COUNT)
		}
		{
			p.SetState(351)
			p.Match(SimplifiedCqlParserT__0)
		}
		{
			p.SetState(352)
			p.Match(SimplifiedCqlParserT__11)
		}
		{
			p.SetState(353)
			p.Match(SimplifiedCqlParserT__1)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(354)
			p.Match(SimplifiedCqlParserK_CAST)
		}
		{
			p.SetState(355)
			p.Match(SimplifiedCqlParserT__0)
		}
		{
			p.SetState(356)
			p.UnaliasedSelector()
		}
		{
			p.SetState(357)
			p.Match(SimplifiedCqlParserK_AS)
		}
		{
			p.SetState(358)
			p.PrimitiveType()
		}
		{
			p.SetState(359)
			p.Match(SimplifiedCqlParserT__1)
		}

	}

	return localctx
}

// IUseStatementContext is an interface to support dynamic dispatch.
type IUseStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUseStatementContext differentiates from other interfaces.
	IsUseStatementContext()
}

type UseStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUseStatementContext() *UseStatementContext {
	var p = new(UseStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_useStatement
	return p
}

func (*UseStatementContext) IsUseStatementContext() {}

func NewUseStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UseStatementContext {
	var p = new(UseStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_useStatement

	return p
}

func (s *UseStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *UseStatementContext) K_USE() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_USE, 0)
}

func (s *UseStatementContext) KeyspaceName() IKeyspaceNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKeyspaceNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IKeyspaceNameContext)
}

func (s *UseStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UseStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UseStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterUseStatement(s)
	}
}

func (s *UseStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitUseStatement(s)
	}
}

func (p *SimplifiedCqlParser) UseStatement() (localctx IUseStatementContext) {
	this := p
	_ = this

	localctx = NewUseStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, SimplifiedCqlParserRULE_useStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(363)
		p.Match(SimplifiedCqlParserK_USE)
	}
	{
		p.SetState(364)
		p.KeyspaceName()
	}

	return localctx
}

// IOrderByClauseContext is an interface to support dynamic dispatch.
type IOrderByClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOrderByClauseContext differentiates from other interfaces.
	IsOrderByClauseContext()
}

type OrderByClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrderByClauseContext() *OrderByClauseContext {
	var p = new(OrderByClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_orderByClause
	return p
}

func (*OrderByClauseContext) IsOrderByClauseContext() {}

func NewOrderByClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OrderByClauseContext {
	var p = new(OrderByClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_orderByClause

	return p
}

func (s *OrderByClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *OrderByClauseContext) K_ORDER() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_ORDER, 0)
}

func (s *OrderByClauseContext) K_BY() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_BY, 0)
}

func (s *OrderByClauseContext) Orderings() IOrderingsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrderingsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrderingsContext)
}

func (s *OrderByClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OrderByClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OrderByClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterOrderByClause(s)
	}
}

func (s *OrderByClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitOrderByClause(s)
	}
}

func (p *SimplifiedCqlParser) OrderByClause() (localctx IOrderByClauseContext) {
	this := p
	_ = this

	localctx = NewOrderByClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, SimplifiedCqlParserRULE_orderByClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(366)
		p.Match(SimplifiedCqlParserK_ORDER)
	}
	{
		p.SetState(367)
		p.Match(SimplifiedCqlParserK_BY)
	}
	{
		p.SetState(368)
		p.Orderings()
	}

	return localctx
}

// IOrderingsContext is an interface to support dynamic dispatch.
type IOrderingsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOrderingsContext differentiates from other interfaces.
	IsOrderingsContext()
}

type OrderingsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrderingsContext() *OrderingsContext {
	var p = new(OrderingsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_orderings
	return p
}

func (*OrderingsContext) IsOrderingsContext() {}

func NewOrderingsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OrderingsContext {
	var p = new(OrderingsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_orderings

	return p
}

func (s *OrderingsContext) GetParser() antlr.Parser { return s.parser }

func (s *OrderingsContext) AllOrdering() []IOrderingContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOrderingContext)(nil)).Elem())
	var tst = make([]IOrderingContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOrderingContext)
		}
	}

	return tst
}

func (s *OrderingsContext) Ordering(i int) IOrderingContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrderingContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOrderingContext)
}

func (s *OrderingsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OrderingsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OrderingsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterOrderings(s)
	}
}

func (s *OrderingsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitOrderings(s)
	}
}

func (p *SimplifiedCqlParser) Orderings() (localctx IOrderingsContext) {
	this := p
	_ = this

	localctx = NewOrderingsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, SimplifiedCqlParserRULE_orderings)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(370)
		p.Ordering()
	}
	p.SetState(375)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserT__2 {
		{
			p.SetState(371)
			p.Match(SimplifiedCqlParserT__2)
		}
		{
			p.SetState(372)
			p.Ordering()
		}

		p.SetState(377)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IOrderingContext is an interface to support dynamic dispatch.
type IOrderingContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOrderingContext differentiates from other interfaces.
	IsOrderingContext()
}

type OrderingContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrderingContext() *OrderingContext {
	var p = new(OrderingContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_ordering
	return p
}

func (*OrderingContext) IsOrderingContext() {}

func NewOrderingContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OrderingContext {
	var p = new(OrderingContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_ordering

	return p
}

func (s *OrderingContext) GetParser() antlr.Parser { return s.parser }

func (s *OrderingContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *OrderingContext) K_ASC() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_ASC, 0)
}

func (s *OrderingContext) K_DESC() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_DESC, 0)
}

func (s *OrderingContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OrderingContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OrderingContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterOrdering(s)
	}
}

func (s *OrderingContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitOrdering(s)
	}
}

func (p *SimplifiedCqlParser) Ordering() (localctx IOrderingContext) {
	this := p
	_ = this

	localctx = NewOrderingContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, SimplifiedCqlParserRULE_ordering)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(378)
		p.Identifier()
	}
	p.SetState(380)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_ASC || _la == SimplifiedCqlParserK_DESC {
		{
			p.SetState(379)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SimplifiedCqlParserK_ASC || _la == SimplifiedCqlParserK_DESC) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IGroupByClauseContext is an interface to support dynamic dispatch.
type IGroupByClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGroupByClauseContext differentiates from other interfaces.
	IsGroupByClauseContext()
}

type GroupByClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroupByClauseContext() *GroupByClauseContext {
	var p = new(GroupByClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_groupByClause
	return p
}

func (*GroupByClauseContext) IsGroupByClauseContext() {}

func NewGroupByClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GroupByClauseContext {
	var p = new(GroupByClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_groupByClause

	return p
}

func (s *GroupByClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *GroupByClauseContext) K_GROUP() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_GROUP, 0)
}

func (s *GroupByClauseContext) K_BY() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_BY, 0)
}

func (s *GroupByClauseContext) Identifiers() IIdentifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifiersContext)
}

func (s *GroupByClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GroupByClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GroupByClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterGroupByClause(s)
	}
}

func (s *GroupByClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitGroupByClause(s)
	}
}

func (p *SimplifiedCqlParser) GroupByClause() (localctx IGroupByClauseContext) {
	this := p
	_ = this

	localctx = NewGroupByClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, SimplifiedCqlParserRULE_groupByClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(382)
		p.Match(SimplifiedCqlParserK_GROUP)
	}
	{
		p.SetState(383)
		p.Match(SimplifiedCqlParserK_BY)
	}
	{
		p.SetState(384)
		p.Identifiers()
	}

	return localctx
}

// IPerPartitionLimitClauseContext is an interface to support dynamic dispatch.
type IPerPartitionLimitClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPerPartitionLimitClauseContext differentiates from other interfaces.
	IsPerPartitionLimitClauseContext()
}

type PerPartitionLimitClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPerPartitionLimitClauseContext() *PerPartitionLimitClauseContext {
	var p = new(PerPartitionLimitClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_perPartitionLimitClause
	return p
}

func (*PerPartitionLimitClauseContext) IsPerPartitionLimitClauseContext() {}

func NewPerPartitionLimitClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PerPartitionLimitClauseContext {
	var p = new(PerPartitionLimitClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_perPartitionLimitClause

	return p
}

func (s *PerPartitionLimitClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *PerPartitionLimitClauseContext) K_PER() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_PER, 0)
}

func (s *PerPartitionLimitClauseContext) K_PARTITION() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_PARTITION, 0)
}

func (s *PerPartitionLimitClauseContext) K_LIMIT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_LIMIT, 0)
}

func (s *PerPartitionLimitClauseContext) INTEGER() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserINTEGER, 0)
}

func (s *PerPartitionLimitClauseContext) BindMarker() IBindMarkerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindMarkerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindMarkerContext)
}

func (s *PerPartitionLimitClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PerPartitionLimitClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PerPartitionLimitClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterPerPartitionLimitClause(s)
	}
}

func (s *PerPartitionLimitClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitPerPartitionLimitClause(s)
	}
}

func (p *SimplifiedCqlParser) PerPartitionLimitClause() (localctx IPerPartitionLimitClauseContext) {
	this := p
	_ = this

	localctx = NewPerPartitionLimitClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, SimplifiedCqlParserRULE_perPartitionLimitClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(386)
		p.Match(SimplifiedCqlParserK_PER)
	}
	{
		p.SetState(387)
		p.Match(SimplifiedCqlParserK_PARTITION)
	}
	{
		p.SetState(388)
		p.Match(SimplifiedCqlParserK_LIMIT)
	}
	p.SetState(391)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SimplifiedCqlParserINTEGER:
		{
			p.SetState(389)
			p.Match(SimplifiedCqlParserINTEGER)
		}

	case SimplifiedCqlParserT__17, SimplifiedCqlParserQMARK:
		{
			p.SetState(390)
			p.BindMarker()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ILimitClauseContext is an interface to support dynamic dispatch.
type ILimitClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLimitClauseContext differentiates from other interfaces.
	IsLimitClauseContext()
}

type LimitClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLimitClauseContext() *LimitClauseContext {
	var p = new(LimitClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_limitClause
	return p
}

func (*LimitClauseContext) IsLimitClauseContext() {}

func NewLimitClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LimitClauseContext {
	var p = new(LimitClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_limitClause

	return p
}

func (s *LimitClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *LimitClauseContext) K_LIMIT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_LIMIT, 0)
}

func (s *LimitClauseContext) INTEGER() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserINTEGER, 0)
}

func (s *LimitClauseContext) BindMarker() IBindMarkerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindMarkerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindMarkerContext)
}

func (s *LimitClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LimitClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LimitClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterLimitClause(s)
	}
}

func (s *LimitClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitLimitClause(s)
	}
}

func (p *SimplifiedCqlParser) LimitClause() (localctx ILimitClauseContext) {
	this := p
	_ = this

	localctx = NewLimitClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, SimplifiedCqlParserRULE_limitClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(393)
		p.Match(SimplifiedCqlParserK_LIMIT)
	}
	p.SetState(396)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SimplifiedCqlParserINTEGER:
		{
			p.SetState(394)
			p.Match(SimplifiedCqlParserINTEGER)
		}

	case SimplifiedCqlParserT__17, SimplifiedCqlParserQMARK:
		{
			p.SetState(395)
			p.BindMarker()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IUsingClauseContext is an interface to support dynamic dispatch.
type IUsingClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUsingClauseContext differentiates from other interfaces.
	IsUsingClauseContext()
}

type UsingClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUsingClauseContext() *UsingClauseContext {
	var p = new(UsingClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_usingClause
	return p
}

func (*UsingClauseContext) IsUsingClauseContext() {}

func NewUsingClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UsingClauseContext {
	var p = new(UsingClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_usingClause

	return p
}

func (s *UsingClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *UsingClauseContext) K_USING() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_USING, 0)
}

func (s *UsingClauseContext) Timestamp() ITimestampContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITimestampContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITimestampContext)
}

func (s *UsingClauseContext) Ttl() ITtlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITtlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITtlContext)
}

func (s *UsingClauseContext) K_AND() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_AND, 0)
}

func (s *UsingClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UsingClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UsingClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterUsingClause(s)
	}
}

func (s *UsingClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitUsingClause(s)
	}
}

func (p *SimplifiedCqlParser) UsingClause() (localctx IUsingClauseContext) {
	this := p
	_ = this

	localctx = NewUsingClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, SimplifiedCqlParserRULE_usingClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(412)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 43, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(398)
			p.Match(SimplifiedCqlParserK_USING)
		}
		{
			p.SetState(399)
			p.Timestamp()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(400)
			p.Match(SimplifiedCqlParserK_USING)
		}
		{
			p.SetState(401)
			p.Ttl()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(402)
			p.Match(SimplifiedCqlParserK_USING)
		}
		{
			p.SetState(403)
			p.Timestamp()
		}
		{
			p.SetState(404)
			p.Match(SimplifiedCqlParserK_AND)
		}
		{
			p.SetState(405)
			p.Ttl()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(407)
			p.Match(SimplifiedCqlParserK_USING)
		}
		{
			p.SetState(408)
			p.Ttl()
		}
		{
			p.SetState(409)
			p.Match(SimplifiedCqlParserK_AND)
		}
		{
			p.SetState(410)
			p.Timestamp()
		}

	}

	return localctx
}

// ITimestampContext is an interface to support dynamic dispatch.
type ITimestampContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTimestampContext differentiates from other interfaces.
	IsTimestampContext()
}

type TimestampContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTimestampContext() *TimestampContext {
	var p = new(TimestampContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_timestamp
	return p
}

func (*TimestampContext) IsTimestampContext() {}

func NewTimestampContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TimestampContext {
	var p = new(TimestampContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_timestamp

	return p
}

func (s *TimestampContext) GetParser() antlr.Parser { return s.parser }

func (s *TimestampContext) K_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_TIMESTAMP, 0)
}

func (s *TimestampContext) INTEGER() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserINTEGER, 0)
}

func (s *TimestampContext) BindMarker() IBindMarkerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindMarkerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindMarkerContext)
}

func (s *TimestampContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TimestampContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TimestampContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterTimestamp(s)
	}
}

func (s *TimestampContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitTimestamp(s)
	}
}

func (p *SimplifiedCqlParser) Timestamp() (localctx ITimestampContext) {
	this := p
	_ = this

	localctx = NewTimestampContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, SimplifiedCqlParserRULE_timestamp)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(414)
		p.Match(SimplifiedCqlParserK_TIMESTAMP)
	}
	p.SetState(417)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SimplifiedCqlParserINTEGER:
		{
			p.SetState(415)
			p.Match(SimplifiedCqlParserINTEGER)
		}

	case SimplifiedCqlParserT__17, SimplifiedCqlParserQMARK:
		{
			p.SetState(416)
			p.BindMarker()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITtlContext is an interface to support dynamic dispatch.
type ITtlContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTtlContext differentiates from other interfaces.
	IsTtlContext()
}

type TtlContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTtlContext() *TtlContext {
	var p = new(TtlContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_ttl
	return p
}

func (*TtlContext) IsTtlContext() {}

func NewTtlContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TtlContext {
	var p = new(TtlContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_ttl

	return p
}

func (s *TtlContext) GetParser() antlr.Parser { return s.parser }

func (s *TtlContext) K_TTL() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_TTL, 0)
}

func (s *TtlContext) INTEGER() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserINTEGER, 0)
}

func (s *TtlContext) BindMarker() IBindMarkerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindMarkerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindMarkerContext)
}

func (s *TtlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TtlContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TtlContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterTtl(s)
	}
}

func (s *TtlContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitTtl(s)
	}
}

func (p *SimplifiedCqlParser) Ttl() (localctx ITtlContext) {
	this := p
	_ = this

	localctx = NewTtlContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, SimplifiedCqlParserRULE_ttl)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(419)
		p.Match(SimplifiedCqlParserK_TTL)
	}
	p.SetState(422)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SimplifiedCqlParserINTEGER:
		{
			p.SetState(420)
			p.Match(SimplifiedCqlParserINTEGER)
		}

	case SimplifiedCqlParserT__17, SimplifiedCqlParserQMARK:
		{
			p.SetState(421)
			p.BindMarker()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IConditionsContext is an interface to support dynamic dispatch.
type IConditionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConditionsContext differentiates from other interfaces.
	IsConditionsContext()
}

type ConditionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditionsContext() *ConditionsContext {
	var p = new(ConditionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_conditions
	return p
}

func (*ConditionsContext) IsConditionsContext() {}

func NewConditionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConditionsContext {
	var p = new(ConditionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_conditions

	return p
}

func (s *ConditionsContext) GetParser() antlr.Parser { return s.parser }

func (s *ConditionsContext) AllCondition() []IConditionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IConditionContext)(nil)).Elem())
	var tst = make([]IConditionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IConditionContext)
		}
	}

	return tst
}

func (s *ConditionsContext) Condition(i int) IConditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IConditionContext)
}

func (s *ConditionsContext) AllK_AND() []antlr.TerminalNode {
	return s.GetTokens(SimplifiedCqlParserK_AND)
}

func (s *ConditionsContext) K_AND(i int) antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_AND, i)
}

func (s *ConditionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConditionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterConditions(s)
	}
}

func (s *ConditionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitConditions(s)
	}
}

func (p *SimplifiedCqlParser) Conditions() (localctx IConditionsContext) {
	this := p
	_ = this

	localctx = NewConditionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, SimplifiedCqlParserRULE_conditions)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(424)
		p.Condition()
	}
	p.SetState(429)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserK_AND {
		{
			p.SetState(425)
			p.Match(SimplifiedCqlParserK_AND)
		}
		{
			p.SetState(426)
			p.Condition()
		}

		p.SetState(431)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IConditionContext is an interface to support dynamic dispatch.
type IConditionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConditionContext differentiates from other interfaces.
	IsConditionContext()
}

type ConditionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditionContext() *ConditionContext {
	var p = new(ConditionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_condition
	return p
}

func (*ConditionContext) IsConditionContext() {}

func NewConditionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConditionContext {
	var p = new(ConditionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_condition

	return p
}

func (s *ConditionContext) GetParser() antlr.Parser { return s.parser }

func (s *ConditionContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *ConditionContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ConditionContext) Operator() IOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperatorContext)
}

func (s *ConditionContext) AllTerm() []ITermContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITermContext)(nil)).Elem())
	var tst = make([]ITermContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITermContext)
		}
	}

	return tst
}

func (s *ConditionContext) Term(i int) ITermContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITermContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITermContext)
}

func (s *ConditionContext) K_IN() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_IN, 0)
}

func (s *ConditionContext) BindMarker() IBindMarkerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindMarkerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindMarkerContext)
}

func (s *ConditionContext) Terms() ITermsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITermsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITermsContext)
}

func (s *ConditionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConditionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterCondition(s)
	}
}

func (s *ConditionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitCondition(s)
	}
}

func (p *SimplifiedCqlParser) Condition() (localctx IConditionContext) {
	this := p
	_ = this

	localctx = NewConditionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, SimplifiedCqlParserRULE_condition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(484)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 53, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(432)
			p.Identifier()
		}
		{
			p.SetState(433)
			p.Operator()
		}
		{
			p.SetState(434)
			p.Term()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(436)
			p.Identifier()
		}
		{
			p.SetState(437)
			p.Match(SimplifiedCqlParserK_IN)
		}
		p.SetState(444)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SimplifiedCqlParserT__0:
			{
				p.SetState(438)
				p.Match(SimplifiedCqlParserT__0)
			}
			p.SetState(440)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SimplifiedCqlParserT__0)|(1<<SimplifiedCqlParserT__5)|(1<<SimplifiedCqlParserT__8)|(1<<SimplifiedCqlParserT__17)|(1<<SimplifiedCqlParserT__18)|(1<<SimplifiedCqlParserK_AS)|(1<<SimplifiedCqlParserK_ASCII)|(1<<SimplifiedCqlParserK_BIGINT)|(1<<SimplifiedCqlParserK_BLOB)|(1<<SimplifiedCqlParserK_BOOLEAN))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(SimplifiedCqlParserK_CAST-33))|(1<<(SimplifiedCqlParserK_CLUSTERING-33))|(1<<(SimplifiedCqlParserK_CONTAINS-33))|(1<<(SimplifiedCqlParserK_COUNTER-33))|(1<<(SimplifiedCqlParserK_COUNT-33))|(1<<(SimplifiedCqlParserK_DATE-33))|(1<<(SimplifiedCqlParserK_DECIMAL-33))|(1<<(SimplifiedCqlParserK_DISTINCT-33))|(1<<(SimplifiedCqlParserK_DOUBLE-33))|(1<<(SimplifiedCqlParserK_DURATION-33))|(1<<(SimplifiedCqlParserK_EXISTS-33))|(1<<(SimplifiedCqlParserK_FILTERING-33))|(1<<(SimplifiedCqlParserK_FLOAT-33))|(1<<(SimplifiedCqlParserK_FROZEN-33))|(1<<(SimplifiedCqlParserK_GROUP-33))|(1<<(SimplifiedCqlParserK_INET-33))|(1<<(SimplifiedCqlParserK_INFINITY-33))|(1<<(SimplifiedCqlParserK_INT-33))|(1<<(SimplifiedCqlParserK_JSON-33))|(1<<(SimplifiedCqlParserK_KEY-33))|(1<<(SimplifiedCqlParserK_LIKE-33))|(1<<(SimplifiedCqlParserK_LIST-33))|(1<<(SimplifiedCqlParserK_MAP-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(SimplifiedCqlParserK_NAN-65))|(1<<(SimplifiedCqlParserK_NULL-65))|(1<<(SimplifiedCqlParserK_PARTITION-65))|(1<<(SimplifiedCqlParserK_PER-65))|(1<<(SimplifiedCqlParserK_SMALLINT-65))|(1<<(SimplifiedCqlParserK_TEXT-65))|(1<<(SimplifiedCqlParserK_TIMESTAMP-65))|(1<<(SimplifiedCqlParserK_TIMEUUID-65))|(1<<(SimplifiedCqlParserK_TIME-65))|(1<<(SimplifiedCqlParserK_TINYINT-65))|(1<<(SimplifiedCqlParserK_TTL-65))|(1<<(SimplifiedCqlParserK_TUPLE-65))|(1<<(SimplifiedCqlParserK_TYPE-65))|(1<<(SimplifiedCqlParserK_UUID-65))|(1<<(SimplifiedCqlParserK_VALUES-65))|(1<<(SimplifiedCqlParserK_VARCHAR-65))|(1<<(SimplifiedCqlParserK_VARINT-65))|(1<<(SimplifiedCqlParserK_WRITETIME-65))|(1<<(SimplifiedCqlParserSTRING_LITERAL-65))|(1<<(SimplifiedCqlParserQUOTED_IDENTIFIER-65))|(1<<(SimplifiedCqlParserINTEGER-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(SimplifiedCqlParserQMARK-97))|(1<<(SimplifiedCqlParserFLOAT-97))|(1<<(SimplifiedCqlParserBOOLEAN-97))|(1<<(SimplifiedCqlParserDURATION-97))|(1<<(SimplifiedCqlParserUNQUOTED_IDENTIFIER-97))|(1<<(SimplifiedCqlParserHEXNUMBER-97))|(1<<(SimplifiedCqlParserUUID-97)))) != 0) {
				{
					p.SetState(439)
					p.Terms()
				}

			}
			{
				p.SetState(442)
				p.Match(SimplifiedCqlParserT__1)
			}

		case SimplifiedCqlParserT__17, SimplifiedCqlParserQMARK:
			{
				p.SetState(443)
				p.BindMarker()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(446)
			p.Identifier()
		}
		{
			p.SetState(447)
			p.Match(SimplifiedCqlParserT__8)
		}
		{
			p.SetState(448)
			p.Term()
		}
		{
			p.SetState(449)
			p.Match(SimplifiedCqlParserT__9)
		}
		{
			p.SetState(450)
			p.Operator()
		}
		{
			p.SetState(451)
			p.Term()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(453)
			p.Identifier()
		}
		{
			p.SetState(454)
			p.Match(SimplifiedCqlParserT__8)
		}
		{
			p.SetState(455)
			p.Term()
		}
		{
			p.SetState(456)
			p.Match(SimplifiedCqlParserT__9)
		}
		{
			p.SetState(457)
			p.Match(SimplifiedCqlParserK_IN)
		}
		p.SetState(464)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SimplifiedCqlParserT__0:
			{
				p.SetState(458)
				p.Match(SimplifiedCqlParserT__0)
			}
			p.SetState(460)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SimplifiedCqlParserT__0)|(1<<SimplifiedCqlParserT__5)|(1<<SimplifiedCqlParserT__8)|(1<<SimplifiedCqlParserT__17)|(1<<SimplifiedCqlParserT__18)|(1<<SimplifiedCqlParserK_AS)|(1<<SimplifiedCqlParserK_ASCII)|(1<<SimplifiedCqlParserK_BIGINT)|(1<<SimplifiedCqlParserK_BLOB)|(1<<SimplifiedCqlParserK_BOOLEAN))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(SimplifiedCqlParserK_CAST-33))|(1<<(SimplifiedCqlParserK_CLUSTERING-33))|(1<<(SimplifiedCqlParserK_CONTAINS-33))|(1<<(SimplifiedCqlParserK_COUNTER-33))|(1<<(SimplifiedCqlParserK_COUNT-33))|(1<<(SimplifiedCqlParserK_DATE-33))|(1<<(SimplifiedCqlParserK_DECIMAL-33))|(1<<(SimplifiedCqlParserK_DISTINCT-33))|(1<<(SimplifiedCqlParserK_DOUBLE-33))|(1<<(SimplifiedCqlParserK_DURATION-33))|(1<<(SimplifiedCqlParserK_EXISTS-33))|(1<<(SimplifiedCqlParserK_FILTERING-33))|(1<<(SimplifiedCqlParserK_FLOAT-33))|(1<<(SimplifiedCqlParserK_FROZEN-33))|(1<<(SimplifiedCqlParserK_GROUP-33))|(1<<(SimplifiedCqlParserK_INET-33))|(1<<(SimplifiedCqlParserK_INFINITY-33))|(1<<(SimplifiedCqlParserK_INT-33))|(1<<(SimplifiedCqlParserK_JSON-33))|(1<<(SimplifiedCqlParserK_KEY-33))|(1<<(SimplifiedCqlParserK_LIKE-33))|(1<<(SimplifiedCqlParserK_LIST-33))|(1<<(SimplifiedCqlParserK_MAP-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(SimplifiedCqlParserK_NAN-65))|(1<<(SimplifiedCqlParserK_NULL-65))|(1<<(SimplifiedCqlParserK_PARTITION-65))|(1<<(SimplifiedCqlParserK_PER-65))|(1<<(SimplifiedCqlParserK_SMALLINT-65))|(1<<(SimplifiedCqlParserK_TEXT-65))|(1<<(SimplifiedCqlParserK_TIMESTAMP-65))|(1<<(SimplifiedCqlParserK_TIMEUUID-65))|(1<<(SimplifiedCqlParserK_TIME-65))|(1<<(SimplifiedCqlParserK_TINYINT-65))|(1<<(SimplifiedCqlParserK_TTL-65))|(1<<(SimplifiedCqlParserK_TUPLE-65))|(1<<(SimplifiedCqlParserK_TYPE-65))|(1<<(SimplifiedCqlParserK_UUID-65))|(1<<(SimplifiedCqlParserK_VALUES-65))|(1<<(SimplifiedCqlParserK_VARCHAR-65))|(1<<(SimplifiedCqlParserK_VARINT-65))|(1<<(SimplifiedCqlParserK_WRITETIME-65))|(1<<(SimplifiedCqlParserSTRING_LITERAL-65))|(1<<(SimplifiedCqlParserQUOTED_IDENTIFIER-65))|(1<<(SimplifiedCqlParserINTEGER-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(SimplifiedCqlParserQMARK-97))|(1<<(SimplifiedCqlParserFLOAT-97))|(1<<(SimplifiedCqlParserBOOLEAN-97))|(1<<(SimplifiedCqlParserDURATION-97))|(1<<(SimplifiedCqlParserUNQUOTED_IDENTIFIER-97))|(1<<(SimplifiedCqlParserHEXNUMBER-97))|(1<<(SimplifiedCqlParserUUID-97)))) != 0) {
				{
					p.SetState(459)
					p.Terms()
				}

			}
			{
				p.SetState(462)
				p.Match(SimplifiedCqlParserT__1)
			}

		case SimplifiedCqlParserT__17, SimplifiedCqlParserQMARK:
			{
				p.SetState(463)
				p.BindMarker()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(466)
			p.Identifier()
		}
		{
			p.SetState(467)
			p.Match(SimplifiedCqlParserT__10)
		}
		{
			p.SetState(468)
			p.Identifier()
		}
		{
			p.SetState(469)
			p.Operator()
		}
		{
			p.SetState(470)
			p.Term()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(472)
			p.Identifier()
		}
		{
			p.SetState(473)
			p.Match(SimplifiedCqlParserT__10)
		}
		{
			p.SetState(474)
			p.Identifier()
		}
		{
			p.SetState(475)
			p.Match(SimplifiedCqlParserK_IN)
		}
		p.SetState(482)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SimplifiedCqlParserT__0:
			{
				p.SetState(476)
				p.Match(SimplifiedCqlParserT__0)
			}
			p.SetState(478)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SimplifiedCqlParserT__0)|(1<<SimplifiedCqlParserT__5)|(1<<SimplifiedCqlParserT__8)|(1<<SimplifiedCqlParserT__17)|(1<<SimplifiedCqlParserT__18)|(1<<SimplifiedCqlParserK_AS)|(1<<SimplifiedCqlParserK_ASCII)|(1<<SimplifiedCqlParserK_BIGINT)|(1<<SimplifiedCqlParserK_BLOB)|(1<<SimplifiedCqlParserK_BOOLEAN))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(SimplifiedCqlParserK_CAST-33))|(1<<(SimplifiedCqlParserK_CLUSTERING-33))|(1<<(SimplifiedCqlParserK_CONTAINS-33))|(1<<(SimplifiedCqlParserK_COUNTER-33))|(1<<(SimplifiedCqlParserK_COUNT-33))|(1<<(SimplifiedCqlParserK_DATE-33))|(1<<(SimplifiedCqlParserK_DECIMAL-33))|(1<<(SimplifiedCqlParserK_DISTINCT-33))|(1<<(SimplifiedCqlParserK_DOUBLE-33))|(1<<(SimplifiedCqlParserK_DURATION-33))|(1<<(SimplifiedCqlParserK_EXISTS-33))|(1<<(SimplifiedCqlParserK_FILTERING-33))|(1<<(SimplifiedCqlParserK_FLOAT-33))|(1<<(SimplifiedCqlParserK_FROZEN-33))|(1<<(SimplifiedCqlParserK_GROUP-33))|(1<<(SimplifiedCqlParserK_INET-33))|(1<<(SimplifiedCqlParserK_INFINITY-33))|(1<<(SimplifiedCqlParserK_INT-33))|(1<<(SimplifiedCqlParserK_JSON-33))|(1<<(SimplifiedCqlParserK_KEY-33))|(1<<(SimplifiedCqlParserK_LIKE-33))|(1<<(SimplifiedCqlParserK_LIST-33))|(1<<(SimplifiedCqlParserK_MAP-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(SimplifiedCqlParserK_NAN-65))|(1<<(SimplifiedCqlParserK_NULL-65))|(1<<(SimplifiedCqlParserK_PARTITION-65))|(1<<(SimplifiedCqlParserK_PER-65))|(1<<(SimplifiedCqlParserK_SMALLINT-65))|(1<<(SimplifiedCqlParserK_TEXT-65))|(1<<(SimplifiedCqlParserK_TIMESTAMP-65))|(1<<(SimplifiedCqlParserK_TIMEUUID-65))|(1<<(SimplifiedCqlParserK_TIME-65))|(1<<(SimplifiedCqlParserK_TINYINT-65))|(1<<(SimplifiedCqlParserK_TTL-65))|(1<<(SimplifiedCqlParserK_TUPLE-65))|(1<<(SimplifiedCqlParserK_TYPE-65))|(1<<(SimplifiedCqlParserK_UUID-65))|(1<<(SimplifiedCqlParserK_VALUES-65))|(1<<(SimplifiedCqlParserK_VARCHAR-65))|(1<<(SimplifiedCqlParserK_VARINT-65))|(1<<(SimplifiedCqlParserK_WRITETIME-65))|(1<<(SimplifiedCqlParserSTRING_LITERAL-65))|(1<<(SimplifiedCqlParserQUOTED_IDENTIFIER-65))|(1<<(SimplifiedCqlParserINTEGER-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(SimplifiedCqlParserQMARK-97))|(1<<(SimplifiedCqlParserFLOAT-97))|(1<<(SimplifiedCqlParserBOOLEAN-97))|(1<<(SimplifiedCqlParserDURATION-97))|(1<<(SimplifiedCqlParserUNQUOTED_IDENTIFIER-97))|(1<<(SimplifiedCqlParserHEXNUMBER-97))|(1<<(SimplifiedCqlParserUUID-97)))) != 0) {
				{
					p.SetState(477)
					p.Terms()
				}

			}
			{
				p.SetState(480)
				p.Match(SimplifiedCqlParserT__1)
			}

		case SimplifiedCqlParserT__17, SimplifiedCqlParserQMARK:
			{
				p.SetState(481)
				p.BindMarker()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}

	return localctx
}

// IWhereClauseContext is an interface to support dynamic dispatch.
type IWhereClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWhereClauseContext differentiates from other interfaces.
	IsWhereClauseContext()
}

type WhereClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhereClauseContext() *WhereClauseContext {
	var p = new(WhereClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_whereClause
	return p
}

func (*WhereClauseContext) IsWhereClauseContext() {}

func NewWhereClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhereClauseContext {
	var p = new(WhereClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_whereClause

	return p
}

func (s *WhereClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *WhereClauseContext) K_WHERE() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_WHERE, 0)
}

func (s *WhereClauseContext) AllRelation() []IRelationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRelationContext)(nil)).Elem())
	var tst = make([]IRelationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRelationContext)
		}
	}

	return tst
}

func (s *WhereClauseContext) Relation(i int) IRelationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRelationContext)
}

func (s *WhereClauseContext) AllLogicalOperator() []ILogicalOperatorContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILogicalOperatorContext)(nil)).Elem())
	var tst = make([]ILogicalOperatorContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILogicalOperatorContext)
		}
	}

	return tst
}

func (s *WhereClauseContext) LogicalOperator(i int) ILogicalOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalOperatorContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILogicalOperatorContext)
}

func (s *WhereClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhereClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WhereClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterWhereClause(s)
	}
}

func (s *WhereClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitWhereClause(s)
	}
}

func (p *SimplifiedCqlParser) WhereClause() (localctx IWhereClauseContext) {
	this := p
	_ = this

	localctx = NewWhereClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, SimplifiedCqlParserRULE_whereClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(486)
		p.Match(SimplifiedCqlParserK_WHERE)
	}
	{
		p.SetState(487)
		p.Relation()
	}
	p.SetState(493)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserK_AND || _la == SimplifiedCqlParserK_OR {
		{
			p.SetState(488)
			p.LogicalOperator()
		}
		{
			p.SetState(489)
			p.Relation()
		}

		p.SetState(495)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ILogicalOperatorContext is an interface to support dynamic dispatch.
type ILogicalOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLogicalOperatorContext differentiates from other interfaces.
	IsLogicalOperatorContext()
}

type LogicalOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLogicalOperatorContext() *LogicalOperatorContext {
	var p = new(LogicalOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_logicalOperator
	return p
}

func (*LogicalOperatorContext) IsLogicalOperatorContext() {}

func NewLogicalOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LogicalOperatorContext {
	var p = new(LogicalOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_logicalOperator

	return p
}

func (s *LogicalOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *LogicalOperatorContext) K_AND() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_AND, 0)
}

func (s *LogicalOperatorContext) K_OR() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_OR, 0)
}

func (s *LogicalOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LogicalOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterLogicalOperator(s)
	}
}

func (s *LogicalOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitLogicalOperator(s)
	}
}

func (p *SimplifiedCqlParser) LogicalOperator() (localctx ILogicalOperatorContext) {
	this := p
	_ = this

	localctx = NewLogicalOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, SimplifiedCqlParserRULE_logicalOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(496)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SimplifiedCqlParserK_AND || _la == SimplifiedCqlParserK_OR) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IRelationContext is an interface to support dynamic dispatch.
type IRelationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRelationContext differentiates from other interfaces.
	IsRelationContext()
}

type RelationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRelationContext() *RelationContext {
	var p = new(RelationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_relation
	return p
}

func (*RelationContext) IsRelationContext() {}

func NewRelationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RelationContext {
	var p = new(RelationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_relation

	return p
}

func (s *RelationContext) GetParser() antlr.Parser { return s.parser }

func (s *RelationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *RelationContext) Operator() IOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperatorContext)
}

func (s *RelationContext) AllTerm() []ITermContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITermContext)(nil)).Elem())
	var tst = make([]ITermContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITermContext)
		}
	}

	return tst
}

func (s *RelationContext) Term(i int) ITermContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITermContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITermContext)
}

func (s *RelationContext) K_TOKEN() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_TOKEN, 0)
}

func (s *RelationContext) Identifiers() IIdentifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifiersContext)
}

func (s *RelationContext) K_LIKE() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_LIKE, 0)
}

func (s *RelationContext) K_IS() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_IS, 0)
}

func (s *RelationContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_NOT, 0)
}

func (s *RelationContext) K_NULL() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_NULL, 0)
}

func (s *RelationContext) K_CONTAINS() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_CONTAINS, 0)
}

func (s *RelationContext) K_KEY() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_KEY, 0)
}

func (s *RelationContext) K_IN() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_IN, 0)
}

func (s *RelationContext) BindMarker() IBindMarkerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindMarkerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindMarkerContext)
}

func (s *RelationContext) Terms() ITermsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITermsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITermsContext)
}

func (s *RelationContext) TupleLiterals() ITupleLiteralsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleLiteralsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleLiteralsContext)
}

func (s *RelationContext) BindMarkers() IBindMarkersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindMarkersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindMarkersContext)
}

func (s *RelationContext) TupleLiteral() ITupleLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleLiteralContext)
}

func (s *RelationContext) Relation() IRelationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelationContext)
}

func (s *RelationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RelationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RelationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterRelation(s)
	}
}

func (s *RelationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitRelation(s)
	}
}

func (p *SimplifiedCqlParser) Relation() (localctx IRelationContext) {
	this := p
	_ = this

	localctx = NewRelationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, SimplifiedCqlParserRULE_relation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(595)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 58, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(498)
			p.Identifier()
		}
		{
			p.SetState(499)
			p.Operator()
		}
		{
			p.SetState(500)
			p.Term()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(502)
			p.Match(SimplifiedCqlParserK_TOKEN)
		}
		{
			p.SetState(503)
			p.Match(SimplifiedCqlParserT__0)
		}
		{
			p.SetState(504)
			p.Identifiers()
		}
		{
			p.SetState(505)
			p.Match(SimplifiedCqlParserT__1)
		}
		{
			p.SetState(506)
			p.Operator()
		}
		{
			p.SetState(507)
			p.Term()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(509)
			p.Identifier()
		}
		{
			p.SetState(510)
			p.Match(SimplifiedCqlParserK_LIKE)
		}
		{
			p.SetState(511)
			p.Term()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(513)
			p.Identifier()
		}
		{
			p.SetState(514)
			p.Match(SimplifiedCqlParserK_IS)
		}
		{
			p.SetState(515)
			p.Match(SimplifiedCqlParserK_NOT)
		}
		{
			p.SetState(516)
			p.Match(SimplifiedCqlParserK_NULL)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(518)
			p.Identifier()
		}
		{
			p.SetState(519)
			p.Match(SimplifiedCqlParserK_CONTAINS)
		}
		p.SetState(521)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 55, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(520)
				p.Match(SimplifiedCqlParserK_KEY)
			}

		}
		{
			p.SetState(523)
			p.Term()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(525)
			p.Identifier()
		}
		{
			p.SetState(526)
			p.Match(SimplifiedCqlParserT__8)
		}
		{
			p.SetState(527)
			p.Term()
		}
		{
			p.SetState(528)
			p.Match(SimplifiedCqlParserT__9)
		}
		{
			p.SetState(529)
			p.Operator()
		}
		{
			p.SetState(530)
			p.Term()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(532)
			p.Identifier()
		}
		{
			p.SetState(533)
			p.Match(SimplifiedCqlParserK_IN)
		}
		p.SetState(540)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SimplifiedCqlParserT__0:
			{
				p.SetState(534)
				p.Match(SimplifiedCqlParserT__0)
			}
			p.SetState(536)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SimplifiedCqlParserT__0)|(1<<SimplifiedCqlParserT__5)|(1<<SimplifiedCqlParserT__8)|(1<<SimplifiedCqlParserT__17)|(1<<SimplifiedCqlParserT__18)|(1<<SimplifiedCqlParserK_AS)|(1<<SimplifiedCqlParserK_ASCII)|(1<<SimplifiedCqlParserK_BIGINT)|(1<<SimplifiedCqlParserK_BLOB)|(1<<SimplifiedCqlParserK_BOOLEAN))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(SimplifiedCqlParserK_CAST-33))|(1<<(SimplifiedCqlParserK_CLUSTERING-33))|(1<<(SimplifiedCqlParserK_CONTAINS-33))|(1<<(SimplifiedCqlParserK_COUNTER-33))|(1<<(SimplifiedCqlParserK_COUNT-33))|(1<<(SimplifiedCqlParserK_DATE-33))|(1<<(SimplifiedCqlParserK_DECIMAL-33))|(1<<(SimplifiedCqlParserK_DISTINCT-33))|(1<<(SimplifiedCqlParserK_DOUBLE-33))|(1<<(SimplifiedCqlParserK_DURATION-33))|(1<<(SimplifiedCqlParserK_EXISTS-33))|(1<<(SimplifiedCqlParserK_FILTERING-33))|(1<<(SimplifiedCqlParserK_FLOAT-33))|(1<<(SimplifiedCqlParserK_FROZEN-33))|(1<<(SimplifiedCqlParserK_GROUP-33))|(1<<(SimplifiedCqlParserK_INET-33))|(1<<(SimplifiedCqlParserK_INFINITY-33))|(1<<(SimplifiedCqlParserK_INT-33))|(1<<(SimplifiedCqlParserK_JSON-33))|(1<<(SimplifiedCqlParserK_KEY-33))|(1<<(SimplifiedCqlParserK_LIKE-33))|(1<<(SimplifiedCqlParserK_LIST-33))|(1<<(SimplifiedCqlParserK_MAP-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(SimplifiedCqlParserK_NAN-65))|(1<<(SimplifiedCqlParserK_NULL-65))|(1<<(SimplifiedCqlParserK_PARTITION-65))|(1<<(SimplifiedCqlParserK_PER-65))|(1<<(SimplifiedCqlParserK_SMALLINT-65))|(1<<(SimplifiedCqlParserK_TEXT-65))|(1<<(SimplifiedCqlParserK_TIMESTAMP-65))|(1<<(SimplifiedCqlParserK_TIMEUUID-65))|(1<<(SimplifiedCqlParserK_TIME-65))|(1<<(SimplifiedCqlParserK_TINYINT-65))|(1<<(SimplifiedCqlParserK_TTL-65))|(1<<(SimplifiedCqlParserK_TUPLE-65))|(1<<(SimplifiedCqlParserK_TYPE-65))|(1<<(SimplifiedCqlParserK_UUID-65))|(1<<(SimplifiedCqlParserK_VALUES-65))|(1<<(SimplifiedCqlParserK_VARCHAR-65))|(1<<(SimplifiedCqlParserK_VARINT-65))|(1<<(SimplifiedCqlParserK_WRITETIME-65))|(1<<(SimplifiedCqlParserSTRING_LITERAL-65))|(1<<(SimplifiedCqlParserQUOTED_IDENTIFIER-65))|(1<<(SimplifiedCqlParserINTEGER-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(SimplifiedCqlParserQMARK-97))|(1<<(SimplifiedCqlParserFLOAT-97))|(1<<(SimplifiedCqlParserBOOLEAN-97))|(1<<(SimplifiedCqlParserDURATION-97))|(1<<(SimplifiedCqlParserUNQUOTED_IDENTIFIER-97))|(1<<(SimplifiedCqlParserHEXNUMBER-97))|(1<<(SimplifiedCqlParserUUID-97)))) != 0) {
				{
					p.SetState(535)
					p.Terms()
				}

			}
			{
				p.SetState(538)
				p.Match(SimplifiedCqlParserT__1)
			}

		case SimplifiedCqlParserT__17, SimplifiedCqlParserQMARK:
			{
				p.SetState(539)
				p.BindMarker()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(542)
			p.Match(SimplifiedCqlParserT__0)
		}
		{
			p.SetState(543)
			p.Identifiers()
		}
		{
			p.SetState(544)
			p.Match(SimplifiedCqlParserT__1)
		}
		{
			p.SetState(545)
			p.Match(SimplifiedCqlParserK_IN)
		}
		{
			p.SetState(546)
			p.Match(SimplifiedCqlParserT__0)
		}
		{
			p.SetState(547)
			p.Match(SimplifiedCqlParserT__1)
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(549)
			p.Match(SimplifiedCqlParserT__0)
		}
		{
			p.SetState(550)
			p.Identifiers()
		}
		{
			p.SetState(551)
			p.Match(SimplifiedCqlParserT__1)
		}
		{
			p.SetState(552)
			p.Match(SimplifiedCqlParserK_IN)
		}
		{
			p.SetState(553)
			p.BindMarker()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(555)
			p.Match(SimplifiedCqlParserT__0)
		}
		{
			p.SetState(556)
			p.Identifiers()
		}
		{
			p.SetState(557)
			p.Match(SimplifiedCqlParserT__1)
		}
		{
			p.SetState(558)
			p.Match(SimplifiedCqlParserK_IN)
		}
		{
			p.SetState(559)
			p.Match(SimplifiedCqlParserT__0)
		}
		{
			p.SetState(560)
			p.TupleLiterals()
		}
		{
			p.SetState(561)
			p.Match(SimplifiedCqlParserT__1)
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(563)
			p.Match(SimplifiedCqlParserT__0)
		}
		{
			p.SetState(564)
			p.Identifiers()
		}
		{
			p.SetState(565)
			p.Match(SimplifiedCqlParserT__1)
		}
		{
			p.SetState(566)
			p.Match(SimplifiedCqlParserK_IN)
		}
		{
			p.SetState(567)
			p.Match(SimplifiedCqlParserT__0)
		}
		{
			p.SetState(568)
			p.BindMarkers()
		}
		{
			p.SetState(569)
			p.Match(SimplifiedCqlParserT__1)
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(571)
			p.Match(SimplifiedCqlParserT__0)
		}
		{
			p.SetState(572)
			p.Identifiers()
		}
		{
			p.SetState(573)
			p.Match(SimplifiedCqlParserT__1)
		}
		{
			p.SetState(574)
			p.Operator()
		}
		{
			p.SetState(575)
			p.TupleLiteral()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(577)
			p.Match(SimplifiedCqlParserT__0)
		}
		{
			p.SetState(578)
			p.Identifiers()
		}
		{
			p.SetState(579)
			p.Match(SimplifiedCqlParserT__1)
		}
		{
			p.SetState(580)
			p.Operator()
		}
		{
			p.SetState(581)
			p.Match(SimplifiedCqlParserT__0)
		}
		{
			p.SetState(582)
			p.BindMarkers()
		}
		{
			p.SetState(583)
			p.Match(SimplifiedCqlParserT__1)
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(585)
			p.Match(SimplifiedCqlParserT__0)
		}
		{
			p.SetState(586)
			p.Identifiers()
		}
		{
			p.SetState(587)
			p.Match(SimplifiedCqlParserT__1)
		}
		{
			p.SetState(588)
			p.Operator()
		}
		{
			p.SetState(589)
			p.BindMarker()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(591)
			p.Match(SimplifiedCqlParserT__0)
		}
		{
			p.SetState(592)
			p.Relation()
		}
		{
			p.SetState(593)
			p.Match(SimplifiedCqlParserT__1)
		}

	}

	return localctx
}

// IOperatorContext is an interface to support dynamic dispatch.
type IOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOperatorContext differentiates from other interfaces.
	IsOperatorContext()
}

type OperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOperatorContext() *OperatorContext {
	var p = new(OperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_operator
	return p
}

func (*OperatorContext) IsOperatorContext() {}

func NewOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OperatorContext {
	var p = new(OperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_operator

	return p
}

func (s *OperatorContext) GetParser() antlr.Parser { return s.parser }
func (s *OperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterOperator(s)
	}
}

func (s *OperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitOperator(s)
	}
}

func (p *SimplifiedCqlParser) Operator() (localctx IOperatorContext) {
	this := p
	_ = this

	localctx = NewOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, SimplifiedCqlParserRULE_operator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(597)
		_la = p.GetTokenStream().LA(1)

		if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SimplifiedCqlParserT__3)|(1<<SimplifiedCqlParserT__12)|(1<<SimplifiedCqlParserT__13)|(1<<SimplifiedCqlParserT__14)|(1<<SimplifiedCqlParserT__15)|(1<<SimplifiedCqlParserT__16)|(1<<SimplifiedCqlParserT__17))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ILiteralContext is an interface to support dynamic dispatch.
type ILiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLiteralContext differentiates from other interfaces.
	IsLiteralContext()
}

type LiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteralContext() *LiteralContext {
	var p = new(LiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_literal
	return p
}

func (*LiteralContext) IsLiteralContext() {}

func NewLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LiteralContext {
	var p = new(LiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_literal

	return p
}

func (s *LiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *LiteralContext) PrimitiveLiteral() IPrimitiveLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimitiveLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimitiveLiteralContext)
}

func (s *LiteralContext) CollectionLiteral() ICollectionLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollectionLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollectionLiteralContext)
}

func (s *LiteralContext) TupleLiteral() ITupleLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleLiteralContext)
}

func (s *LiteralContext) UdtLiteral() IUdtLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUdtLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUdtLiteralContext)
}

func (s *LiteralContext) K_NULL() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_NULL, 0)
}

func (s *LiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterLiteral(s)
	}
}

func (s *LiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitLiteral(s)
	}
}

func (p *SimplifiedCqlParser) Literal() (localctx ILiteralContext) {
	this := p
	_ = this

	localctx = NewLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, SimplifiedCqlParserRULE_literal)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(604)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 59, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(599)
			p.PrimitiveLiteral()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(600)
			p.CollectionLiteral()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(601)
			p.TupleLiteral()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(602)
			p.UdtLiteral()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(603)
			p.Match(SimplifiedCqlParserK_NULL)
		}

	}

	return localctx
}

// IPrimitiveLiteralContext is an interface to support dynamic dispatch.
type IPrimitiveLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrimitiveLiteralContext differentiates from other interfaces.
	IsPrimitiveLiteralContext()
}

type PrimitiveLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimitiveLiteralContext() *PrimitiveLiteralContext {
	var p = new(PrimitiveLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_primitiveLiteral
	return p
}

func (*PrimitiveLiteralContext) IsPrimitiveLiteralContext() {}

func NewPrimitiveLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimitiveLiteralContext {
	var p = new(PrimitiveLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_primitiveLiteral

	return p
}

func (s *PrimitiveLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimitiveLiteralContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserSTRING_LITERAL, 0)
}

func (s *PrimitiveLiteralContext) INTEGER() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserINTEGER, 0)
}

func (s *PrimitiveLiteralContext) FLOAT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserFLOAT, 0)
}

func (s *PrimitiveLiteralContext) BOOLEAN() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserBOOLEAN, 0)
}

func (s *PrimitiveLiteralContext) DURATION() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserDURATION, 0)
}

func (s *PrimitiveLiteralContext) UUID() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserUUID, 0)
}

func (s *PrimitiveLiteralContext) HEXNUMBER() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserHEXNUMBER, 0)
}

func (s *PrimitiveLiteralContext) K_NAN() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_NAN, 0)
}

func (s *PrimitiveLiteralContext) K_INFINITY() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_INFINITY, 0)
}

func (s *PrimitiveLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimitiveLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimitiveLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterPrimitiveLiteral(s)
	}
}

func (s *PrimitiveLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitPrimitiveLiteral(s)
	}
}

func (p *SimplifiedCqlParser) PrimitiveLiteral() (localctx IPrimitiveLiteralContext) {
	this := p
	_ = this

	localctx = NewPrimitiveLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, SimplifiedCqlParserRULE_primitiveLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(621)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 62, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(606)
			p.Match(SimplifiedCqlParserSTRING_LITERAL)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(607)
			p.Match(SimplifiedCqlParserINTEGER)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(608)
			p.Match(SimplifiedCqlParserFLOAT)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(609)
			p.Match(SimplifiedCqlParserBOOLEAN)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(610)
			p.Match(SimplifiedCqlParserDURATION)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(611)
			p.Match(SimplifiedCqlParserUUID)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(612)
			p.Match(SimplifiedCqlParserHEXNUMBER)
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		p.SetState(614)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SimplifiedCqlParserT__5 {
			{
				p.SetState(613)
				p.Match(SimplifiedCqlParserT__5)
			}

		}
		{
			p.SetState(616)
			p.Match(SimplifiedCqlParserK_NAN)
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		p.SetState(618)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SimplifiedCqlParserT__5 {
			{
				p.SetState(617)
				p.Match(SimplifiedCqlParserT__5)
			}

		}
		{
			p.SetState(620)
			p.Match(SimplifiedCqlParserK_INFINITY)
		}

	}

	return localctx
}

// ICollectionLiteralContext is an interface to support dynamic dispatch.
type ICollectionLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCollectionLiteralContext differentiates from other interfaces.
	IsCollectionLiteralContext()
}

type CollectionLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCollectionLiteralContext() *CollectionLiteralContext {
	var p = new(CollectionLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_collectionLiteral
	return p
}

func (*CollectionLiteralContext) IsCollectionLiteralContext() {}

func NewCollectionLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CollectionLiteralContext {
	var p = new(CollectionLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_collectionLiteral

	return p
}

func (s *CollectionLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *CollectionLiteralContext) ListLiteral() IListLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IListLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IListLiteralContext)
}

func (s *CollectionLiteralContext) SetLiteral() ISetLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetLiteralContext)
}

func (s *CollectionLiteralContext) MapLiteral() IMapLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMapLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMapLiteralContext)
}

func (s *CollectionLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CollectionLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CollectionLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterCollectionLiteral(s)
	}
}

func (s *CollectionLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitCollectionLiteral(s)
	}
}

func (p *SimplifiedCqlParser) CollectionLiteral() (localctx ICollectionLiteralContext) {
	this := p
	_ = this

	localctx = NewCollectionLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, SimplifiedCqlParserRULE_collectionLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(626)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 63, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(623)
			p.ListLiteral()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(624)
			p.SetLiteral()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(625)
			p.MapLiteral()
		}

	}

	return localctx
}

// IListLiteralContext is an interface to support dynamic dispatch.
type IListLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsListLiteralContext differentiates from other interfaces.
	IsListLiteralContext()
}

type ListLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyListLiteralContext() *ListLiteralContext {
	var p = new(ListLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_listLiteral
	return p
}

func (*ListLiteralContext) IsListLiteralContext() {}

func NewListLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ListLiteralContext {
	var p = new(ListLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_listLiteral

	return p
}

func (s *ListLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *ListLiteralContext) Terms() ITermsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITermsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITermsContext)
}

func (s *ListLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ListLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ListLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterListLiteral(s)
	}
}

func (s *ListLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitListLiteral(s)
	}
}

func (p *SimplifiedCqlParser) ListLiteral() (localctx IListLiteralContext) {
	this := p
	_ = this

	localctx = NewListLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, SimplifiedCqlParserRULE_listLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(628)
		p.Match(SimplifiedCqlParserT__8)
	}
	p.SetState(630)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SimplifiedCqlParserT__0)|(1<<SimplifiedCqlParserT__5)|(1<<SimplifiedCqlParserT__8)|(1<<SimplifiedCqlParserT__17)|(1<<SimplifiedCqlParserT__18)|(1<<SimplifiedCqlParserK_AS)|(1<<SimplifiedCqlParserK_ASCII)|(1<<SimplifiedCqlParserK_BIGINT)|(1<<SimplifiedCqlParserK_BLOB)|(1<<SimplifiedCqlParserK_BOOLEAN))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(SimplifiedCqlParserK_CAST-33))|(1<<(SimplifiedCqlParserK_CLUSTERING-33))|(1<<(SimplifiedCqlParserK_CONTAINS-33))|(1<<(SimplifiedCqlParserK_COUNTER-33))|(1<<(SimplifiedCqlParserK_COUNT-33))|(1<<(SimplifiedCqlParserK_DATE-33))|(1<<(SimplifiedCqlParserK_DECIMAL-33))|(1<<(SimplifiedCqlParserK_DISTINCT-33))|(1<<(SimplifiedCqlParserK_DOUBLE-33))|(1<<(SimplifiedCqlParserK_DURATION-33))|(1<<(SimplifiedCqlParserK_EXISTS-33))|(1<<(SimplifiedCqlParserK_FILTERING-33))|(1<<(SimplifiedCqlParserK_FLOAT-33))|(1<<(SimplifiedCqlParserK_FROZEN-33))|(1<<(SimplifiedCqlParserK_GROUP-33))|(1<<(SimplifiedCqlParserK_INET-33))|(1<<(SimplifiedCqlParserK_INFINITY-33))|(1<<(SimplifiedCqlParserK_INT-33))|(1<<(SimplifiedCqlParserK_JSON-33))|(1<<(SimplifiedCqlParserK_KEY-33))|(1<<(SimplifiedCqlParserK_LIKE-33))|(1<<(SimplifiedCqlParserK_LIST-33))|(1<<(SimplifiedCqlParserK_MAP-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(SimplifiedCqlParserK_NAN-65))|(1<<(SimplifiedCqlParserK_NULL-65))|(1<<(SimplifiedCqlParserK_PARTITION-65))|(1<<(SimplifiedCqlParserK_PER-65))|(1<<(SimplifiedCqlParserK_SMALLINT-65))|(1<<(SimplifiedCqlParserK_TEXT-65))|(1<<(SimplifiedCqlParserK_TIMESTAMP-65))|(1<<(SimplifiedCqlParserK_TIMEUUID-65))|(1<<(SimplifiedCqlParserK_TIME-65))|(1<<(SimplifiedCqlParserK_TINYINT-65))|(1<<(SimplifiedCqlParserK_TTL-65))|(1<<(SimplifiedCqlParserK_TUPLE-65))|(1<<(SimplifiedCqlParserK_TYPE-65))|(1<<(SimplifiedCqlParserK_UUID-65))|(1<<(SimplifiedCqlParserK_VALUES-65))|(1<<(SimplifiedCqlParserK_VARCHAR-65))|(1<<(SimplifiedCqlParserK_VARINT-65))|(1<<(SimplifiedCqlParserK_WRITETIME-65))|(1<<(SimplifiedCqlParserSTRING_LITERAL-65))|(1<<(SimplifiedCqlParserQUOTED_IDENTIFIER-65))|(1<<(SimplifiedCqlParserINTEGER-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(SimplifiedCqlParserQMARK-97))|(1<<(SimplifiedCqlParserFLOAT-97))|(1<<(SimplifiedCqlParserBOOLEAN-97))|(1<<(SimplifiedCqlParserDURATION-97))|(1<<(SimplifiedCqlParserUNQUOTED_IDENTIFIER-97))|(1<<(SimplifiedCqlParserHEXNUMBER-97))|(1<<(SimplifiedCqlParserUUID-97)))) != 0) {
		{
			p.SetState(629)
			p.Terms()
		}

	}
	{
		p.SetState(632)
		p.Match(SimplifiedCqlParserT__9)
	}

	return localctx
}

// ISetLiteralContext is an interface to support dynamic dispatch.
type ISetLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSetLiteralContext differentiates from other interfaces.
	IsSetLiteralContext()
}

type SetLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetLiteralContext() *SetLiteralContext {
	var p = new(SetLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_setLiteral
	return p
}

func (*SetLiteralContext) IsSetLiteralContext() {}

func NewSetLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetLiteralContext {
	var p = new(SetLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_setLiteral

	return p
}

func (s *SetLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *SetLiteralContext) Terms() ITermsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITermsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITermsContext)
}

func (s *SetLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterSetLiteral(s)
	}
}

func (s *SetLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitSetLiteral(s)
	}
}

func (p *SimplifiedCqlParser) SetLiteral() (localctx ISetLiteralContext) {
	this := p
	_ = this

	localctx = NewSetLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, SimplifiedCqlParserRULE_setLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(634)
		p.Match(SimplifiedCqlParserT__18)
	}
	p.SetState(636)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SimplifiedCqlParserT__0)|(1<<SimplifiedCqlParserT__5)|(1<<SimplifiedCqlParserT__8)|(1<<SimplifiedCqlParserT__17)|(1<<SimplifiedCqlParserT__18)|(1<<SimplifiedCqlParserK_AS)|(1<<SimplifiedCqlParserK_ASCII)|(1<<SimplifiedCqlParserK_BIGINT)|(1<<SimplifiedCqlParserK_BLOB)|(1<<SimplifiedCqlParserK_BOOLEAN))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(SimplifiedCqlParserK_CAST-33))|(1<<(SimplifiedCqlParserK_CLUSTERING-33))|(1<<(SimplifiedCqlParserK_CONTAINS-33))|(1<<(SimplifiedCqlParserK_COUNTER-33))|(1<<(SimplifiedCqlParserK_COUNT-33))|(1<<(SimplifiedCqlParserK_DATE-33))|(1<<(SimplifiedCqlParserK_DECIMAL-33))|(1<<(SimplifiedCqlParserK_DISTINCT-33))|(1<<(SimplifiedCqlParserK_DOUBLE-33))|(1<<(SimplifiedCqlParserK_DURATION-33))|(1<<(SimplifiedCqlParserK_EXISTS-33))|(1<<(SimplifiedCqlParserK_FILTERING-33))|(1<<(SimplifiedCqlParserK_FLOAT-33))|(1<<(SimplifiedCqlParserK_FROZEN-33))|(1<<(SimplifiedCqlParserK_GROUP-33))|(1<<(SimplifiedCqlParserK_INET-33))|(1<<(SimplifiedCqlParserK_INFINITY-33))|(1<<(SimplifiedCqlParserK_INT-33))|(1<<(SimplifiedCqlParserK_JSON-33))|(1<<(SimplifiedCqlParserK_KEY-33))|(1<<(SimplifiedCqlParserK_LIKE-33))|(1<<(SimplifiedCqlParserK_LIST-33))|(1<<(SimplifiedCqlParserK_MAP-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(SimplifiedCqlParserK_NAN-65))|(1<<(SimplifiedCqlParserK_NULL-65))|(1<<(SimplifiedCqlParserK_PARTITION-65))|(1<<(SimplifiedCqlParserK_PER-65))|(1<<(SimplifiedCqlParserK_SMALLINT-65))|(1<<(SimplifiedCqlParserK_TEXT-65))|(1<<(SimplifiedCqlParserK_TIMESTAMP-65))|(1<<(SimplifiedCqlParserK_TIMEUUID-65))|(1<<(SimplifiedCqlParserK_TIME-65))|(1<<(SimplifiedCqlParserK_TINYINT-65))|(1<<(SimplifiedCqlParserK_TTL-65))|(1<<(SimplifiedCqlParserK_TUPLE-65))|(1<<(SimplifiedCqlParserK_TYPE-65))|(1<<(SimplifiedCqlParserK_UUID-65))|(1<<(SimplifiedCqlParserK_VALUES-65))|(1<<(SimplifiedCqlParserK_VARCHAR-65))|(1<<(SimplifiedCqlParserK_VARINT-65))|(1<<(SimplifiedCqlParserK_WRITETIME-65))|(1<<(SimplifiedCqlParserSTRING_LITERAL-65))|(1<<(SimplifiedCqlParserQUOTED_IDENTIFIER-65))|(1<<(SimplifiedCqlParserINTEGER-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(SimplifiedCqlParserQMARK-97))|(1<<(SimplifiedCqlParserFLOAT-97))|(1<<(SimplifiedCqlParserBOOLEAN-97))|(1<<(SimplifiedCqlParserDURATION-97))|(1<<(SimplifiedCqlParserUNQUOTED_IDENTIFIER-97))|(1<<(SimplifiedCqlParserHEXNUMBER-97))|(1<<(SimplifiedCqlParserUUID-97)))) != 0) {
		{
			p.SetState(635)
			p.Terms()
		}

	}
	{
		p.SetState(638)
		p.Match(SimplifiedCqlParserT__19)
	}

	return localctx
}

// IMapLiteralContext is an interface to support dynamic dispatch.
type IMapLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMapLiteralContext differentiates from other interfaces.
	IsMapLiteralContext()
}

type MapLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMapLiteralContext() *MapLiteralContext {
	var p = new(MapLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_mapLiteral
	return p
}

func (*MapLiteralContext) IsMapLiteralContext() {}

func NewMapLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MapLiteralContext {
	var p = new(MapLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_mapLiteral

	return p
}

func (s *MapLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *MapLiteralContext) MapEntries() IMapEntriesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMapEntriesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMapEntriesContext)
}

func (s *MapLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MapLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterMapLiteral(s)
	}
}

func (s *MapLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitMapLiteral(s)
	}
}

func (p *SimplifiedCqlParser) MapLiteral() (localctx IMapLiteralContext) {
	this := p
	_ = this

	localctx = NewMapLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, SimplifiedCqlParserRULE_mapLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(640)
		p.Match(SimplifiedCqlParserT__18)
	}
	p.SetState(642)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SimplifiedCqlParserT__0)|(1<<SimplifiedCqlParserT__5)|(1<<SimplifiedCqlParserT__8)|(1<<SimplifiedCqlParserT__17)|(1<<SimplifiedCqlParserT__18)|(1<<SimplifiedCqlParserK_AS)|(1<<SimplifiedCqlParserK_ASCII)|(1<<SimplifiedCqlParserK_BIGINT)|(1<<SimplifiedCqlParserK_BLOB)|(1<<SimplifiedCqlParserK_BOOLEAN))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(SimplifiedCqlParserK_CAST-33))|(1<<(SimplifiedCqlParserK_CLUSTERING-33))|(1<<(SimplifiedCqlParserK_CONTAINS-33))|(1<<(SimplifiedCqlParserK_COUNTER-33))|(1<<(SimplifiedCqlParserK_COUNT-33))|(1<<(SimplifiedCqlParserK_DATE-33))|(1<<(SimplifiedCqlParserK_DECIMAL-33))|(1<<(SimplifiedCqlParserK_DISTINCT-33))|(1<<(SimplifiedCqlParserK_DOUBLE-33))|(1<<(SimplifiedCqlParserK_DURATION-33))|(1<<(SimplifiedCqlParserK_EXISTS-33))|(1<<(SimplifiedCqlParserK_FILTERING-33))|(1<<(SimplifiedCqlParserK_FLOAT-33))|(1<<(SimplifiedCqlParserK_FROZEN-33))|(1<<(SimplifiedCqlParserK_GROUP-33))|(1<<(SimplifiedCqlParserK_INET-33))|(1<<(SimplifiedCqlParserK_INFINITY-33))|(1<<(SimplifiedCqlParserK_INT-33))|(1<<(SimplifiedCqlParserK_JSON-33))|(1<<(SimplifiedCqlParserK_KEY-33))|(1<<(SimplifiedCqlParserK_LIKE-33))|(1<<(SimplifiedCqlParserK_LIST-33))|(1<<(SimplifiedCqlParserK_MAP-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(SimplifiedCqlParserK_NAN-65))|(1<<(SimplifiedCqlParserK_NULL-65))|(1<<(SimplifiedCqlParserK_PARTITION-65))|(1<<(SimplifiedCqlParserK_PER-65))|(1<<(SimplifiedCqlParserK_SMALLINT-65))|(1<<(SimplifiedCqlParserK_TEXT-65))|(1<<(SimplifiedCqlParserK_TIMESTAMP-65))|(1<<(SimplifiedCqlParserK_TIMEUUID-65))|(1<<(SimplifiedCqlParserK_TIME-65))|(1<<(SimplifiedCqlParserK_TINYINT-65))|(1<<(SimplifiedCqlParserK_TTL-65))|(1<<(SimplifiedCqlParserK_TUPLE-65))|(1<<(SimplifiedCqlParserK_TYPE-65))|(1<<(SimplifiedCqlParserK_UUID-65))|(1<<(SimplifiedCqlParserK_VALUES-65))|(1<<(SimplifiedCqlParserK_VARCHAR-65))|(1<<(SimplifiedCqlParserK_VARINT-65))|(1<<(SimplifiedCqlParserK_WRITETIME-65))|(1<<(SimplifiedCqlParserSTRING_LITERAL-65))|(1<<(SimplifiedCqlParserQUOTED_IDENTIFIER-65))|(1<<(SimplifiedCqlParserINTEGER-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(SimplifiedCqlParserQMARK-97))|(1<<(SimplifiedCqlParserFLOAT-97))|(1<<(SimplifiedCqlParserBOOLEAN-97))|(1<<(SimplifiedCqlParserDURATION-97))|(1<<(SimplifiedCqlParserUNQUOTED_IDENTIFIER-97))|(1<<(SimplifiedCqlParserHEXNUMBER-97))|(1<<(SimplifiedCqlParserUUID-97)))) != 0) {
		{
			p.SetState(641)
			p.MapEntries()
		}

	}
	{
		p.SetState(644)
		p.Match(SimplifiedCqlParserT__19)
	}

	return localctx
}

// IMapEntriesContext is an interface to support dynamic dispatch.
type IMapEntriesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMapEntriesContext differentiates from other interfaces.
	IsMapEntriesContext()
}

type MapEntriesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMapEntriesContext() *MapEntriesContext {
	var p = new(MapEntriesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_mapEntries
	return p
}

func (*MapEntriesContext) IsMapEntriesContext() {}

func NewMapEntriesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MapEntriesContext {
	var p = new(MapEntriesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_mapEntries

	return p
}

func (s *MapEntriesContext) GetParser() antlr.Parser { return s.parser }

func (s *MapEntriesContext) AllMapEntry() []IMapEntryContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMapEntryContext)(nil)).Elem())
	var tst = make([]IMapEntryContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMapEntryContext)
		}
	}

	return tst
}

func (s *MapEntriesContext) MapEntry(i int) IMapEntryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMapEntryContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMapEntryContext)
}

func (s *MapEntriesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapEntriesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MapEntriesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterMapEntries(s)
	}
}

func (s *MapEntriesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitMapEntries(s)
	}
}

func (p *SimplifiedCqlParser) MapEntries() (localctx IMapEntriesContext) {
	this := p
	_ = this

	localctx = NewMapEntriesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, SimplifiedCqlParserRULE_mapEntries)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(646)
		p.MapEntry()
	}
	p.SetState(651)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserT__2 {
		{
			p.SetState(647)
			p.Match(SimplifiedCqlParserT__2)
		}
		{
			p.SetState(648)
			p.MapEntry()
		}

		p.SetState(653)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IMapEntryContext is an interface to support dynamic dispatch.
type IMapEntryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMapEntryContext differentiates from other interfaces.
	IsMapEntryContext()
}

type MapEntryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMapEntryContext() *MapEntryContext {
	var p = new(MapEntryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_mapEntry
	return p
}

func (*MapEntryContext) IsMapEntryContext() {}

func NewMapEntryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MapEntryContext {
	var p = new(MapEntryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_mapEntry

	return p
}

func (s *MapEntryContext) GetParser() antlr.Parser { return s.parser }

func (s *MapEntryContext) AllTerm() []ITermContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITermContext)(nil)).Elem())
	var tst = make([]ITermContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITermContext)
		}
	}

	return tst
}

func (s *MapEntryContext) Term(i int) ITermContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITermContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITermContext)
}

func (s *MapEntryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapEntryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MapEntryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterMapEntry(s)
	}
}

func (s *MapEntryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitMapEntry(s)
	}
}

func (p *SimplifiedCqlParser) MapEntry() (localctx IMapEntryContext) {
	this := p
	_ = this

	localctx = NewMapEntryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, SimplifiedCqlParserRULE_mapEntry)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(654)
		p.Term()
	}
	{
		p.SetState(655)
		p.Match(SimplifiedCqlParserT__17)
	}
	{
		p.SetState(656)
		p.Term()
	}

	return localctx
}

// ITupleLiteralsContext is an interface to support dynamic dispatch.
type ITupleLiteralsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTupleLiteralsContext differentiates from other interfaces.
	IsTupleLiteralsContext()
}

type TupleLiteralsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTupleLiteralsContext() *TupleLiteralsContext {
	var p = new(TupleLiteralsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_tupleLiterals
	return p
}

func (*TupleLiteralsContext) IsTupleLiteralsContext() {}

func NewTupleLiteralsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TupleLiteralsContext {
	var p = new(TupleLiteralsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_tupleLiterals

	return p
}

func (s *TupleLiteralsContext) GetParser() antlr.Parser { return s.parser }

func (s *TupleLiteralsContext) AllTupleLiteral() []ITupleLiteralContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITupleLiteralContext)(nil)).Elem())
	var tst = make([]ITupleLiteralContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITupleLiteralContext)
		}
	}

	return tst
}

func (s *TupleLiteralsContext) TupleLiteral(i int) ITupleLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleLiteralContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITupleLiteralContext)
}

func (s *TupleLiteralsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleLiteralsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TupleLiteralsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterTupleLiterals(s)
	}
}

func (s *TupleLiteralsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitTupleLiterals(s)
	}
}

func (p *SimplifiedCqlParser) TupleLiterals() (localctx ITupleLiteralsContext) {
	this := p
	_ = this

	localctx = NewTupleLiteralsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, SimplifiedCqlParserRULE_tupleLiterals)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(658)
		p.TupleLiteral()
	}
	p.SetState(663)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserT__2 {
		{
			p.SetState(659)
			p.Match(SimplifiedCqlParserT__2)
		}
		{
			p.SetState(660)
			p.TupleLiteral()
		}

		p.SetState(665)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITupleLiteralContext is an interface to support dynamic dispatch.
type ITupleLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTupleLiteralContext differentiates from other interfaces.
	IsTupleLiteralContext()
}

type TupleLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTupleLiteralContext() *TupleLiteralContext {
	var p = new(TupleLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_tupleLiteral
	return p
}

func (*TupleLiteralContext) IsTupleLiteralContext() {}

func NewTupleLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TupleLiteralContext {
	var p = new(TupleLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_tupleLiteral

	return p
}

func (s *TupleLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *TupleLiteralContext) Terms() ITermsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITermsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITermsContext)
}

func (s *TupleLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TupleLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterTupleLiteral(s)
	}
}

func (s *TupleLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitTupleLiteral(s)
	}
}

func (p *SimplifiedCqlParser) TupleLiteral() (localctx ITupleLiteralContext) {
	this := p
	_ = this

	localctx = NewTupleLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, SimplifiedCqlParserRULE_tupleLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(666)
		p.Match(SimplifiedCqlParserT__0)
	}
	{
		p.SetState(667)
		p.Terms()
	}
	{
		p.SetState(668)
		p.Match(SimplifiedCqlParserT__1)
	}

	return localctx
}

// IUdtLiteralContext is an interface to support dynamic dispatch.
type IUdtLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUdtLiteralContext differentiates from other interfaces.
	IsUdtLiteralContext()
}

type UdtLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUdtLiteralContext() *UdtLiteralContext {
	var p = new(UdtLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_udtLiteral
	return p
}

func (*UdtLiteralContext) IsUdtLiteralContext() {}

func NewUdtLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UdtLiteralContext {
	var p = new(UdtLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_udtLiteral

	return p
}

func (s *UdtLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *UdtLiteralContext) FieldLiterals() IFieldLiteralsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldLiteralsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldLiteralsContext)
}

func (s *UdtLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UdtLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UdtLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterUdtLiteral(s)
	}
}

func (s *UdtLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitUdtLiteral(s)
	}
}

func (p *SimplifiedCqlParser) UdtLiteral() (localctx IUdtLiteralContext) {
	this := p
	_ = this

	localctx = NewUdtLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, SimplifiedCqlParserRULE_udtLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(670)
		p.Match(SimplifiedCqlParserT__18)
	}
	{
		p.SetState(671)
		p.FieldLiterals()
	}
	{
		p.SetState(672)
		p.Match(SimplifiedCqlParserT__19)
	}

	return localctx
}

// IFieldLiteralsContext is an interface to support dynamic dispatch.
type IFieldLiteralsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFieldLiteralsContext differentiates from other interfaces.
	IsFieldLiteralsContext()
}

type FieldLiteralsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFieldLiteralsContext() *FieldLiteralsContext {
	var p = new(FieldLiteralsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_fieldLiterals
	return p
}

func (*FieldLiteralsContext) IsFieldLiteralsContext() {}

func NewFieldLiteralsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldLiteralsContext {
	var p = new(FieldLiteralsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_fieldLiterals

	return p
}

func (s *FieldLiteralsContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldLiteralsContext) AllFieldLiteral() []IFieldLiteralContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFieldLiteralContext)(nil)).Elem())
	var tst = make([]IFieldLiteralContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFieldLiteralContext)
		}
	}

	return tst
}

func (s *FieldLiteralsContext) FieldLiteral(i int) IFieldLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldLiteralContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFieldLiteralContext)
}

func (s *FieldLiteralsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldLiteralsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldLiteralsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterFieldLiterals(s)
	}
}

func (s *FieldLiteralsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitFieldLiterals(s)
	}
}

func (p *SimplifiedCqlParser) FieldLiterals() (localctx IFieldLiteralsContext) {
	this := p
	_ = this

	localctx = NewFieldLiteralsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, SimplifiedCqlParserRULE_fieldLiterals)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(674)
		p.FieldLiteral()
	}
	p.SetState(679)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserT__2 {
		{
			p.SetState(675)
			p.Match(SimplifiedCqlParserT__2)
		}
		{
			p.SetState(676)
			p.FieldLiteral()
		}

		p.SetState(681)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IFieldLiteralContext is an interface to support dynamic dispatch.
type IFieldLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFieldLiteralContext differentiates from other interfaces.
	IsFieldLiteralContext()
}

type FieldLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFieldLiteralContext() *FieldLiteralContext {
	var p = new(FieldLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_fieldLiteral
	return p
}

func (*FieldLiteralContext) IsFieldLiteralContext() {}

func NewFieldLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldLiteralContext {
	var p = new(FieldLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_fieldLiteral

	return p
}

func (s *FieldLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldLiteralContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *FieldLiteralContext) Term() ITermContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITermContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITermContext)
}

func (s *FieldLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterFieldLiteral(s)
	}
}

func (s *FieldLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitFieldLiteral(s)
	}
}

func (p *SimplifiedCqlParser) FieldLiteral() (localctx IFieldLiteralContext) {
	this := p
	_ = this

	localctx = NewFieldLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, SimplifiedCqlParserRULE_fieldLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(682)
		p.Identifier()
	}
	{
		p.SetState(683)
		p.Match(SimplifiedCqlParserT__17)
	}
	{
		p.SetState(684)
		p.Term()
	}

	return localctx
}

// IFunctionCallContext is an interface to support dynamic dispatch.
type IFunctionCallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionCallContext differentiates from other interfaces.
	IsFunctionCallContext()
}

type FunctionCallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionCallContext() *FunctionCallContext {
	var p = new(FunctionCallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_functionCall
	return p
}

func (*FunctionCallContext) IsFunctionCallContext() {}

func NewFunctionCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionCallContext {
	var p = new(FunctionCallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_functionCall

	return p
}

func (s *FunctionCallContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionCallContext) FunctionName() IFunctionNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionNameContext)
}

func (s *FunctionCallContext) FunctionArgs() IFunctionArgsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionArgsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionArgsContext)
}

func (s *FunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionCallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterFunctionCall(s)
	}
}

func (s *FunctionCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitFunctionCall(s)
	}
}

func (p *SimplifiedCqlParser) FunctionCall() (localctx IFunctionCallContext) {
	this := p
	_ = this

	localctx = NewFunctionCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, SimplifiedCqlParserRULE_functionCall)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(686)
		p.FunctionName()
	}
	{
		p.SetState(687)
		p.Match(SimplifiedCqlParserT__0)
	}
	p.SetState(689)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SimplifiedCqlParserT__0)|(1<<SimplifiedCqlParserT__5)|(1<<SimplifiedCqlParserT__8)|(1<<SimplifiedCqlParserT__17)|(1<<SimplifiedCqlParserT__18)|(1<<SimplifiedCqlParserK_AS)|(1<<SimplifiedCqlParserK_ASCII)|(1<<SimplifiedCqlParserK_BIGINT)|(1<<SimplifiedCqlParserK_BLOB)|(1<<SimplifiedCqlParserK_BOOLEAN))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(SimplifiedCqlParserK_CAST-33))|(1<<(SimplifiedCqlParserK_CLUSTERING-33))|(1<<(SimplifiedCqlParserK_CONTAINS-33))|(1<<(SimplifiedCqlParserK_COUNTER-33))|(1<<(SimplifiedCqlParserK_COUNT-33))|(1<<(SimplifiedCqlParserK_DATE-33))|(1<<(SimplifiedCqlParserK_DECIMAL-33))|(1<<(SimplifiedCqlParserK_DISTINCT-33))|(1<<(SimplifiedCqlParserK_DOUBLE-33))|(1<<(SimplifiedCqlParserK_DURATION-33))|(1<<(SimplifiedCqlParserK_EXISTS-33))|(1<<(SimplifiedCqlParserK_FILTERING-33))|(1<<(SimplifiedCqlParserK_FLOAT-33))|(1<<(SimplifiedCqlParserK_FROZEN-33))|(1<<(SimplifiedCqlParserK_GROUP-33))|(1<<(SimplifiedCqlParserK_INET-33))|(1<<(SimplifiedCqlParserK_INFINITY-33))|(1<<(SimplifiedCqlParserK_INT-33))|(1<<(SimplifiedCqlParserK_JSON-33))|(1<<(SimplifiedCqlParserK_KEY-33))|(1<<(SimplifiedCqlParserK_LIKE-33))|(1<<(SimplifiedCqlParserK_LIST-33))|(1<<(SimplifiedCqlParserK_MAP-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(SimplifiedCqlParserK_NAN-65))|(1<<(SimplifiedCqlParserK_NULL-65))|(1<<(SimplifiedCqlParserK_PARTITION-65))|(1<<(SimplifiedCqlParserK_PER-65))|(1<<(SimplifiedCqlParserK_SMALLINT-65))|(1<<(SimplifiedCqlParserK_TEXT-65))|(1<<(SimplifiedCqlParserK_TIMESTAMP-65))|(1<<(SimplifiedCqlParserK_TIMEUUID-65))|(1<<(SimplifiedCqlParserK_TIME-65))|(1<<(SimplifiedCqlParserK_TINYINT-65))|(1<<(SimplifiedCqlParserK_TTL-65))|(1<<(SimplifiedCqlParserK_TUPLE-65))|(1<<(SimplifiedCqlParserK_TYPE-65))|(1<<(SimplifiedCqlParserK_UUID-65))|(1<<(SimplifiedCqlParserK_VALUES-65))|(1<<(SimplifiedCqlParserK_VARCHAR-65))|(1<<(SimplifiedCqlParserK_VARINT-65))|(1<<(SimplifiedCqlParserK_WRITETIME-65))|(1<<(SimplifiedCqlParserSTRING_LITERAL-65))|(1<<(SimplifiedCqlParserQUOTED_IDENTIFIER-65))|(1<<(SimplifiedCqlParserINTEGER-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(SimplifiedCqlParserQMARK-97))|(1<<(SimplifiedCqlParserFLOAT-97))|(1<<(SimplifiedCqlParserBOOLEAN-97))|(1<<(SimplifiedCqlParserDURATION-97))|(1<<(SimplifiedCqlParserUNQUOTED_IDENTIFIER-97))|(1<<(SimplifiedCqlParserHEXNUMBER-97))|(1<<(SimplifiedCqlParserUUID-97)))) != 0) {
		{
			p.SetState(688)
			p.FunctionArgs()
		}

	}
	{
		p.SetState(691)
		p.Match(SimplifiedCqlParserT__1)
	}

	return localctx
}

// IFunctionArgsContext is an interface to support dynamic dispatch.
type IFunctionArgsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionArgsContext differentiates from other interfaces.
	IsFunctionArgsContext()
}

type FunctionArgsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionArgsContext() *FunctionArgsContext {
	var p = new(FunctionArgsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_functionArgs
	return p
}

func (*FunctionArgsContext) IsFunctionArgsContext() {}

func NewFunctionArgsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionArgsContext {
	var p = new(FunctionArgsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_functionArgs

	return p
}

func (s *FunctionArgsContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionArgsContext) AllFunctionArg() []IFunctionArgContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionArgContext)(nil)).Elem())
	var tst = make([]IFunctionArgContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionArgContext)
		}
	}

	return tst
}

func (s *FunctionArgsContext) FunctionArg(i int) IFunctionArgContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionArgContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionArgContext)
}

func (s *FunctionArgsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionArgsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionArgsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterFunctionArgs(s)
	}
}

func (s *FunctionArgsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitFunctionArgs(s)
	}
}

func (p *SimplifiedCqlParser) FunctionArgs() (localctx IFunctionArgsContext) {
	this := p
	_ = this

	localctx = NewFunctionArgsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, SimplifiedCqlParserRULE_functionArgs)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(693)
		p.FunctionArg()
	}
	p.SetState(698)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserT__2 {
		{
			p.SetState(694)
			p.Match(SimplifiedCqlParserT__2)
		}
		{
			p.SetState(695)
			p.FunctionArg()
		}

		p.SetState(700)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IFunctionArgContext is an interface to support dynamic dispatch.
type IFunctionArgContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionArgContext differentiates from other interfaces.
	IsFunctionArgContext()
}

type FunctionArgContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionArgContext() *FunctionArgContext {
	var p = new(FunctionArgContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_functionArg
	return p
}

func (*FunctionArgContext) IsFunctionArgContext() {}

func NewFunctionArgContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionArgContext {
	var p = new(FunctionArgContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_functionArg

	return p
}

func (s *FunctionArgContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionArgContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *FunctionArgContext) Term() ITermContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITermContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITermContext)
}

func (s *FunctionArgContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionArgContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionArgContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterFunctionArg(s)
	}
}

func (s *FunctionArgContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitFunctionArg(s)
	}
}

func (p *SimplifiedCqlParser) FunctionArg() (localctx IFunctionArgContext) {
	this := p
	_ = this

	localctx = NewFunctionArgContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, SimplifiedCqlParserRULE_functionArg)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(703)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 72, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(701)
			p.Identifier()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(702)
			p.Term()
		}

	}

	return localctx
}

// IBindMarkersContext is an interface to support dynamic dispatch.
type IBindMarkersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindMarkersContext differentiates from other interfaces.
	IsBindMarkersContext()
}

type BindMarkersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindMarkersContext() *BindMarkersContext {
	var p = new(BindMarkersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_bindMarkers
	return p
}

func (*BindMarkersContext) IsBindMarkersContext() {}

func NewBindMarkersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindMarkersContext {
	var p = new(BindMarkersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_bindMarkers

	return p
}

func (s *BindMarkersContext) GetParser() antlr.Parser { return s.parser }

func (s *BindMarkersContext) AllBindMarker() []IBindMarkerContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBindMarkerContext)(nil)).Elem())
	var tst = make([]IBindMarkerContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBindMarkerContext)
		}
	}

	return tst
}

func (s *BindMarkersContext) BindMarker(i int) IBindMarkerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindMarkerContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBindMarkerContext)
}

func (s *BindMarkersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindMarkersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindMarkersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterBindMarkers(s)
	}
}

func (s *BindMarkersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitBindMarkers(s)
	}
}

func (p *SimplifiedCqlParser) BindMarkers() (localctx IBindMarkersContext) {
	this := p
	_ = this

	localctx = NewBindMarkersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, SimplifiedCqlParserRULE_bindMarkers)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(705)
		p.BindMarker()
	}
	p.SetState(710)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserT__2 {
		{
			p.SetState(706)
			p.Match(SimplifiedCqlParserT__2)
		}
		{
			p.SetState(707)
			p.BindMarker()
		}

		p.SetState(712)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IBindMarkerContext is an interface to support dynamic dispatch.
type IBindMarkerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindMarkerContext differentiates from other interfaces.
	IsBindMarkerContext()
}

type BindMarkerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindMarkerContext() *BindMarkerContext {
	var p = new(BindMarkerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_bindMarker
	return p
}

func (*BindMarkerContext) IsBindMarkerContext() {}

func NewBindMarkerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindMarkerContext {
	var p = new(BindMarkerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_bindMarker

	return p
}

func (s *BindMarkerContext) GetParser() antlr.Parser { return s.parser }

func (s *BindMarkerContext) PositionalBindMarker() IPositionalBindMarkerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPositionalBindMarkerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPositionalBindMarkerContext)
}

func (s *BindMarkerContext) NamedBindMarker() INamedBindMarkerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamedBindMarkerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INamedBindMarkerContext)
}

func (s *BindMarkerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindMarkerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindMarkerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterBindMarker(s)
	}
}

func (s *BindMarkerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitBindMarker(s)
	}
}

func (p *SimplifiedCqlParser) BindMarker() (localctx IBindMarkerContext) {
	this := p
	_ = this

	localctx = NewBindMarkerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, SimplifiedCqlParserRULE_bindMarker)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(715)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SimplifiedCqlParserQMARK:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(713)
			p.PositionalBindMarker()
		}

	case SimplifiedCqlParserT__17:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(714)
			p.NamedBindMarker()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPositionalBindMarkerContext is an interface to support dynamic dispatch.
type IPositionalBindMarkerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPositionalBindMarkerContext differentiates from other interfaces.
	IsPositionalBindMarkerContext()
}

type PositionalBindMarkerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPositionalBindMarkerContext() *PositionalBindMarkerContext {
	var p = new(PositionalBindMarkerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_positionalBindMarker
	return p
}

func (*PositionalBindMarkerContext) IsPositionalBindMarkerContext() {}

func NewPositionalBindMarkerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PositionalBindMarkerContext {
	var p = new(PositionalBindMarkerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_positionalBindMarker

	return p
}

func (s *PositionalBindMarkerContext) GetParser() antlr.Parser { return s.parser }

func (s *PositionalBindMarkerContext) QMARK() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserQMARK, 0)
}

func (s *PositionalBindMarkerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PositionalBindMarkerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PositionalBindMarkerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterPositionalBindMarker(s)
	}
}

func (s *PositionalBindMarkerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitPositionalBindMarker(s)
	}
}

func (p *SimplifiedCqlParser) PositionalBindMarker() (localctx IPositionalBindMarkerContext) {
	this := p
	_ = this

	localctx = NewPositionalBindMarkerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, SimplifiedCqlParserRULE_positionalBindMarker)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(717)
		p.Match(SimplifiedCqlParserQMARK)
	}

	return localctx
}

// INamedBindMarkerContext is an interface to support dynamic dispatch.
type INamedBindMarkerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNamedBindMarkerContext differentiates from other interfaces.
	IsNamedBindMarkerContext()
}

type NamedBindMarkerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamedBindMarkerContext() *NamedBindMarkerContext {
	var p = new(NamedBindMarkerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_namedBindMarker
	return p
}

func (*NamedBindMarkerContext) IsNamedBindMarkerContext() {}

func NewNamedBindMarkerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamedBindMarkerContext {
	var p = new(NamedBindMarkerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_namedBindMarker

	return p
}

func (s *NamedBindMarkerContext) GetParser() antlr.Parser { return s.parser }

func (s *NamedBindMarkerContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *NamedBindMarkerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamedBindMarkerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamedBindMarkerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterNamedBindMarker(s)
	}
}

func (s *NamedBindMarkerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitNamedBindMarker(s)
	}
}

func (p *SimplifiedCqlParser) NamedBindMarker() (localctx INamedBindMarkerContext) {
	this := p
	_ = this

	localctx = NewNamedBindMarkerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, SimplifiedCqlParserRULE_namedBindMarker)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(719)
		p.Match(SimplifiedCqlParserT__17)
	}
	{
		p.SetState(720)
		p.Identifier()
	}

	return localctx
}

// ITermsContext is an interface to support dynamic dispatch.
type ITermsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTermsContext differentiates from other interfaces.
	IsTermsContext()
}

type TermsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTermsContext() *TermsContext {
	var p = new(TermsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_terms
	return p
}

func (*TermsContext) IsTermsContext() {}

func NewTermsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TermsContext {
	var p = new(TermsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_terms

	return p
}

func (s *TermsContext) GetParser() antlr.Parser { return s.parser }

func (s *TermsContext) AllTerm() []ITermContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITermContext)(nil)).Elem())
	var tst = make([]ITermContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITermContext)
		}
	}

	return tst
}

func (s *TermsContext) Term(i int) ITermContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITermContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITermContext)
}

func (s *TermsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TermsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TermsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterTerms(s)
	}
}

func (s *TermsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitTerms(s)
	}
}

func (p *SimplifiedCqlParser) Terms() (localctx ITermsContext) {
	this := p
	_ = this

	localctx = NewTermsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, SimplifiedCqlParserRULE_terms)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(722)
		p.Term()
	}
	p.SetState(727)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserT__2 {
		{
			p.SetState(723)
			p.Match(SimplifiedCqlParserT__2)
		}
		{
			p.SetState(724)
			p.Term()
		}

		p.SetState(729)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITermContext is an interface to support dynamic dispatch.
type ITermContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTermContext differentiates from other interfaces.
	IsTermContext()
}

type TermContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTermContext() *TermContext {
	var p = new(TermContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_term
	return p
}

func (*TermContext) IsTermContext() {}

func NewTermContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TermContext {
	var p = new(TermContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_term

	return p
}

func (s *TermContext) GetParser() antlr.Parser { return s.parser }

func (s *TermContext) Literal() ILiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *TermContext) BindMarker() IBindMarkerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindMarkerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindMarkerContext)
}

func (s *TermContext) FunctionCall() IFunctionCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionCallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionCallContext)
}

func (s *TermContext) TypeCast() ITypeCastContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeCastContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeCastContext)
}

func (s *TermContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TermContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TermContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterTerm(s)
	}
}

func (s *TermContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitTerm(s)
	}
}

func (p *SimplifiedCqlParser) Term() (localctx ITermContext) {
	this := p
	_ = this

	localctx = NewTermContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, SimplifiedCqlParserRULE_term)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(734)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 76, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(730)
			p.Literal()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(731)
			p.BindMarker()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(732)
			p.FunctionCall()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(733)
			p.TypeCast()
		}

	}

	return localctx
}

// ITypeCastContext is an interface to support dynamic dispatch.
type ITypeCastContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeCastContext differentiates from other interfaces.
	IsTypeCastContext()
}

type TypeCastContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeCastContext() *TypeCastContext {
	var p = new(TypeCastContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_typeCast
	return p
}

func (*TypeCastContext) IsTypeCastContext() {}

func NewTypeCastContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeCastContext {
	var p = new(TypeCastContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_typeCast

	return p
}

func (s *TypeCastContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeCastContext) CqlType() ICqlTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICqlTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICqlTypeContext)
}

func (s *TypeCastContext) Term() ITermContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITermContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITermContext)
}

func (s *TypeCastContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeCastContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeCastContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterTypeCast(s)
	}
}

func (s *TypeCastContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitTypeCast(s)
	}
}

func (p *SimplifiedCqlParser) TypeCast() (localctx ITypeCastContext) {
	this := p
	_ = this

	localctx = NewTypeCastContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, SimplifiedCqlParserRULE_typeCast)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(736)
		p.Match(SimplifiedCqlParserT__0)
	}
	{
		p.SetState(737)
		p.CqlType()
	}
	{
		p.SetState(738)
		p.Match(SimplifiedCqlParserT__1)
	}
	{
		p.SetState(739)
		p.Term()
	}

	return localctx
}

// ICqlTypeContext is an interface to support dynamic dispatch.
type ICqlTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCqlTypeContext differentiates from other interfaces.
	IsCqlTypeContext()
}

type CqlTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCqlTypeContext() *CqlTypeContext {
	var p = new(CqlTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_cqlType
	return p
}

func (*CqlTypeContext) IsCqlTypeContext() {}

func NewCqlTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CqlTypeContext {
	var p = new(CqlTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_cqlType

	return p
}

func (s *CqlTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *CqlTypeContext) PrimitiveType() IPrimitiveTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimitiveTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimitiveTypeContext)
}

func (s *CqlTypeContext) CollectionType() ICollectionTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollectionTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollectionTypeContext)
}

func (s *CqlTypeContext) TupleType() ITupleTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleTypeContext)
}

func (s *CqlTypeContext) UserTypeName() IUserTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserTypeNameContext)
}

func (s *CqlTypeContext) K_FROZEN() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_FROZEN, 0)
}

func (s *CqlTypeContext) CqlType() ICqlTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICqlTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICqlTypeContext)
}

func (s *CqlTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CqlTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CqlTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterCqlType(s)
	}
}

func (s *CqlTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitCqlType(s)
	}
}

func (p *SimplifiedCqlParser) CqlType() (localctx ICqlTypeContext) {
	this := p
	_ = this

	localctx = NewCqlTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, SimplifiedCqlParserRULE_cqlType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(750)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 77, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(741)
			p.PrimitiveType()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(742)
			p.CollectionType()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(743)
			p.TupleType()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(744)
			p.UserTypeName()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(745)
			p.Match(SimplifiedCqlParserK_FROZEN)
		}
		{
			p.SetState(746)
			p.Match(SimplifiedCqlParserT__12)
		}
		{
			p.SetState(747)
			p.CqlType()
		}
		{
			p.SetState(748)
			p.Match(SimplifiedCqlParserT__14)
		}

	}

	return localctx
}

// IPrimitiveTypeContext is an interface to support dynamic dispatch.
type IPrimitiveTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrimitiveTypeContext differentiates from other interfaces.
	IsPrimitiveTypeContext()
}

type PrimitiveTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimitiveTypeContext() *PrimitiveTypeContext {
	var p = new(PrimitiveTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_primitiveType
	return p
}

func (*PrimitiveTypeContext) IsPrimitiveTypeContext() {}

func NewPrimitiveTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimitiveTypeContext {
	var p = new(PrimitiveTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_primitiveType

	return p
}

func (s *PrimitiveTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimitiveTypeContext) K_ASCII() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_ASCII, 0)
}

func (s *PrimitiveTypeContext) K_BIGINT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_BIGINT, 0)
}

func (s *PrimitiveTypeContext) K_BLOB() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_BLOB, 0)
}

func (s *PrimitiveTypeContext) K_BOOLEAN() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_BOOLEAN, 0)
}

func (s *PrimitiveTypeContext) K_COUNTER() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_COUNTER, 0)
}

func (s *PrimitiveTypeContext) K_DATE() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_DATE, 0)
}

func (s *PrimitiveTypeContext) K_DECIMAL() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_DECIMAL, 0)
}

func (s *PrimitiveTypeContext) K_DOUBLE() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_DOUBLE, 0)
}

func (s *PrimitiveTypeContext) K_DURATION() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_DURATION, 0)
}

func (s *PrimitiveTypeContext) K_FLOAT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_FLOAT, 0)
}

func (s *PrimitiveTypeContext) K_INET() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_INET, 0)
}

func (s *PrimitiveTypeContext) K_INT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_INT, 0)
}

func (s *PrimitiveTypeContext) K_SMALLINT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_SMALLINT, 0)
}

func (s *PrimitiveTypeContext) K_TEXT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_TEXT, 0)
}

func (s *PrimitiveTypeContext) K_TIME() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_TIME, 0)
}

func (s *PrimitiveTypeContext) K_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_TIMESTAMP, 0)
}

func (s *PrimitiveTypeContext) K_TIMEUUID() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_TIMEUUID, 0)
}

func (s *PrimitiveTypeContext) K_TINYINT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_TINYINT, 0)
}

func (s *PrimitiveTypeContext) K_UUID() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_UUID, 0)
}

func (s *PrimitiveTypeContext) K_VARCHAR() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_VARCHAR, 0)
}

func (s *PrimitiveTypeContext) K_VARINT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_VARINT, 0)
}

func (s *PrimitiveTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimitiveTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimitiveTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterPrimitiveType(s)
	}
}

func (s *PrimitiveTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitPrimitiveType(s)
	}
}

func (p *SimplifiedCqlParser) PrimitiveType() (localctx IPrimitiveTypeContext) {
	this := p
	_ = this

	localctx = NewPrimitiveTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, SimplifiedCqlParserRULE_primitiveType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(752)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-26)&-(0x1f+1)) == 0 && ((1<<uint((_la-26)))&((1<<(SimplifiedCqlParserK_ASCII-26))|(1<<(SimplifiedCqlParserK_BIGINT-26))|(1<<(SimplifiedCqlParserK_BLOB-26))|(1<<(SimplifiedCqlParserK_BOOLEAN-26))|(1<<(SimplifiedCqlParserK_COUNTER-26))|(1<<(SimplifiedCqlParserK_DATE-26))|(1<<(SimplifiedCqlParserK_DECIMAL-26))|(1<<(SimplifiedCqlParserK_DOUBLE-26))|(1<<(SimplifiedCqlParserK_DURATION-26))|(1<<(SimplifiedCqlParserK_FLOAT-26))|(1<<(SimplifiedCqlParserK_INET-26))|(1<<(SimplifiedCqlParserK_INT-26)))) != 0) || (((_la-74)&-(0x1f+1)) == 0 && ((1<<uint((_la-74)))&((1<<(SimplifiedCqlParserK_SMALLINT-74))|(1<<(SimplifiedCqlParserK_TEXT-74))|(1<<(SimplifiedCqlParserK_TIMESTAMP-74))|(1<<(SimplifiedCqlParserK_TIMEUUID-74))|(1<<(SimplifiedCqlParserK_TIME-74))|(1<<(SimplifiedCqlParserK_TINYINT-74))|(1<<(SimplifiedCqlParserK_UUID-74))|(1<<(SimplifiedCqlParserK_VARCHAR-74))|(1<<(SimplifiedCqlParserK_VARINT-74)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ICollectionTypeContext is an interface to support dynamic dispatch.
type ICollectionTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCollectionTypeContext differentiates from other interfaces.
	IsCollectionTypeContext()
}

type CollectionTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCollectionTypeContext() *CollectionTypeContext {
	var p = new(CollectionTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_collectionType
	return p
}

func (*CollectionTypeContext) IsCollectionTypeContext() {}

func NewCollectionTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CollectionTypeContext {
	var p = new(CollectionTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_collectionType

	return p
}

func (s *CollectionTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *CollectionTypeContext) K_LIST() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_LIST, 0)
}

func (s *CollectionTypeContext) AllCqlType() []ICqlTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICqlTypeContext)(nil)).Elem())
	var tst = make([]ICqlTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICqlTypeContext)
		}
	}

	return tst
}

func (s *CollectionTypeContext) CqlType(i int) ICqlTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICqlTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICqlTypeContext)
}

func (s *CollectionTypeContext) K_SET() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_SET, 0)
}

func (s *CollectionTypeContext) K_MAP() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_MAP, 0)
}

func (s *CollectionTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CollectionTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CollectionTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterCollectionType(s)
	}
}

func (s *CollectionTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitCollectionType(s)
	}
}

func (p *SimplifiedCqlParser) CollectionType() (localctx ICollectionTypeContext) {
	this := p
	_ = this

	localctx = NewCollectionTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, SimplifiedCqlParserRULE_collectionType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(771)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SimplifiedCqlParserK_LIST:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(754)
			p.Match(SimplifiedCqlParserK_LIST)
		}
		{
			p.SetState(755)
			p.Match(SimplifiedCqlParserT__12)
		}
		{
			p.SetState(756)
			p.CqlType()
		}
		{
			p.SetState(757)
			p.Match(SimplifiedCqlParserT__14)
		}

	case SimplifiedCqlParserK_SET:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(759)
			p.Match(SimplifiedCqlParserK_SET)
		}
		{
			p.SetState(760)
			p.Match(SimplifiedCqlParserT__12)
		}
		{
			p.SetState(761)
			p.CqlType()
		}
		{
			p.SetState(762)
			p.Match(SimplifiedCqlParserT__14)
		}

	case SimplifiedCqlParserK_MAP:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(764)
			p.Match(SimplifiedCqlParserK_MAP)
		}
		{
			p.SetState(765)
			p.Match(SimplifiedCqlParserT__12)
		}
		{
			p.SetState(766)
			p.CqlType()
		}
		{
			p.SetState(767)
			p.Match(SimplifiedCqlParserT__2)
		}
		{
			p.SetState(768)
			p.CqlType()
		}
		{
			p.SetState(769)
			p.Match(SimplifiedCqlParserT__14)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITupleTypeContext is an interface to support dynamic dispatch.
type ITupleTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTupleTypeContext differentiates from other interfaces.
	IsTupleTypeContext()
}

type TupleTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTupleTypeContext() *TupleTypeContext {
	var p = new(TupleTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_tupleType
	return p
}

func (*TupleTypeContext) IsTupleTypeContext() {}

func NewTupleTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TupleTypeContext {
	var p = new(TupleTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_tupleType

	return p
}

func (s *TupleTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *TupleTypeContext) K_TUPLE() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_TUPLE, 0)
}

func (s *TupleTypeContext) AllCqlType() []ICqlTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICqlTypeContext)(nil)).Elem())
	var tst = make([]ICqlTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICqlTypeContext)
		}
	}

	return tst
}

func (s *TupleTypeContext) CqlType(i int) ICqlTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICqlTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICqlTypeContext)
}

func (s *TupleTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TupleTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterTupleType(s)
	}
}

func (s *TupleTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitTupleType(s)
	}
}

func (p *SimplifiedCqlParser) TupleType() (localctx ITupleTypeContext) {
	this := p
	_ = this

	localctx = NewTupleTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, SimplifiedCqlParserRULE_tupleType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(773)
		p.Match(SimplifiedCqlParserK_TUPLE)
	}
	{
		p.SetState(774)
		p.Match(SimplifiedCqlParserT__12)
	}
	{
		p.SetState(775)
		p.CqlType()
	}
	p.SetState(780)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserT__2 {
		{
			p.SetState(776)
			p.Match(SimplifiedCqlParserT__2)
		}
		{
			p.SetState(777)
			p.CqlType()
		}

		p.SetState(782)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(783)
		p.Match(SimplifiedCqlParserT__14)
	}

	return localctx
}

// ITableNameContext is an interface to support dynamic dispatch.
type ITableNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableNameContext differentiates from other interfaces.
	IsTableNameContext()
}

type TableNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableNameContext() *TableNameContext {
	var p = new(TableNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_tableName
	return p
}

func (*TableNameContext) IsTableNameContext() {}

func NewTableNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableNameContext {
	var p = new(TableNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_tableName

	return p
}

func (s *TableNameContext) GetParser() antlr.Parser { return s.parser }

func (s *TableNameContext) QualifiedIdentifier() IQualifiedIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedIdentifierContext)
}

func (s *TableNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterTableName(s)
	}
}

func (s *TableNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitTableName(s)
	}
}

func (p *SimplifiedCqlParser) TableName() (localctx ITableNameContext) {
	this := p
	_ = this

	localctx = NewTableNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, SimplifiedCqlParserRULE_tableName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(785)
		p.QualifiedIdentifier()
	}

	return localctx
}

// IFunctionNameContext is an interface to support dynamic dispatch.
type IFunctionNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionNameContext differentiates from other interfaces.
	IsFunctionNameContext()
}

type FunctionNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionNameContext() *FunctionNameContext {
	var p = new(FunctionNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_functionName
	return p
}

func (*FunctionNameContext) IsFunctionNameContext() {}

func NewFunctionNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionNameContext {
	var p = new(FunctionNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_functionName

	return p
}

func (s *FunctionNameContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionNameContext) QualifiedIdentifier() IQualifiedIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedIdentifierContext)
}

func (s *FunctionNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterFunctionName(s)
	}
}

func (s *FunctionNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitFunctionName(s)
	}
}

func (p *SimplifiedCqlParser) FunctionName() (localctx IFunctionNameContext) {
	this := p
	_ = this

	localctx = NewFunctionNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, SimplifiedCqlParserRULE_functionName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(787)
		p.QualifiedIdentifier()
	}

	return localctx
}

// IUserTypeNameContext is an interface to support dynamic dispatch.
type IUserTypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUserTypeNameContext differentiates from other interfaces.
	IsUserTypeNameContext()
}

type UserTypeNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUserTypeNameContext() *UserTypeNameContext {
	var p = new(UserTypeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_userTypeName
	return p
}

func (*UserTypeNameContext) IsUserTypeNameContext() {}

func NewUserTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UserTypeNameContext {
	var p = new(UserTypeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_userTypeName

	return p
}

func (s *UserTypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *UserTypeNameContext) QualifiedIdentifier() IQualifiedIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedIdentifierContext)
}

func (s *UserTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UserTypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UserTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterUserTypeName(s)
	}
}

func (s *UserTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitUserTypeName(s)
	}
}

func (p *SimplifiedCqlParser) UserTypeName() (localctx IUserTypeNameContext) {
	this := p
	_ = this

	localctx = NewUserTypeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, SimplifiedCqlParserRULE_userTypeName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(789)
		p.QualifiedIdentifier()
	}

	return localctx
}

// IKeyspaceNameContext is an interface to support dynamic dispatch.
type IKeyspaceNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKeyspaceNameContext differentiates from other interfaces.
	IsKeyspaceNameContext()
}

type KeyspaceNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeyspaceNameContext() *KeyspaceNameContext {
	var p = new(KeyspaceNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_keyspaceName
	return p
}

func (*KeyspaceNameContext) IsKeyspaceNameContext() {}

func NewKeyspaceNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeyspaceNameContext {
	var p = new(KeyspaceNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_keyspaceName

	return p
}

func (s *KeyspaceNameContext) GetParser() antlr.Parser { return s.parser }

func (s *KeyspaceNameContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *KeyspaceNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeyspaceNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KeyspaceNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterKeyspaceName(s)
	}
}

func (s *KeyspaceNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitKeyspaceName(s)
	}
}

func (p *SimplifiedCqlParser) KeyspaceName() (localctx IKeyspaceNameContext) {
	this := p
	_ = this

	localctx = NewKeyspaceNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, SimplifiedCqlParserRULE_keyspaceName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(791)
		p.Identifier()
	}

	return localctx
}

// IQualifiedIdentifierContext is an interface to support dynamic dispatch.
type IQualifiedIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQualifiedIdentifierContext differentiates from other interfaces.
	IsQualifiedIdentifierContext()
}

type QualifiedIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQualifiedIdentifierContext() *QualifiedIdentifierContext {
	var p = new(QualifiedIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_qualifiedIdentifier
	return p
}

func (*QualifiedIdentifierContext) IsQualifiedIdentifierContext() {}

func NewQualifiedIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QualifiedIdentifierContext {
	var p = new(QualifiedIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_qualifiedIdentifier

	return p
}

func (s *QualifiedIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *QualifiedIdentifierContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *QualifiedIdentifierContext) KeyspaceName() IKeyspaceNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKeyspaceNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IKeyspaceNameContext)
}

func (s *QualifiedIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QualifiedIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QualifiedIdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterQualifiedIdentifier(s)
	}
}

func (s *QualifiedIdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitQualifiedIdentifier(s)
	}
}

func (p *SimplifiedCqlParser) QualifiedIdentifier() (localctx IQualifiedIdentifierContext) {
	this := p
	_ = this

	localctx = NewQualifiedIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, SimplifiedCqlParserRULE_qualifiedIdentifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(796)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 80, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(793)
			p.KeyspaceName()
		}
		{
			p.SetState(794)
			p.Match(SimplifiedCqlParserT__10)
		}

	}
	{
		p.SetState(798)
		p.Identifier()
	}

	return localctx
}

// IIdentifiersContext is an interface to support dynamic dispatch.
type IIdentifiersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifiersContext differentiates from other interfaces.
	IsIdentifiersContext()
}

type IdentifiersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifiersContext() *IdentifiersContext {
	var p = new(IdentifiersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_identifiers
	return p
}

func (*IdentifiersContext) IsIdentifiersContext() {}

func NewIdentifiersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifiersContext {
	var p = new(IdentifiersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_identifiers

	return p
}

func (s *IdentifiersContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifiersContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *IdentifiersContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *IdentifiersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifiersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifiersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterIdentifiers(s)
	}
}

func (s *IdentifiersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitIdentifiers(s)
	}
}

func (p *SimplifiedCqlParser) Identifiers() (localctx IIdentifiersContext) {
	this := p
	_ = this

	localctx = NewIdentifiersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, SimplifiedCqlParserRULE_identifiers)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(800)
		p.Identifier()
	}
	p.SetState(805)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserT__2 {
		{
			p.SetState(801)
			p.Match(SimplifiedCqlParserT__2)
		}
		{
			p.SetState(802)
			p.Identifier()
		}

		p.SetState(807)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IIdentifierContext is an interface to support dynamic dispatch.
type IIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierContext differentiates from other interfaces.
	IsIdentifierContext()
}

type IdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierContext() *IdentifierContext {
	var p = new(IdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_identifier
	return p
}

func (*IdentifierContext) IsIdentifierContext() {}

func NewIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierContext {
	var p = new(IdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_identifier

	return p
}

func (s *IdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierContext) UNQUOTED_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserUNQUOTED_IDENTIFIER, 0)
}

func (s *IdentifierContext) QUOTED_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserQUOTED_IDENTIFIER, 0)
}

func (s *IdentifierContext) UnreservedKeyword() IUnreservedKeywordContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnreservedKeywordContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnreservedKeywordContext)
}

func (s *IdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterIdentifier(s)
	}
}

func (s *IdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitIdentifier(s)
	}
}

func (p *SimplifiedCqlParser) Identifier() (localctx IIdentifierContext) {
	this := p
	_ = this

	localctx = NewIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, SimplifiedCqlParserRULE_identifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(811)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SimplifiedCqlParserUNQUOTED_IDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(808)
			p.Match(SimplifiedCqlParserUNQUOTED_IDENTIFIER)
		}

	case SimplifiedCqlParserQUOTED_IDENTIFIER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(809)
			p.Match(SimplifiedCqlParserQUOTED_IDENTIFIER)
		}

	case SimplifiedCqlParserK_AS, SimplifiedCqlParserK_ASCII, SimplifiedCqlParserK_BIGINT, SimplifiedCqlParserK_BLOB, SimplifiedCqlParserK_BOOLEAN, SimplifiedCqlParserK_CAST, SimplifiedCqlParserK_CLUSTERING, SimplifiedCqlParserK_CONTAINS, SimplifiedCqlParserK_COUNTER, SimplifiedCqlParserK_COUNT, SimplifiedCqlParserK_DATE, SimplifiedCqlParserK_DECIMAL, SimplifiedCqlParserK_DISTINCT, SimplifiedCqlParserK_DOUBLE, SimplifiedCqlParserK_DURATION, SimplifiedCqlParserK_EXISTS, SimplifiedCqlParserK_FILTERING, SimplifiedCqlParserK_FLOAT, SimplifiedCqlParserK_FROZEN, SimplifiedCqlParserK_GROUP, SimplifiedCqlParserK_INET, SimplifiedCqlParserK_INT, SimplifiedCqlParserK_JSON, SimplifiedCqlParserK_KEY, SimplifiedCqlParserK_LIKE, SimplifiedCqlParserK_LIST, SimplifiedCqlParserK_MAP, SimplifiedCqlParserK_PARTITION, SimplifiedCqlParserK_PER, SimplifiedCqlParserK_SMALLINT, SimplifiedCqlParserK_TEXT, SimplifiedCqlParserK_TIMESTAMP, SimplifiedCqlParserK_TIMEUUID, SimplifiedCqlParserK_TIME, SimplifiedCqlParserK_TINYINT, SimplifiedCqlParserK_TTL, SimplifiedCqlParserK_TUPLE, SimplifiedCqlParserK_TYPE, SimplifiedCqlParserK_UUID, SimplifiedCqlParserK_VALUES, SimplifiedCqlParserK_VARCHAR, SimplifiedCqlParserK_VARINT, SimplifiedCqlParserK_WRITETIME:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(810)
			p.UnreservedKeyword()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IUnreservedKeywordContext is an interface to support dynamic dispatch.
type IUnreservedKeywordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnreservedKeywordContext differentiates from other interfaces.
	IsUnreservedKeywordContext()
}

type UnreservedKeywordContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnreservedKeywordContext() *UnreservedKeywordContext {
	var p = new(UnreservedKeywordContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_unreservedKeyword
	return p
}

func (*UnreservedKeywordContext) IsUnreservedKeywordContext() {}

func NewUnreservedKeywordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnreservedKeywordContext {
	var p = new(UnreservedKeywordContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_unreservedKeyword

	return p
}

func (s *UnreservedKeywordContext) GetParser() antlr.Parser { return s.parser }

func (s *UnreservedKeywordContext) K_AS() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_AS, 0)
}

func (s *UnreservedKeywordContext) K_CAST() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_CAST, 0)
}

func (s *UnreservedKeywordContext) K_CLUSTERING() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_CLUSTERING, 0)
}

func (s *UnreservedKeywordContext) K_CONTAINS() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_CONTAINS, 0)
}

func (s *UnreservedKeywordContext) K_COUNT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_COUNT, 0)
}

func (s *UnreservedKeywordContext) K_DISTINCT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_DISTINCT, 0)
}

func (s *UnreservedKeywordContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_EXISTS, 0)
}

func (s *UnreservedKeywordContext) K_FILTERING() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_FILTERING, 0)
}

func (s *UnreservedKeywordContext) K_FROZEN() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_FROZEN, 0)
}

func (s *UnreservedKeywordContext) K_GROUP() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_GROUP, 0)
}

func (s *UnreservedKeywordContext) K_JSON() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_JSON, 0)
}

func (s *UnreservedKeywordContext) K_KEY() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_KEY, 0)
}

func (s *UnreservedKeywordContext) K_LIKE() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_LIKE, 0)
}

func (s *UnreservedKeywordContext) K_LIST() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_LIST, 0)
}

func (s *UnreservedKeywordContext) K_MAP() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_MAP, 0)
}

func (s *UnreservedKeywordContext) K_PARTITION() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_PARTITION, 0)
}

func (s *UnreservedKeywordContext) K_PER() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_PER, 0)
}

func (s *UnreservedKeywordContext) K_TTL() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_TTL, 0)
}

func (s *UnreservedKeywordContext) K_TUPLE() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_TUPLE, 0)
}

func (s *UnreservedKeywordContext) K_TYPE() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_TYPE, 0)
}

func (s *UnreservedKeywordContext) K_VALUES() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_VALUES, 0)
}

func (s *UnreservedKeywordContext) K_WRITETIME() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_WRITETIME, 0)
}

func (s *UnreservedKeywordContext) PrimitiveType() IPrimitiveTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimitiveTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimitiveTypeContext)
}

func (s *UnreservedKeywordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnreservedKeywordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnreservedKeywordContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterUnreservedKeyword(s)
	}
}

func (s *UnreservedKeywordContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitUnreservedKeyword(s)
	}
}

func (p *SimplifiedCqlParser) UnreservedKeyword() (localctx IUnreservedKeywordContext) {
	this := p
	_ = this

	localctx = NewUnreservedKeywordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, SimplifiedCqlParserRULE_unreservedKeyword)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(836)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SimplifiedCqlParserK_AS:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(813)
			p.Match(SimplifiedCqlParserK_AS)
		}

	case SimplifiedCqlParserK_CAST:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(814)
			p.Match(SimplifiedCqlParserK_CAST)
		}

	case SimplifiedCqlParserK_CLUSTERING:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(815)
			p.Match(SimplifiedCqlParserK_CLUSTERING)
		}

	case SimplifiedCqlParserK_CONTAINS:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(816)
			p.Match(SimplifiedCqlParserK_CONTAINS)
		}

	case SimplifiedCqlParserK_COUNT:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(817)
			p.Match(SimplifiedCqlParserK_COUNT)
		}

	case SimplifiedCqlParserK_DISTINCT:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(818)
			p.Match(SimplifiedCqlParserK_DISTINCT)
		}

	case SimplifiedCqlParserK_EXISTS:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(819)
			p.Match(SimplifiedCqlParserK_EXISTS)
		}

	case SimplifiedCqlParserK_FILTERING:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(820)
			p.Match(SimplifiedCqlParserK_FILTERING)
		}

	case SimplifiedCqlParserK_FROZEN:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(821)
			p.Match(SimplifiedCqlParserK_FROZEN)
		}

	case SimplifiedCqlParserK_GROUP:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(822)
			p.Match(SimplifiedCqlParserK_GROUP)
		}

	case SimplifiedCqlParserK_JSON:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(823)
			p.Match(SimplifiedCqlParserK_JSON)
		}

	case SimplifiedCqlParserK_KEY:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(824)
			p.Match(SimplifiedCqlParserK_KEY)
		}

	case SimplifiedCqlParserK_LIKE:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(825)
			p.Match(SimplifiedCqlParserK_LIKE)
		}

	case SimplifiedCqlParserK_LIST:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(826)
			p.Match(SimplifiedCqlParserK_LIST)
		}

	case SimplifiedCqlParserK_MAP:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(827)
			p.Match(SimplifiedCqlParserK_MAP)
		}

	case SimplifiedCqlParserK_PARTITION:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(828)
			p.Match(SimplifiedCqlParserK_PARTITION)
		}

	case SimplifiedCqlParserK_PER:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(829)
			p.Match(SimplifiedCqlParserK_PER)
		}

	case SimplifiedCqlParserK_TTL:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(830)
			p.Match(SimplifiedCqlParserK_TTL)
		}

	case SimplifiedCqlParserK_TUPLE:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(831)
			p.Match(SimplifiedCqlParserK_TUPLE)
		}

	case SimplifiedCqlParserK_TYPE:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(832)
			p.Match(SimplifiedCqlParserK_TYPE)
		}

	case SimplifiedCqlParserK_VALUES:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(833)
			p.Match(SimplifiedCqlParserK_VALUES)
		}

	case SimplifiedCqlParserK_WRITETIME:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(834)
			p.Match(SimplifiedCqlParserK_WRITETIME)
		}

	case SimplifiedCqlParserK_ASCII, SimplifiedCqlParserK_BIGINT, SimplifiedCqlParserK_BLOB, SimplifiedCqlParserK_BOOLEAN, SimplifiedCqlParserK_COUNTER, SimplifiedCqlParserK_DATE, SimplifiedCqlParserK_DECIMAL, SimplifiedCqlParserK_DOUBLE, SimplifiedCqlParserK_DURATION, SimplifiedCqlParserK_FLOAT, SimplifiedCqlParserK_INET, SimplifiedCqlParserK_INT, SimplifiedCqlParserK_SMALLINT, SimplifiedCqlParserK_TEXT, SimplifiedCqlParserK_TIMESTAMP, SimplifiedCqlParserK_TIMEUUID, SimplifiedCqlParserK_TIME, SimplifiedCqlParserK_TINYINT, SimplifiedCqlParserK_UUID, SimplifiedCqlParserK_VARCHAR, SimplifiedCqlParserK_VARINT:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(835)
			p.PrimitiveType()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IUnrecognizedStatementContext is an interface to support dynamic dispatch.
type IUnrecognizedStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnrecognizedStatementContext differentiates from other interfaces.
	IsUnrecognizedStatementContext()
}

type UnrecognizedStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnrecognizedStatementContext() *UnrecognizedStatementContext {
	var p = new(UnrecognizedStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_unrecognizedStatement
	return p
}

func (*UnrecognizedStatementContext) IsUnrecognizedStatementContext() {}

func NewUnrecognizedStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnrecognizedStatementContext {
	var p = new(UnrecognizedStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_unrecognizedStatement

	return p
}

func (s *UnrecognizedStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *UnrecognizedStatementContext) AllUnrecognizedToken() []IUnrecognizedTokenContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUnrecognizedTokenContext)(nil)).Elem())
	var tst = make([]IUnrecognizedTokenContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUnrecognizedTokenContext)
		}
	}

	return tst
}

func (s *UnrecognizedStatementContext) UnrecognizedToken(i int) IUnrecognizedTokenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnrecognizedTokenContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUnrecognizedTokenContext)
}

func (s *UnrecognizedStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnrecognizedStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnrecognizedStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterUnrecognizedStatement(s)
	}
}

func (s *UnrecognizedStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitUnrecognizedStatement(s)
	}
}

func (p *SimplifiedCqlParser) UnrecognizedStatement() (localctx IUnrecognizedStatementContext) {
	this := p
	_ = this

	localctx = NewUnrecognizedStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, SimplifiedCqlParserRULE_unrecognizedStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(841)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 84, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(838)
				p.UnrecognizedToken()
			}

		}
		p.SetState(843)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 84, p.GetParserRuleContext())
	}

	return localctx
}

// IUnrecognizedTokenContext is an interface to support dynamic dispatch.
type IUnrecognizedTokenContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnrecognizedTokenContext differentiates from other interfaces.
	IsUnrecognizedTokenContext()
}

type UnrecognizedTokenContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnrecognizedTokenContext() *UnrecognizedTokenContext {
	var p = new(UnrecognizedTokenContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_unrecognizedToken
	return p
}

func (*UnrecognizedTokenContext) IsUnrecognizedTokenContext() {}

func NewUnrecognizedTokenContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnrecognizedTokenContext {
	var p = new(UnrecognizedTokenContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_unrecognizedToken

	return p
}

func (s *UnrecognizedTokenContext) GetParser() antlr.Parser { return s.parser }
func (s *UnrecognizedTokenContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnrecognizedTokenContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnrecognizedTokenContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterUnrecognizedToken(s)
	}
}

func (s *UnrecognizedTokenContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitUnrecognizedToken(s)
	}
}

func (p *SimplifiedCqlParser) UnrecognizedToken() (localctx IUnrecognizedTokenContext) {
	this := p
	_ = this

	localctx = NewUnrecognizedTokenContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, SimplifiedCqlParserRULE_unrecognizedToken)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(844)
	p.MatchWildcard()

	return localctx
}
