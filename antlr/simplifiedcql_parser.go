// Code generated from antlr/SimplifiedCql.g4 by ANTLR 4.13.1. DO NOT EDIT.

package parser // SimplifiedCql

import (
	"fmt"
	"strconv"
	"sync"

	"github.com/antlr4-go/antlr/v4"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = strconv.Itoa
var _ = sync.Once{}

type SimplifiedCqlParser struct {
	*antlr.BaseParser
}

var SimplifiedCqlParserStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func simplifiedcqlParserInit() {
	staticData := &SimplifiedCqlParserStaticData
	staticData.LiteralNames = []string{
		"", "'('", "')'", "','", "'='", "'+'", "'-'", "'+='", "'-='", "'['",
		"']'", "'.'", "'*'", "'<'", "'<='", "'>'", "'>='", "'!='", "':'", "'{'",
		"'}'", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "'?'", "", "", "", "", "", "",
		"", "", "", "';'",
	}
	staticData.SymbolicNames = []string{
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "K_ALLOW", "K_AND", "K_APPLY", "K_ASC", "K_AS", "K_ASCII",
		"K_BATCH", "K_BEGIN", "K_BIGINT", "K_BLOB", "K_BOOLEAN", "K_BY", "K_CALL",
		"K_CAST", "K_CLUSTERING", "K_CONTAINS", "K_COUNTER", "K_COUNT", "K_DATE",
		"K_DECIMAL", "K_DELETE", "K_DESC", "K_DISTINCT", "K_DOUBLE", "K_DURATION",
		"K_EXISTS", "K_FILTERING", "K_FLOAT", "K_FROM", "K_FROZEN", "K_GROUP",
		"K_IF", "K_INET", "K_INFINITY", "K_INSERT", "K_INTO", "K_INT", "K_IN",
		"K_IS", "K_JSON", "K_KEY", "K_LIKE", "K_LIMIT", "K_LIST", "K_MAP", "K_NAN",
		"K_NOT", "K_NULL", "K_OR", "K_ORDER", "K_PARTITION", "K_PER", "K_SELECT",
		"K_SET", "K_SMALLINT", "K_TEXT", "K_TIMESTAMP", "K_TIMEUUID", "K_TIME",
		"K_TINYINT", "K_TOKEN", "K_TTL", "K_TUPLE", "K_TYPE", "K_UNLOGGED",
		"K_UPDATE", "K_USE", "K_USING", "K_UUID", "K_VALUES", "K_VARCHAR", "K_VARINT",
		"K_WHERE", "K_WRITETIME", "STRING_LITERAL", "QUOTED_IDENTIFIER", "INTEGER",
		"QMARK", "FLOAT", "BOOLEAN", "DURATION", "UNQUOTED_IDENTIFIER", "HEXNUMBER",
		"UUID", "WS", "COMMENT", "MULTILINE_COMMENT", "EOS", "OTHER",
	}
	staticData.RuleNames = []string{
		"cqlStatement", "insertStatement", "updateStatement", "updateOperations",
		"updateOperation", "deleteStatement", "deleteOperations", "deleteOperation",
		"batchStatement", "batchChildStatement", "selectStatement", "selectClause",
		"selectors", "selector", "unaliasedSelector", "useStatement", "callStatement",
		"orderByClause", "orderings", "ordering", "groupByClause", "perPartitionLimitClause",
		"limitClause", "usingClause", "timestamp", "ttl", "conditions", "condition",
		"whereClause", "logicalOperator", "relation", "operator", "literal",
		"primitiveLiteral", "collectionLiteral", "listLiteral", "setLiteral",
		"mapLiteral", "mapEntries", "mapEntry", "tupleLiterals", "tupleLiteral",
		"udtLiteral", "fieldLiterals", "fieldLiteral", "functionCall", "functionArgs",
		"functionArg", "bindMarkers", "bindMarker", "positionalBindMarker",
		"namedBindMarker", "terms", "term", "typeCast", "cqlType", "primitiveType",
		"collectionType", "tupleType", "tableName", "functionName", "userTypeName",
		"keyspaceName", "qualifiedIdentifier", "identifiers", "identifier",
		"unreservedKeyword", "unrecognizedStatement", "unrecognizedToken",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 1, 109, 863, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7,
		4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7,
		10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15,
		2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2,
		21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26,
		7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7,
		31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 36,
		2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41, 2,
		42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2, 47,
		7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52, 7,
		52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7, 57,
		2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62, 2,
		63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2, 68,
		7, 68, 1, 0, 1, 0, 3, 0, 141, 8, 0, 1, 0, 1, 0, 3, 0, 145, 8, 0, 1, 0,
		1, 0, 3, 0, 149, 8, 0, 1, 0, 1, 0, 3, 0, 153, 8, 0, 1, 0, 1, 0, 3, 0, 157,
		8, 0, 1, 0, 1, 0, 3, 0, 161, 8, 0, 1, 0, 1, 0, 3, 0, 165, 8, 0, 1, 0, 1,
		0, 3, 0, 169, 8, 0, 3, 0, 171, 8, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 186, 8, 1, 1, 1, 3, 1,
		189, 8, 1, 1, 2, 1, 2, 1, 2, 3, 2, 194, 8, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
		2, 1, 2, 3, 2, 202, 8, 2, 3, 2, 204, 8, 2, 1, 3, 1, 3, 1, 3, 5, 3, 209,
		8, 3, 10, 3, 12, 3, 212, 9, 3, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 3, 4, 219,
		8, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4,
		1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4,
		3, 4, 244, 8, 4, 1, 5, 1, 5, 3, 5, 248, 8, 5, 1, 5, 1, 5, 1, 5, 1, 5, 3,
		5, 254, 8, 5, 1, 5, 1, 5, 1, 5, 1, 5, 3, 5, 260, 8, 5, 3, 5, 262, 8, 5,
		1, 6, 1, 6, 1, 6, 5, 6, 267, 8, 6, 10, 6, 12, 6, 270, 9, 6, 1, 7, 1, 7,
		1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 3, 7, 282, 8, 7, 1, 8,
		1, 8, 3, 8, 286, 8, 8, 1, 8, 1, 8, 3, 8, 290, 8, 8, 1, 8, 1, 8, 3, 8, 294,
		8, 8, 5, 8, 296, 8, 8, 10, 8, 12, 8, 299, 9, 8, 1, 8, 1, 8, 1, 8, 1, 9,
		1, 9, 1, 9, 3, 9, 307, 8, 9, 1, 10, 1, 10, 3, 10, 311, 8, 10, 1, 10, 3,
		10, 314, 8, 10, 1, 10, 1, 10, 1, 10, 1, 10, 3, 10, 320, 8, 10, 1, 10, 3,
		10, 323, 8, 10, 1, 10, 3, 10, 326, 8, 10, 1, 10, 3, 10, 329, 8, 10, 1,
		10, 3, 10, 332, 8, 10, 1, 10, 1, 10, 3, 10, 336, 8, 10, 1, 11, 1, 11, 3,
		11, 340, 8, 11, 1, 12, 1, 12, 1, 12, 5, 12, 345, 8, 12, 10, 12, 12, 12,
		348, 9, 12, 1, 13, 1, 13, 1, 13, 3, 13, 353, 8, 13, 1, 14, 1, 14, 1, 14,
		1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 3,
		14, 368, 8, 14, 1, 15, 1, 15, 1, 15, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16,
		1, 16, 3, 16, 379, 8, 16, 1, 16, 1, 16, 1, 17, 1, 17, 1, 17, 1, 17, 1,
		18, 1, 18, 1, 18, 5, 18, 390, 8, 18, 10, 18, 12, 18, 393, 9, 18, 1, 19,
		1, 19, 3, 19, 397, 8, 19, 1, 20, 1, 20, 1, 20, 1, 20, 1, 21, 1, 21, 1,
		21, 1, 21, 1, 21, 3, 21, 408, 8, 21, 1, 22, 1, 22, 1, 22, 3, 22, 413, 8,
		22, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23,
		1, 23, 1, 23, 1, 23, 1, 23, 3, 23, 429, 8, 23, 1, 24, 1, 24, 1, 24, 3,
		24, 434, 8, 24, 1, 25, 1, 25, 1, 25, 3, 25, 439, 8, 25, 1, 26, 1, 26, 1,
		26, 5, 26, 444, 8, 26, 10, 26, 12, 26, 447, 9, 26, 1, 27, 1, 27, 1, 27,
		1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 3, 27, 457, 8, 27, 1, 27, 1, 27, 3,
		27, 461, 8, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27,
		1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 3, 27, 477, 8, 27, 1, 27, 1,
		27, 3, 27, 481, 8, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27,
		1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 3, 27, 495, 8, 27, 1, 27, 1, 27, 3,
		27, 499, 8, 27, 3, 27, 501, 8, 27, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 5,
		28, 508, 8, 28, 10, 28, 12, 28, 511, 9, 28, 1, 29, 1, 29, 1, 30, 1, 30,
		1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1,
		30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30,
		3, 30, 538, 8, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1,
		30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 3, 30, 553, 8, 30, 1, 30, 1, 30,
		3, 30, 557, 8, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1,
		30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30,
		1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1,
		30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30,
		1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1,
		30, 1, 30, 1, 30, 1, 30, 3, 30, 612, 8, 30, 1, 31, 1, 31, 1, 32, 1, 32,
		1, 32, 1, 32, 1, 32, 3, 32, 621, 8, 32, 1, 33, 1, 33, 1, 33, 1, 33, 1,
		33, 1, 33, 1, 33, 1, 33, 3, 33, 631, 8, 33, 1, 33, 1, 33, 3, 33, 635, 8,
		33, 1, 33, 3, 33, 638, 8, 33, 1, 34, 1, 34, 1, 34, 3, 34, 643, 8, 34, 1,
		35, 1, 35, 3, 35, 647, 8, 35, 1, 35, 1, 35, 1, 36, 1, 36, 3, 36, 653, 8,
		36, 1, 36, 1, 36, 1, 37, 1, 37, 3, 37, 659, 8, 37, 1, 37, 1, 37, 1, 38,
		1, 38, 1, 38, 5, 38, 666, 8, 38, 10, 38, 12, 38, 669, 9, 38, 1, 39, 1,
		39, 1, 39, 1, 39, 1, 40, 1, 40, 1, 40, 5, 40, 678, 8, 40, 10, 40, 12, 40,
		681, 9, 40, 1, 41, 1, 41, 1, 41, 1, 41, 1, 42, 1, 42, 1, 42, 1, 42, 1,
		43, 1, 43, 1, 43, 5, 43, 694, 8, 43, 10, 43, 12, 43, 697, 9, 43, 1, 44,
		1, 44, 1, 44, 1, 44, 1, 45, 1, 45, 1, 45, 3, 45, 706, 8, 45, 1, 45, 1,
		45, 1, 46, 1, 46, 1, 46, 5, 46, 713, 8, 46, 10, 46, 12, 46, 716, 9, 46,
		1, 47, 1, 47, 3, 47, 720, 8, 47, 1, 48, 1, 48, 1, 48, 5, 48, 725, 8, 48,
		10, 48, 12, 48, 728, 9, 48, 1, 49, 1, 49, 3, 49, 732, 8, 49, 1, 50, 1,
		50, 1, 51, 1, 51, 1, 51, 1, 52, 1, 52, 1, 52, 5, 52, 742, 8, 52, 10, 52,
		12, 52, 745, 9, 52, 1, 53, 1, 53, 1, 53, 1, 53, 3, 53, 751, 8, 53, 1, 54,
		1, 54, 1, 54, 1, 54, 1, 54, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1,
		55, 1, 55, 1, 55, 3, 55, 767, 8, 55, 1, 56, 1, 56, 1, 57, 1, 57, 1, 57,
		1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1,
		57, 1, 57, 1, 57, 1, 57, 3, 57, 788, 8, 57, 1, 58, 1, 58, 1, 58, 1, 58,
		1, 58, 5, 58, 795, 8, 58, 10, 58, 12, 58, 798, 9, 58, 1, 58, 1, 58, 1,
		59, 1, 59, 1, 60, 1, 60, 1, 61, 1, 61, 1, 62, 1, 62, 1, 63, 1, 63, 1, 63,
		3, 63, 813, 8, 63, 1, 63, 1, 63, 1, 64, 1, 64, 1, 64, 5, 64, 820, 8, 64,
		10, 64, 12, 64, 823, 9, 64, 1, 65, 1, 65, 1, 65, 3, 65, 828, 8, 65, 1,
		66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66,
		1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1,
		66, 1, 66, 3, 66, 853, 8, 66, 1, 67, 5, 67, 856, 8, 67, 10, 67, 12, 67,
		859, 9, 67, 1, 68, 1, 68, 1, 68, 0, 0, 69, 0, 2, 4, 6, 8, 10, 12, 14, 16,
		18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52,
		54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88,
		90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120,
		122, 124, 126, 128, 130, 132, 134, 136, 0, 7, 1, 0, 5, 6, 1, 0, 7, 8, 2,
		0, 37, 37, 85, 85, 2, 0, 24, 24, 42, 42, 2, 0, 22, 22, 69, 69, 2, 0, 4,
		4, 13, 18, 11, 0, 26, 26, 29, 31, 37, 37, 39, 40, 44, 45, 48, 48, 53, 53,
		57, 57, 75, 80, 89, 89, 91, 92, 951, 0, 170, 1, 0, 0, 0, 2, 172, 1, 0,
		0, 0, 4, 190, 1, 0, 0, 0, 6, 205, 1, 0, 0, 0, 8, 243, 1, 0, 0, 0, 10, 245,
		1, 0, 0, 0, 12, 263, 1, 0, 0, 0, 14, 281, 1, 0, 0, 0, 16, 283, 1, 0, 0,
		0, 18, 306, 1, 0, 0, 0, 20, 308, 1, 0, 0, 0, 22, 339, 1, 0, 0, 0, 24, 341,
		1, 0, 0, 0, 26, 349, 1, 0, 0, 0, 28, 367, 1, 0, 0, 0, 30, 369, 1, 0, 0,
		0, 32, 372, 1, 0, 0, 0, 34, 382, 1, 0, 0, 0, 36, 386, 1, 0, 0, 0, 38, 394,
		1, 0, 0, 0, 40, 398, 1, 0, 0, 0, 42, 402, 1, 0, 0, 0, 44, 409, 1, 0, 0,
		0, 46, 428, 1, 0, 0, 0, 48, 430, 1, 0, 0, 0, 50, 435, 1, 0, 0, 0, 52, 440,
		1, 0, 0, 0, 54, 500, 1, 0, 0, 0, 56, 502, 1, 0, 0, 0, 58, 512, 1, 0, 0,
		0, 60, 611, 1, 0, 0, 0, 62, 613, 1, 0, 0, 0, 64, 620, 1, 0, 0, 0, 66, 637,
		1, 0, 0, 0, 68, 642, 1, 0, 0, 0, 70, 644, 1, 0, 0, 0, 72, 650, 1, 0, 0,
		0, 74, 656, 1, 0, 0, 0, 76, 662, 1, 0, 0, 0, 78, 670, 1, 0, 0, 0, 80, 674,
		1, 0, 0, 0, 82, 682, 1, 0, 0, 0, 84, 686, 1, 0, 0, 0, 86, 690, 1, 0, 0,
		0, 88, 698, 1, 0, 0, 0, 90, 702, 1, 0, 0, 0, 92, 709, 1, 0, 0, 0, 94, 719,
		1, 0, 0, 0, 96, 721, 1, 0, 0, 0, 98, 731, 1, 0, 0, 0, 100, 733, 1, 0, 0,
		0, 102, 735, 1, 0, 0, 0, 104, 738, 1, 0, 0, 0, 106, 750, 1, 0, 0, 0, 108,
		752, 1, 0, 0, 0, 110, 766, 1, 0, 0, 0, 112, 768, 1, 0, 0, 0, 114, 787,
		1, 0, 0, 0, 116, 789, 1, 0, 0, 0, 118, 801, 1, 0, 0, 0, 120, 803, 1, 0,
		0, 0, 122, 805, 1, 0, 0, 0, 124, 807, 1, 0, 0, 0, 126, 812, 1, 0, 0, 0,
		128, 816, 1, 0, 0, 0, 130, 827, 1, 0, 0, 0, 132, 852, 1, 0, 0, 0, 134,
		857, 1, 0, 0, 0, 136, 860, 1, 0, 0, 0, 138, 140, 3, 2, 1, 0, 139, 141,
		5, 108, 0, 0, 140, 139, 1, 0, 0, 0, 140, 141, 1, 0, 0, 0, 141, 171, 1,
		0, 0, 0, 142, 144, 3, 4, 2, 0, 143, 145, 5, 108, 0, 0, 144, 143, 1, 0,
		0, 0, 144, 145, 1, 0, 0, 0, 145, 171, 1, 0, 0, 0, 146, 148, 3, 10, 5, 0,
		147, 149, 5, 108, 0, 0, 148, 147, 1, 0, 0, 0, 148, 149, 1, 0, 0, 0, 149,
		171, 1, 0, 0, 0, 150, 152, 3, 16, 8, 0, 151, 153, 5, 108, 0, 0, 152, 151,
		1, 0, 0, 0, 152, 153, 1, 0, 0, 0, 153, 171, 1, 0, 0, 0, 154, 156, 3, 20,
		10, 0, 155, 157, 5, 108, 0, 0, 156, 155, 1, 0, 0, 0, 156, 157, 1, 0, 0,
		0, 157, 171, 1, 0, 0, 0, 158, 160, 3, 30, 15, 0, 159, 161, 5, 108, 0, 0,
		160, 159, 1, 0, 0, 0, 160, 161, 1, 0, 0, 0, 161, 171, 1, 0, 0, 0, 162,
		164, 3, 32, 16, 0, 163, 165, 5, 108, 0, 0, 164, 163, 1, 0, 0, 0, 164, 165,
		1, 0, 0, 0, 165, 171, 1, 0, 0, 0, 166, 168, 3, 134, 67, 0, 167, 169, 5,
		108, 0, 0, 168, 167, 1, 0, 0, 0, 168, 169, 1, 0, 0, 0, 169, 171, 1, 0,
		0, 0, 170, 138, 1, 0, 0, 0, 170, 142, 1, 0, 0, 0, 170, 146, 1, 0, 0, 0,
		170, 150, 1, 0, 0, 0, 170, 154, 1, 0, 0, 0, 170, 158, 1, 0, 0, 0, 170,
		162, 1, 0, 0, 0, 170, 166, 1, 0, 0, 0, 171, 1, 1, 0, 0, 0, 172, 173, 5,
		55, 0, 0, 173, 174, 5, 56, 0, 0, 174, 175, 3, 118, 59, 0, 175, 176, 5,
		1, 0, 0, 176, 177, 3, 128, 64, 0, 177, 178, 5, 2, 0, 0, 178, 179, 5, 90,
		0, 0, 179, 180, 5, 1, 0, 0, 180, 181, 3, 104, 52, 0, 181, 185, 5, 2, 0,
		0, 182, 183, 5, 52, 0, 0, 183, 184, 5, 67, 0, 0, 184, 186, 5, 46, 0, 0,
		185, 182, 1, 0, 0, 0, 185, 186, 1, 0, 0, 0, 186, 188, 1, 0, 0, 0, 187,
		189, 3, 46, 23, 0, 188, 187, 1, 0, 0, 0, 188, 189, 1, 0, 0, 0, 189, 3,
		1, 0, 0, 0, 190, 191, 5, 86, 0, 0, 191, 193, 3, 118, 59, 0, 192, 194, 3,
		46, 23, 0, 193, 192, 1, 0, 0, 0, 193, 194, 1, 0, 0, 0, 194, 195, 1, 0,
		0, 0, 195, 196, 5, 74, 0, 0, 196, 197, 3, 6, 3, 0, 197, 203, 3, 56, 28,
		0, 198, 201, 5, 52, 0, 0, 199, 202, 5, 46, 0, 0, 200, 202, 3, 52, 26, 0,
		201, 199, 1, 0, 0, 0, 201, 200, 1, 0, 0, 0, 202, 204, 1, 0, 0, 0, 203,
		198, 1, 0, 0, 0, 203, 204, 1, 0, 0, 0, 204, 5, 1, 0, 0, 0, 205, 210, 3,
		8, 4, 0, 206, 207, 5, 3, 0, 0, 207, 209, 3, 8, 4, 0, 208, 206, 1, 0, 0,
		0, 209, 212, 1, 0, 0, 0, 210, 208, 1, 0, 0, 0, 210, 211, 1, 0, 0, 0, 211,
		7, 1, 0, 0, 0, 212, 210, 1, 0, 0, 0, 213, 214, 3, 130, 65, 0, 214, 215,
		5, 4, 0, 0, 215, 218, 3, 106, 53, 0, 216, 217, 5, 5, 0, 0, 217, 219, 3,
		130, 65, 0, 218, 216, 1, 0, 0, 0, 218, 219, 1, 0, 0, 0, 219, 244, 1, 0,
		0, 0, 220, 221, 3, 130, 65, 0, 221, 222, 5, 4, 0, 0, 222, 223, 3, 130,
		65, 0, 223, 224, 7, 0, 0, 0, 224, 225, 3, 106, 53, 0, 225, 244, 1, 0, 0,
		0, 226, 227, 3, 130, 65, 0, 227, 228, 7, 1, 0, 0, 228, 229, 3, 106, 53,
		0, 229, 244, 1, 0, 0, 0, 230, 231, 3, 130, 65, 0, 231, 232, 5, 9, 0, 0,
		232, 233, 3, 106, 53, 0, 233, 234, 5, 10, 0, 0, 234, 235, 5, 4, 0, 0, 235,
		236, 3, 106, 53, 0, 236, 244, 1, 0, 0, 0, 237, 238, 3, 130, 65, 0, 238,
		239, 5, 11, 0, 0, 239, 240, 3, 130, 65, 0, 240, 241, 5, 4, 0, 0, 241, 242,
		3, 106, 53, 0, 242, 244, 1, 0, 0, 0, 243, 213, 1, 0, 0, 0, 243, 220, 1,
		0, 0, 0, 243, 226, 1, 0, 0, 0, 243, 230, 1, 0, 0, 0, 243, 237, 1, 0, 0,
		0, 244, 9, 1, 0, 0, 0, 245, 247, 5, 41, 0, 0, 246, 248, 3, 12, 6, 0, 247,
		246, 1, 0, 0, 0, 247, 248, 1, 0, 0, 0, 248, 249, 1, 0, 0, 0, 249, 250,
		5, 49, 0, 0, 250, 253, 3, 118, 59, 0, 251, 252, 5, 88, 0, 0, 252, 254,
		3, 48, 24, 0, 253, 251, 1, 0, 0, 0, 253, 254, 1, 0, 0, 0, 254, 255, 1,
		0, 0, 0, 255, 261, 3, 56, 28, 0, 256, 259, 5, 52, 0, 0, 257, 260, 5, 46,
		0, 0, 258, 260, 3, 52, 26, 0, 259, 257, 1, 0, 0, 0, 259, 258, 1, 0, 0,
		0, 260, 262, 1, 0, 0, 0, 261, 256, 1, 0, 0, 0, 261, 262, 1, 0, 0, 0, 262,
		11, 1, 0, 0, 0, 263, 268, 3, 14, 7, 0, 264, 265, 5, 3, 0, 0, 265, 267,
		3, 14, 7, 0, 266, 264, 1, 0, 0, 0, 267, 270, 1, 0, 0, 0, 268, 266, 1, 0,
		0, 0, 268, 269, 1, 0, 0, 0, 269, 13, 1, 0, 0, 0, 270, 268, 1, 0, 0, 0,
		271, 282, 3, 130, 65, 0, 272, 273, 3, 130, 65, 0, 273, 274, 5, 9, 0, 0,
		274, 275, 3, 106, 53, 0, 275, 276, 5, 10, 0, 0, 276, 282, 1, 0, 0, 0, 277,
		278, 3, 130, 65, 0, 278, 279, 5, 11, 0, 0, 279, 280, 3, 130, 65, 0, 280,
		282, 1, 0, 0, 0, 281, 271, 1, 0, 0, 0, 281, 272, 1, 0, 0, 0, 281, 277,
		1, 0, 0, 0, 282, 15, 1, 0, 0, 0, 283, 285, 5, 28, 0, 0, 284, 286, 7, 2,
		0, 0, 285, 284, 1, 0, 0, 0, 285, 286, 1, 0, 0, 0, 286, 287, 1, 0, 0, 0,
		287, 289, 5, 27, 0, 0, 288, 290, 3, 46, 23, 0, 289, 288, 1, 0, 0, 0, 289,
		290, 1, 0, 0, 0, 290, 297, 1, 0, 0, 0, 291, 293, 3, 18, 9, 0, 292, 294,
		5, 108, 0, 0, 293, 292, 1, 0, 0, 0, 293, 294, 1, 0, 0, 0, 294, 296, 1,
		0, 0, 0, 295, 291, 1, 0, 0, 0, 296, 299, 1, 0, 0, 0, 297, 295, 1, 0, 0,
		0, 297, 298, 1, 0, 0, 0, 298, 300, 1, 0, 0, 0, 299, 297, 1, 0, 0, 0, 300,
		301, 5, 23, 0, 0, 301, 302, 5, 27, 0, 0, 302, 17, 1, 0, 0, 0, 303, 307,
		3, 2, 1, 0, 304, 307, 3, 4, 2, 0, 305, 307, 3, 10, 5, 0, 306, 303, 1, 0,
		0, 0, 306, 304, 1, 0, 0, 0, 306, 305, 1, 0, 0, 0, 307, 19, 1, 0, 0, 0,
		308, 310, 5, 73, 0, 0, 309, 311, 5, 60, 0, 0, 310, 309, 1, 0, 0, 0, 310,
		311, 1, 0, 0, 0, 311, 313, 1, 0, 0, 0, 312, 314, 5, 43, 0, 0, 313, 312,
		1, 0, 0, 0, 313, 314, 1, 0, 0, 0, 314, 315, 1, 0, 0, 0, 315, 316, 3, 22,
		11, 0, 316, 317, 5, 49, 0, 0, 317, 319, 3, 118, 59, 0, 318, 320, 3, 56,
		28, 0, 319, 318, 1, 0, 0, 0, 319, 320, 1, 0, 0, 0, 320, 322, 1, 0, 0, 0,
		321, 323, 3, 40, 20, 0, 322, 321, 1, 0, 0, 0, 322, 323, 1, 0, 0, 0, 323,
		325, 1, 0, 0, 0, 324, 326, 3, 34, 17, 0, 325, 324, 1, 0, 0, 0, 325, 326,
		1, 0, 0, 0, 326, 328, 1, 0, 0, 0, 327, 329, 3, 42, 21, 0, 328, 327, 1,
		0, 0, 0, 328, 329, 1, 0, 0, 0, 329, 331, 1, 0, 0, 0, 330, 332, 3, 44, 22,
		0, 331, 330, 1, 0, 0, 0, 331, 332, 1, 0, 0, 0, 332, 335, 1, 0, 0, 0, 333,
		334, 5, 21, 0, 0, 334, 336, 5, 47, 0, 0, 335, 333, 1, 0, 0, 0, 335, 336,
		1, 0, 0, 0, 336, 21, 1, 0, 0, 0, 337, 340, 5, 12, 0, 0, 338, 340, 3, 24,
		12, 0, 339, 337, 1, 0, 0, 0, 339, 338, 1, 0, 0, 0, 340, 23, 1, 0, 0, 0,
		341, 346, 3, 26, 13, 0, 342, 343, 5, 3, 0, 0, 343, 345, 3, 26, 13, 0, 344,
		342, 1, 0, 0, 0, 345, 348, 1, 0, 0, 0, 346, 344, 1, 0, 0, 0, 346, 347,
		1, 0, 0, 0, 347, 25, 1, 0, 0, 0, 348, 346, 1, 0, 0, 0, 349, 352, 3, 28,
		14, 0, 350, 351, 5, 25, 0, 0, 351, 353, 3, 130, 65, 0, 352, 350, 1, 0,
		0, 0, 352, 353, 1, 0, 0, 0, 353, 27, 1, 0, 0, 0, 354, 368, 3, 130, 65,
		0, 355, 368, 3, 106, 53, 0, 356, 357, 5, 38, 0, 0, 357, 358, 5, 1, 0, 0,
		358, 359, 5, 12, 0, 0, 359, 368, 5, 2, 0, 0, 360, 361, 5, 34, 0, 0, 361,
		362, 5, 1, 0, 0, 362, 363, 3, 28, 14, 0, 363, 364, 5, 25, 0, 0, 364, 365,
		3, 112, 56, 0, 365, 366, 5, 2, 0, 0, 366, 368, 1, 0, 0, 0, 367, 354, 1,
		0, 0, 0, 367, 355, 1, 0, 0, 0, 367, 356, 1, 0, 0, 0, 367, 360, 1, 0, 0,
		0, 368, 29, 1, 0, 0, 0, 369, 370, 5, 87, 0, 0, 370, 371, 3, 124, 62, 0,
		371, 31, 1, 0, 0, 0, 372, 373, 5, 33, 0, 0, 373, 374, 3, 130, 65, 0, 374,
		375, 5, 11, 0, 0, 375, 376, 3, 130, 65, 0, 376, 378, 5, 1, 0, 0, 377, 379,
		3, 104, 52, 0, 378, 377, 1, 0, 0, 0, 378, 379, 1, 0, 0, 0, 379, 380, 1,
		0, 0, 0, 380, 381, 5, 2, 0, 0, 381, 33, 1, 0, 0, 0, 382, 383, 5, 70, 0,
		0, 383, 384, 5, 32, 0, 0, 384, 385, 3, 36, 18, 0, 385, 35, 1, 0, 0, 0,
		386, 391, 3, 38, 19, 0, 387, 388, 5, 3, 0, 0, 388, 390, 3, 38, 19, 0, 389,
		387, 1, 0, 0, 0, 390, 393, 1, 0, 0, 0, 391, 389, 1, 0, 0, 0, 391, 392,
		1, 0, 0, 0, 392, 37, 1, 0, 0, 0, 393, 391, 1, 0, 0, 0, 394, 396, 3, 130,
		65, 0, 395, 397, 7, 3, 0, 0, 396, 395, 1, 0, 0, 0, 396, 397, 1, 0, 0, 0,
		397, 39, 1, 0, 0, 0, 398, 399, 5, 51, 0, 0, 399, 400, 5, 32, 0, 0, 400,
		401, 3, 128, 64, 0, 401, 41, 1, 0, 0, 0, 402, 403, 5, 72, 0, 0, 403, 404,
		5, 71, 0, 0, 404, 407, 5, 63, 0, 0, 405, 408, 5, 97, 0, 0, 406, 408, 3,
		98, 49, 0, 407, 405, 1, 0, 0, 0, 407, 406, 1, 0, 0, 0, 408, 43, 1, 0, 0,
		0, 409, 412, 5, 63, 0, 0, 410, 413, 5, 97, 0, 0, 411, 413, 3, 98, 49, 0,
		412, 410, 1, 0, 0, 0, 412, 411, 1, 0, 0, 0, 413, 45, 1, 0, 0, 0, 414, 415,
		5, 88, 0, 0, 415, 429, 3, 48, 24, 0, 416, 417, 5, 88, 0, 0, 417, 429, 3,
		50, 25, 0, 418, 419, 5, 88, 0, 0, 419, 420, 3, 48, 24, 0, 420, 421, 5,
		22, 0, 0, 421, 422, 3, 50, 25, 0, 422, 429, 1, 0, 0, 0, 423, 424, 5, 88,
		0, 0, 424, 425, 3, 50, 25, 0, 425, 426, 5, 22, 0, 0, 426, 427, 3, 48, 24,
		0, 427, 429, 1, 0, 0, 0, 428, 414, 1, 0, 0, 0, 428, 416, 1, 0, 0, 0, 428,
		418, 1, 0, 0, 0, 428, 423, 1, 0, 0, 0, 429, 47, 1, 0, 0, 0, 430, 433, 5,
		77, 0, 0, 431, 434, 5, 97, 0, 0, 432, 434, 3, 98, 49, 0, 433, 431, 1, 0,
		0, 0, 433, 432, 1, 0, 0, 0, 434, 49, 1, 0, 0, 0, 435, 438, 5, 82, 0, 0,
		436, 439, 5, 97, 0, 0, 437, 439, 3, 98, 49, 0, 438, 436, 1, 0, 0, 0, 438,
		437, 1, 0, 0, 0, 439, 51, 1, 0, 0, 0, 440, 445, 3, 54, 27, 0, 441, 442,
		5, 22, 0, 0, 442, 444, 3, 54, 27, 0, 443, 441, 1, 0, 0, 0, 444, 447, 1,
		0, 0, 0, 445, 443, 1, 0, 0, 0, 445, 446, 1, 0, 0, 0, 446, 53, 1, 0, 0,
		0, 447, 445, 1, 0, 0, 0, 448, 449, 3, 130, 65, 0, 449, 450, 3, 62, 31,
		0, 450, 451, 3, 106, 53, 0, 451, 501, 1, 0, 0, 0, 452, 453, 3, 130, 65,
		0, 453, 460, 5, 58, 0, 0, 454, 456, 5, 1, 0, 0, 455, 457, 3, 104, 52, 0,
		456, 455, 1, 0, 0, 0, 456, 457, 1, 0, 0, 0, 457, 458, 1, 0, 0, 0, 458,
		461, 5, 2, 0, 0, 459, 461, 3, 98, 49, 0, 460, 454, 1, 0, 0, 0, 460, 459,
		1, 0, 0, 0, 461, 501, 1, 0, 0, 0, 462, 463, 3, 130, 65, 0, 463, 464, 5,
		9, 0, 0, 464, 465, 3, 106, 53, 0, 465, 466, 5, 10, 0, 0, 466, 467, 3, 62,
		31, 0, 467, 468, 3, 106, 53, 0, 468, 501, 1, 0, 0, 0, 469, 470, 3, 130,
		65, 0, 470, 471, 5, 9, 0, 0, 471, 472, 3, 106, 53, 0, 472, 473, 5, 10,
		0, 0, 473, 480, 5, 58, 0, 0, 474, 476, 5, 1, 0, 0, 475, 477, 3, 104, 52,
		0, 476, 475, 1, 0, 0, 0, 476, 477, 1, 0, 0, 0, 477, 478, 1, 0, 0, 0, 478,
		481, 5, 2, 0, 0, 479, 481, 3, 98, 49, 0, 480, 474, 1, 0, 0, 0, 480, 479,
		1, 0, 0, 0, 481, 501, 1, 0, 0, 0, 482, 483, 3, 130, 65, 0, 483, 484, 5,
		11, 0, 0, 484, 485, 3, 130, 65, 0, 485, 486, 3, 62, 31, 0, 486, 487, 3,
		106, 53, 0, 487, 501, 1, 0, 0, 0, 488, 489, 3, 130, 65, 0, 489, 490, 5,
		11, 0, 0, 490, 491, 3, 130, 65, 0, 491, 498, 5, 58, 0, 0, 492, 494, 5,
		1, 0, 0, 493, 495, 3, 104, 52, 0, 494, 493, 1, 0, 0, 0, 494, 495, 1, 0,
		0, 0, 495, 496, 1, 0, 0, 0, 496, 499, 5, 2, 0, 0, 497, 499, 3, 98, 49,
		0, 498, 492, 1, 0, 0, 0, 498, 497, 1, 0, 0, 0, 499, 501, 1, 0, 0, 0, 500,
		448, 1, 0, 0, 0, 500, 452, 1, 0, 0, 0, 500, 462, 1, 0, 0, 0, 500, 469,
		1, 0, 0, 0, 500, 482, 1, 0, 0, 0, 500, 488, 1, 0, 0, 0, 501, 55, 1, 0,
		0, 0, 502, 503, 5, 93, 0, 0, 503, 509, 3, 60, 30, 0, 504, 505, 3, 58, 29,
		0, 505, 506, 3, 60, 30, 0, 506, 508, 1, 0, 0, 0, 507, 504, 1, 0, 0, 0,
		508, 511, 1, 0, 0, 0, 509, 507, 1, 0, 0, 0, 509, 510, 1, 0, 0, 0, 510,
		57, 1, 0, 0, 0, 511, 509, 1, 0, 0, 0, 512, 513, 7, 4, 0, 0, 513, 59, 1,
		0, 0, 0, 514, 515, 3, 130, 65, 0, 515, 516, 3, 62, 31, 0, 516, 517, 3,
		106, 53, 0, 517, 612, 1, 0, 0, 0, 518, 519, 5, 81, 0, 0, 519, 520, 5, 1,
		0, 0, 520, 521, 3, 128, 64, 0, 521, 522, 5, 2, 0, 0, 522, 523, 3, 62, 31,
		0, 523, 524, 3, 106, 53, 0, 524, 612, 1, 0, 0, 0, 525, 526, 3, 130, 65,
		0, 526, 527, 5, 62, 0, 0, 527, 528, 3, 106, 53, 0, 528, 612, 1, 0, 0, 0,
		529, 530, 3, 130, 65, 0, 530, 531, 5, 59, 0, 0, 531, 532, 5, 67, 0, 0,
		532, 533, 5, 68, 0, 0, 533, 612, 1, 0, 0, 0, 534, 535, 3, 130, 65, 0, 535,
		537, 5, 36, 0, 0, 536, 538, 5, 61, 0, 0, 537, 536, 1, 0, 0, 0, 537, 538,
		1, 0, 0, 0, 538, 539, 1, 0, 0, 0, 539, 540, 3, 106, 53, 0, 540, 612, 1,
		0, 0, 0, 541, 542, 3, 130, 65, 0, 542, 543, 5, 9, 0, 0, 543, 544, 3, 106,
		53, 0, 544, 545, 5, 10, 0, 0, 545, 546, 3, 62, 31, 0, 546, 547, 3, 106,
		53, 0, 547, 612, 1, 0, 0, 0, 548, 549, 3, 130, 65, 0, 549, 556, 5, 58,
		0, 0, 550, 552, 5, 1, 0, 0, 551, 553, 3, 104, 52, 0, 552, 551, 1, 0, 0,
		0, 552, 553, 1, 0, 0, 0, 553, 554, 1, 0, 0, 0, 554, 557, 5, 2, 0, 0, 555,
		557, 3, 98, 49, 0, 556, 550, 1, 0, 0, 0, 556, 555, 1, 0, 0, 0, 557, 612,
		1, 0, 0, 0, 558, 559, 5, 1, 0, 0, 559, 560, 3, 128, 64, 0, 560, 561, 5,
		2, 0, 0, 561, 562, 5, 58, 0, 0, 562, 563, 5, 1, 0, 0, 563, 564, 5, 2, 0,
		0, 564, 612, 1, 0, 0, 0, 565, 566, 5, 1, 0, 0, 566, 567, 3, 128, 64, 0,
		567, 568, 5, 2, 0, 0, 568, 569, 5, 58, 0, 0, 569, 570, 3, 98, 49, 0, 570,
		612, 1, 0, 0, 0, 571, 572, 5, 1, 0, 0, 572, 573, 3, 128, 64, 0, 573, 574,
		5, 2, 0, 0, 574, 575, 5, 58, 0, 0, 575, 576, 5, 1, 0, 0, 576, 577, 3, 80,
		40, 0, 577, 578, 5, 2, 0, 0, 578, 612, 1, 0, 0, 0, 579, 580, 5, 1, 0, 0,
		580, 581, 3, 128, 64, 0, 581, 582, 5, 2, 0, 0, 582, 583, 5, 58, 0, 0, 583,
		584, 5, 1, 0, 0, 584, 585, 3, 96, 48, 0, 585, 586, 5, 2, 0, 0, 586, 612,
		1, 0, 0, 0, 587, 588, 5, 1, 0, 0, 588, 589, 3, 128, 64, 0, 589, 590, 5,
		2, 0, 0, 590, 591, 3, 62, 31, 0, 591, 592, 3, 82, 41, 0, 592, 612, 1, 0,
		0, 0, 593, 594, 5, 1, 0, 0, 594, 595, 3, 128, 64, 0, 595, 596, 5, 2, 0,
		0, 596, 597, 3, 62, 31, 0, 597, 598, 5, 1, 0, 0, 598, 599, 3, 96, 48, 0,
		599, 600, 5, 2, 0, 0, 600, 612, 1, 0, 0, 0, 601, 602, 5, 1, 0, 0, 602,
		603, 3, 128, 64, 0, 603, 604, 5, 2, 0, 0, 604, 605, 3, 62, 31, 0, 605,
		606, 3, 98, 49, 0, 606, 612, 1, 0, 0, 0, 607, 608, 5, 1, 0, 0, 608, 609,
		3, 60, 30, 0, 609, 610, 5, 2, 0, 0, 610, 612, 1, 0, 0, 0, 611, 514, 1,
		0, 0, 0, 611, 518, 1, 0, 0, 0, 611, 525, 1, 0, 0, 0, 611, 529, 1, 0, 0,
		0, 611, 534, 1, 0, 0, 0, 611, 541, 1, 0, 0, 0, 611, 548, 1, 0, 0, 0, 611,
		558, 1, 0, 0, 0, 611, 565, 1, 0, 0, 0, 611, 571, 1, 0, 0, 0, 611, 579,
		1, 0, 0, 0, 611, 587, 1, 0, 0, 0, 611, 593, 1, 0, 0, 0, 611, 601, 1, 0,
		0, 0, 611, 607, 1, 0, 0, 0, 612, 61, 1, 0, 0, 0, 613, 614, 7, 5, 0, 0,
		614, 63, 1, 0, 0, 0, 615, 621, 3, 66, 33, 0, 616, 621, 3, 68, 34, 0, 617,
		621, 3, 82, 41, 0, 618, 621, 3, 84, 42, 0, 619, 621, 5, 68, 0, 0, 620,
		615, 1, 0, 0, 0, 620, 616, 1, 0, 0, 0, 620, 617, 1, 0, 0, 0, 620, 618,
		1, 0, 0, 0, 620, 619, 1, 0, 0, 0, 621, 65, 1, 0, 0, 0, 622, 638, 5, 95,
		0, 0, 623, 638, 5, 97, 0, 0, 624, 638, 5, 99, 0, 0, 625, 638, 5, 100, 0,
		0, 626, 638, 5, 101, 0, 0, 627, 638, 5, 104, 0, 0, 628, 638, 5, 103, 0,
		0, 629, 631, 5, 6, 0, 0, 630, 629, 1, 0, 0, 0, 630, 631, 1, 0, 0, 0, 631,
		632, 1, 0, 0, 0, 632, 638, 5, 66, 0, 0, 633, 635, 5, 6, 0, 0, 634, 633,
		1, 0, 0, 0, 634, 635, 1, 0, 0, 0, 635, 636, 1, 0, 0, 0, 636, 638, 5, 54,
		0, 0, 637, 622, 1, 0, 0, 0, 637, 623, 1, 0, 0, 0, 637, 624, 1, 0, 0, 0,
		637, 625, 1, 0, 0, 0, 637, 626, 1, 0, 0, 0, 637, 627, 1, 0, 0, 0, 637,
		628, 1, 0, 0, 0, 637, 630, 1, 0, 0, 0, 637, 634, 1, 0, 0, 0, 638, 67, 1,
		0, 0, 0, 639, 643, 3, 70, 35, 0, 640, 643, 3, 72, 36, 0, 641, 643, 3, 74,
		37, 0, 642, 639, 1, 0, 0, 0, 642, 640, 1, 0, 0, 0, 642, 641, 1, 0, 0, 0,
		643, 69, 1, 0, 0, 0, 644, 646, 5, 9, 0, 0, 645, 647, 3, 104, 52, 0, 646,
		645, 1, 0, 0, 0, 646, 647, 1, 0, 0, 0, 647, 648, 1, 0, 0, 0, 648, 649,
		5, 10, 0, 0, 649, 71, 1, 0, 0, 0, 650, 652, 5, 19, 0, 0, 651, 653, 3, 104,
		52, 0, 652, 651, 1, 0, 0, 0, 652, 653, 1, 0, 0, 0, 653, 654, 1, 0, 0, 0,
		654, 655, 5, 20, 0, 0, 655, 73, 1, 0, 0, 0, 656, 658, 5, 19, 0, 0, 657,
		659, 3, 76, 38, 0, 658, 657, 1, 0, 0, 0, 658, 659, 1, 0, 0, 0, 659, 660,
		1, 0, 0, 0, 660, 661, 5, 20, 0, 0, 661, 75, 1, 0, 0, 0, 662, 667, 3, 78,
		39, 0, 663, 664, 5, 3, 0, 0, 664, 666, 3, 78, 39, 0, 665, 663, 1, 0, 0,
		0, 666, 669, 1, 0, 0, 0, 667, 665, 1, 0, 0, 0, 667, 668, 1, 0, 0, 0, 668,
		77, 1, 0, 0, 0, 669, 667, 1, 0, 0, 0, 670, 671, 3, 106, 53, 0, 671, 672,
		5, 18, 0, 0, 672, 673, 3, 106, 53, 0, 673, 79, 1, 0, 0, 0, 674, 679, 3,
		82, 41, 0, 675, 676, 5, 3, 0, 0, 676, 678, 3, 82, 41, 0, 677, 675, 1, 0,
		0, 0, 678, 681, 1, 0, 0, 0, 679, 677, 1, 0, 0, 0, 679, 680, 1, 0, 0, 0,
		680, 81, 1, 0, 0, 0, 681, 679, 1, 0, 0, 0, 682, 683, 5, 1, 0, 0, 683, 684,
		3, 104, 52, 0, 684, 685, 5, 2, 0, 0, 685, 83, 1, 0, 0, 0, 686, 687, 5,
		19, 0, 0, 687, 688, 3, 86, 43, 0, 688, 689, 5, 20, 0, 0, 689, 85, 1, 0,
		0, 0, 690, 695, 3, 88, 44, 0, 691, 692, 5, 3, 0, 0, 692, 694, 3, 88, 44,
		0, 693, 691, 1, 0, 0, 0, 694, 697, 1, 0, 0, 0, 695, 693, 1, 0, 0, 0, 695,
		696, 1, 0, 0, 0, 696, 87, 1, 0, 0, 0, 697, 695, 1, 0, 0, 0, 698, 699, 3,
		130, 65, 0, 699, 700, 5, 18, 0, 0, 700, 701, 3, 106, 53, 0, 701, 89, 1,
		0, 0, 0, 702, 703, 3, 120, 60, 0, 703, 705, 5, 1, 0, 0, 704, 706, 3, 92,
		46, 0, 705, 704, 1, 0, 0, 0, 705, 706, 1, 0, 0, 0, 706, 707, 1, 0, 0, 0,
		707, 708, 5, 2, 0, 0, 708, 91, 1, 0, 0, 0, 709, 714, 3, 94, 47, 0, 710,
		711, 5, 3, 0, 0, 711, 713, 3, 94, 47, 0, 712, 710, 1, 0, 0, 0, 713, 716,
		1, 0, 0, 0, 714, 712, 1, 0, 0, 0, 714, 715, 1, 0, 0, 0, 715, 93, 1, 0,
		0, 0, 716, 714, 1, 0, 0, 0, 717, 720, 3, 130, 65, 0, 718, 720, 3, 106,
		53, 0, 719, 717, 1, 0, 0, 0, 719, 718, 1, 0, 0, 0, 720, 95, 1, 0, 0, 0,
		721, 726, 3, 98, 49, 0, 722, 723, 5, 3, 0, 0, 723, 725, 3, 98, 49, 0, 724,
		722, 1, 0, 0, 0, 725, 728, 1, 0, 0, 0, 726, 724, 1, 0, 0, 0, 726, 727,
		1, 0, 0, 0, 727, 97, 1, 0, 0, 0, 728, 726, 1, 0, 0, 0, 729, 732, 3, 100,
		50, 0, 730, 732, 3, 102, 51, 0, 731, 729, 1, 0, 0, 0, 731, 730, 1, 0, 0,
		0, 732, 99, 1, 0, 0, 0, 733, 734, 5, 98, 0, 0, 734, 101, 1, 0, 0, 0, 735,
		736, 5, 18, 0, 0, 736, 737, 3, 130, 65, 0, 737, 103, 1, 0, 0, 0, 738, 743,
		3, 106, 53, 0, 739, 740, 5, 3, 0, 0, 740, 742, 3, 106, 53, 0, 741, 739,
		1, 0, 0, 0, 742, 745, 1, 0, 0, 0, 743, 741, 1, 0, 0, 0, 743, 744, 1, 0,
		0, 0, 744, 105, 1, 0, 0, 0, 745, 743, 1, 0, 0, 0, 746, 751, 3, 64, 32,
		0, 747, 751, 3, 98, 49, 0, 748, 751, 3, 90, 45, 0, 749, 751, 3, 108, 54,
		0, 750, 746, 1, 0, 0, 0, 750, 747, 1, 0, 0, 0, 750, 748, 1, 0, 0, 0, 750,
		749, 1, 0, 0, 0, 751, 107, 1, 0, 0, 0, 752, 753, 5, 1, 0, 0, 753, 754,
		3, 110, 55, 0, 754, 755, 5, 2, 0, 0, 755, 756, 3, 106, 53, 0, 756, 109,
		1, 0, 0, 0, 757, 767, 3, 112, 56, 0, 758, 767, 3, 114, 57, 0, 759, 767,
		3, 116, 58, 0, 760, 767, 3, 122, 61, 0, 761, 762, 5, 50, 0, 0, 762, 763,
		5, 13, 0, 0, 763, 764, 3, 110, 55, 0, 764, 765, 5, 15, 0, 0, 765, 767,
		1, 0, 0, 0, 766, 757, 1, 0, 0, 0, 766, 758, 1, 0, 0, 0, 766, 759, 1, 0,
		0, 0, 766, 760, 1, 0, 0, 0, 766, 761, 1, 0, 0, 0, 767, 111, 1, 0, 0, 0,
		768, 769, 7, 6, 0, 0, 769, 113, 1, 0, 0, 0, 770, 771, 5, 64, 0, 0, 771,
		772, 5, 13, 0, 0, 772, 773, 3, 110, 55, 0, 773, 774, 5, 15, 0, 0, 774,
		788, 1, 0, 0, 0, 775, 776, 5, 74, 0, 0, 776, 777, 5, 13, 0, 0, 777, 778,
		3, 110, 55, 0, 778, 779, 5, 15, 0, 0, 779, 788, 1, 0, 0, 0, 780, 781, 5,
		65, 0, 0, 781, 782, 5, 13, 0, 0, 782, 783, 3, 110, 55, 0, 783, 784, 5,
		3, 0, 0, 784, 785, 3, 110, 55, 0, 785, 786, 5, 15, 0, 0, 786, 788, 1, 0,
		0, 0, 787, 770, 1, 0, 0, 0, 787, 775, 1, 0, 0, 0, 787, 780, 1, 0, 0, 0,
		788, 115, 1, 0, 0, 0, 789, 790, 5, 83, 0, 0, 790, 791, 5, 13, 0, 0, 791,
		796, 3, 110, 55, 0, 792, 793, 5, 3, 0, 0, 793, 795, 3, 110, 55, 0, 794,
		792, 1, 0, 0, 0, 795, 798, 1, 0, 0, 0, 796, 794, 1, 0, 0, 0, 796, 797,
		1, 0, 0, 0, 797, 799, 1, 0, 0, 0, 798, 796, 1, 0, 0, 0, 799, 800, 5, 15,
		0, 0, 800, 117, 1, 0, 0, 0, 801, 802, 3, 126, 63, 0, 802, 119, 1, 0, 0,
		0, 803, 804, 3, 126, 63, 0, 804, 121, 1, 0, 0, 0, 805, 806, 3, 126, 63,
		0, 806, 123, 1, 0, 0, 0, 807, 808, 3, 130, 65, 0, 808, 125, 1, 0, 0, 0,
		809, 810, 3, 124, 62, 0, 810, 811, 5, 11, 0, 0, 811, 813, 1, 0, 0, 0, 812,
		809, 1, 0, 0, 0, 812, 813, 1, 0, 0, 0, 813, 814, 1, 0, 0, 0, 814, 815,
		3, 130, 65, 0, 815, 127, 1, 0, 0, 0, 816, 821, 3, 130, 65, 0, 817, 818,
		5, 3, 0, 0, 818, 820, 3, 130, 65, 0, 819, 817, 1, 0, 0, 0, 820, 823, 1,
		0, 0, 0, 821, 819, 1, 0, 0, 0, 821, 822, 1, 0, 0, 0, 822, 129, 1, 0, 0,
		0, 823, 821, 1, 0, 0, 0, 824, 828, 5, 102, 0, 0, 825, 828, 5, 96, 0, 0,
		826, 828, 3, 132, 66, 0, 827, 824, 1, 0, 0, 0, 827, 825, 1, 0, 0, 0, 827,
		826, 1, 0, 0, 0, 828, 131, 1, 0, 0, 0, 829, 853, 5, 25, 0, 0, 830, 853,
		5, 34, 0, 0, 831, 853, 5, 35, 0, 0, 832, 853, 5, 36, 0, 0, 833, 853, 5,
		38, 0, 0, 834, 853, 5, 43, 0, 0, 835, 853, 5, 46, 0, 0, 836, 853, 5, 47,
		0, 0, 837, 853, 5, 50, 0, 0, 838, 853, 5, 51, 0, 0, 839, 853, 5, 60, 0,
		0, 840, 853, 5, 61, 0, 0, 841, 853, 5, 62, 0, 0, 842, 853, 5, 64, 0, 0,
		843, 853, 5, 65, 0, 0, 844, 853, 5, 71, 0, 0, 845, 853, 5, 72, 0, 0, 846,
		853, 5, 82, 0, 0, 847, 853, 5, 83, 0, 0, 848, 853, 5, 84, 0, 0, 849, 853,
		5, 90, 0, 0, 850, 853, 5, 94, 0, 0, 851, 853, 3, 112, 56, 0, 852, 829,
		1, 0, 0, 0, 852, 830, 1, 0, 0, 0, 852, 831, 1, 0, 0, 0, 852, 832, 1, 0,
		0, 0, 852, 833, 1, 0, 0, 0, 852, 834, 1, 0, 0, 0, 852, 835, 1, 0, 0, 0,
		852, 836, 1, 0, 0, 0, 852, 837, 1, 0, 0, 0, 852, 838, 1, 0, 0, 0, 852,
		839, 1, 0, 0, 0, 852, 840, 1, 0, 0, 0, 852, 841, 1, 0, 0, 0, 852, 842,
		1, 0, 0, 0, 852, 843, 1, 0, 0, 0, 852, 844, 1, 0, 0, 0, 852, 845, 1, 0,
		0, 0, 852, 846, 1, 0, 0, 0, 852, 847, 1, 0, 0, 0, 852, 848, 1, 0, 0, 0,
		852, 849, 1, 0, 0, 0, 852, 850, 1, 0, 0, 0, 852, 851, 1, 0, 0, 0, 853,
		133, 1, 0, 0, 0, 854, 856, 3, 136, 68, 0, 855, 854, 1, 0, 0, 0, 856, 859,
		1, 0, 0, 0, 857, 855, 1, 0, 0, 0, 857, 858, 1, 0, 0, 0, 858, 135, 1, 0,
		0, 0, 859, 857, 1, 0, 0, 0, 860, 861, 9, 0, 0, 0, 861, 137, 1, 0, 0, 0,
		87, 140, 144, 148, 152, 156, 160, 164, 168, 170, 185, 188, 193, 201, 203,
		210, 218, 243, 247, 253, 259, 261, 268, 281, 285, 289, 293, 297, 306, 310,
		313, 319, 322, 325, 328, 331, 335, 339, 346, 352, 367, 378, 391, 396, 407,
		412, 428, 433, 438, 445, 456, 460, 476, 480, 494, 498, 500, 509, 537, 552,
		556, 611, 620, 630, 634, 637, 642, 646, 652, 658, 667, 679, 695, 705, 714,
		719, 726, 731, 743, 750, 766, 787, 796, 812, 821, 827, 852, 857,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// SimplifiedCqlParserInit initializes any static state used to implement SimplifiedCqlParser. By default the
// static state used to implement the parser is lazily initialized during the first call to
// NewSimplifiedCqlParser(). You can call this function if you wish to initialize the static state ahead
// of time.
func SimplifiedCqlParserInit() {
	staticData := &SimplifiedCqlParserStaticData
	staticData.once.Do(simplifiedcqlParserInit)
}

// NewSimplifiedCqlParser produces a new parser instance for the optional input antlr.TokenStream.
func NewSimplifiedCqlParser(input antlr.TokenStream) *SimplifiedCqlParser {
	SimplifiedCqlParserInit()
	this := new(SimplifiedCqlParser)
	this.BaseParser = antlr.NewBaseParser(input)
	staticData := &SimplifiedCqlParserStaticData
	this.Interpreter = antlr.NewParserATNSimulator(this, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	this.RuleNames = staticData.RuleNames
	this.LiteralNames = staticData.LiteralNames
	this.SymbolicNames = staticData.SymbolicNames
	this.GrammarFileName = "SimplifiedCql.g4"

	return this
}

// SimplifiedCqlParser tokens.
const (
	SimplifiedCqlParserEOF                 = antlr.TokenEOF
	SimplifiedCqlParserT__0                = 1
	SimplifiedCqlParserT__1                = 2
	SimplifiedCqlParserT__2                = 3
	SimplifiedCqlParserT__3                = 4
	SimplifiedCqlParserT__4                = 5
	SimplifiedCqlParserT__5                = 6
	SimplifiedCqlParserT__6                = 7
	SimplifiedCqlParserT__7                = 8
	SimplifiedCqlParserT__8                = 9
	SimplifiedCqlParserT__9                = 10
	SimplifiedCqlParserT__10               = 11
	SimplifiedCqlParserT__11               = 12
	SimplifiedCqlParserT__12               = 13
	SimplifiedCqlParserT__13               = 14
	SimplifiedCqlParserT__14               = 15
	SimplifiedCqlParserT__15               = 16
	SimplifiedCqlParserT__16               = 17
	SimplifiedCqlParserT__17               = 18
	SimplifiedCqlParserT__18               = 19
	SimplifiedCqlParserT__19               = 20
	SimplifiedCqlParserK_ALLOW             = 21
	SimplifiedCqlParserK_AND               = 22
	SimplifiedCqlParserK_APPLY             = 23
	SimplifiedCqlParserK_ASC               = 24
	SimplifiedCqlParserK_AS                = 25
	SimplifiedCqlParserK_ASCII             = 26
	SimplifiedCqlParserK_BATCH             = 27
	SimplifiedCqlParserK_BEGIN             = 28
	SimplifiedCqlParserK_BIGINT            = 29
	SimplifiedCqlParserK_BLOB              = 30
	SimplifiedCqlParserK_BOOLEAN           = 31
	SimplifiedCqlParserK_BY                = 32
	SimplifiedCqlParserK_CALL              = 33
	SimplifiedCqlParserK_CAST              = 34
	SimplifiedCqlParserK_CLUSTERING        = 35
	SimplifiedCqlParserK_CONTAINS          = 36
	SimplifiedCqlParserK_COUNTER           = 37
	SimplifiedCqlParserK_COUNT             = 38
	SimplifiedCqlParserK_DATE              = 39
	SimplifiedCqlParserK_DECIMAL           = 40
	SimplifiedCqlParserK_DELETE            = 41
	SimplifiedCqlParserK_DESC              = 42
	SimplifiedCqlParserK_DISTINCT          = 43
	SimplifiedCqlParserK_DOUBLE            = 44
	SimplifiedCqlParserK_DURATION          = 45
	SimplifiedCqlParserK_EXISTS            = 46
	SimplifiedCqlParserK_FILTERING         = 47
	SimplifiedCqlParserK_FLOAT             = 48
	SimplifiedCqlParserK_FROM              = 49
	SimplifiedCqlParserK_FROZEN            = 50
	SimplifiedCqlParserK_GROUP             = 51
	SimplifiedCqlParserK_IF                = 52
	SimplifiedCqlParserK_INET              = 53
	SimplifiedCqlParserK_INFINITY          = 54
	SimplifiedCqlParserK_INSERT            = 55
	SimplifiedCqlParserK_INTO              = 56
	SimplifiedCqlParserK_INT               = 57
	SimplifiedCqlParserK_IN                = 58
	SimplifiedCqlParserK_IS                = 59
	SimplifiedCqlParserK_JSON              = 60
	SimplifiedCqlParserK_KEY               = 61
	SimplifiedCqlParserK_LIKE              = 62
	SimplifiedCqlParserK_LIMIT             = 63
	SimplifiedCqlParserK_LIST              = 64
	SimplifiedCqlParserK_MAP               = 65
	SimplifiedCqlParserK_NAN               = 66
	SimplifiedCqlParserK_NOT               = 67
	SimplifiedCqlParserK_NULL              = 68
	SimplifiedCqlParserK_OR                = 69
	SimplifiedCqlParserK_ORDER             = 70
	SimplifiedCqlParserK_PARTITION         = 71
	SimplifiedCqlParserK_PER               = 72
	SimplifiedCqlParserK_SELECT            = 73
	SimplifiedCqlParserK_SET               = 74
	SimplifiedCqlParserK_SMALLINT          = 75
	SimplifiedCqlParserK_TEXT              = 76
	SimplifiedCqlParserK_TIMESTAMP         = 77
	SimplifiedCqlParserK_TIMEUUID          = 78
	SimplifiedCqlParserK_TIME              = 79
	SimplifiedCqlParserK_TINYINT           = 80
	SimplifiedCqlParserK_TOKEN             = 81
	SimplifiedCqlParserK_TTL               = 82
	SimplifiedCqlParserK_TUPLE             = 83
	SimplifiedCqlParserK_TYPE              = 84
	SimplifiedCqlParserK_UNLOGGED          = 85
	SimplifiedCqlParserK_UPDATE            = 86
	SimplifiedCqlParserK_USE               = 87
	SimplifiedCqlParserK_USING             = 88
	SimplifiedCqlParserK_UUID              = 89
	SimplifiedCqlParserK_VALUES            = 90
	SimplifiedCqlParserK_VARCHAR           = 91
	SimplifiedCqlParserK_VARINT            = 92
	SimplifiedCqlParserK_WHERE             = 93
	SimplifiedCqlParserK_WRITETIME         = 94
	SimplifiedCqlParserSTRING_LITERAL      = 95
	SimplifiedCqlParserQUOTED_IDENTIFIER   = 96
	SimplifiedCqlParserINTEGER             = 97
	SimplifiedCqlParserQMARK               = 98
	SimplifiedCqlParserFLOAT               = 99
	SimplifiedCqlParserBOOLEAN             = 100
	SimplifiedCqlParserDURATION            = 101
	SimplifiedCqlParserUNQUOTED_IDENTIFIER = 102
	SimplifiedCqlParserHEXNUMBER           = 103
	SimplifiedCqlParserUUID                = 104
	SimplifiedCqlParserWS                  = 105
	SimplifiedCqlParserCOMMENT             = 106
	SimplifiedCqlParserMULTILINE_COMMENT   = 107
	SimplifiedCqlParserEOS                 = 108
	SimplifiedCqlParserOTHER               = 109
)

// SimplifiedCqlParser rules.
const (
	SimplifiedCqlParserRULE_cqlStatement            = 0
	SimplifiedCqlParserRULE_insertStatement         = 1
	SimplifiedCqlParserRULE_updateStatement         = 2
	SimplifiedCqlParserRULE_updateOperations        = 3
	SimplifiedCqlParserRULE_updateOperation         = 4
	SimplifiedCqlParserRULE_deleteStatement         = 5
	SimplifiedCqlParserRULE_deleteOperations        = 6
	SimplifiedCqlParserRULE_deleteOperation         = 7
	SimplifiedCqlParserRULE_batchStatement          = 8
	SimplifiedCqlParserRULE_batchChildStatement     = 9
	SimplifiedCqlParserRULE_selectStatement         = 10
	SimplifiedCqlParserRULE_selectClause            = 11
	SimplifiedCqlParserRULE_selectors               = 12
	SimplifiedCqlParserRULE_selector                = 13
	SimplifiedCqlParserRULE_unaliasedSelector       = 14
	SimplifiedCqlParserRULE_useStatement            = 15
	SimplifiedCqlParserRULE_callStatement           = 16
	SimplifiedCqlParserRULE_orderByClause           = 17
	SimplifiedCqlParserRULE_orderings               = 18
	SimplifiedCqlParserRULE_ordering                = 19
	SimplifiedCqlParserRULE_groupByClause           = 20
	SimplifiedCqlParserRULE_perPartitionLimitClause = 21
	SimplifiedCqlParserRULE_limitClause             = 22
	SimplifiedCqlParserRULE_usingClause             = 23
	SimplifiedCqlParserRULE_timestamp               = 24
	SimplifiedCqlParserRULE_ttl                     = 25
	SimplifiedCqlParserRULE_conditions              = 26
	SimplifiedCqlParserRULE_condition               = 27
	SimplifiedCqlParserRULE_whereClause             = 28
	SimplifiedCqlParserRULE_logicalOperator         = 29
	SimplifiedCqlParserRULE_relation                = 30
	SimplifiedCqlParserRULE_operator                = 31
	SimplifiedCqlParserRULE_literal                 = 32
	SimplifiedCqlParserRULE_primitiveLiteral        = 33
	SimplifiedCqlParserRULE_collectionLiteral       = 34
	SimplifiedCqlParserRULE_listLiteral             = 35
	SimplifiedCqlParserRULE_setLiteral              = 36
	SimplifiedCqlParserRULE_mapLiteral              = 37
	SimplifiedCqlParserRULE_mapEntries              = 38
	SimplifiedCqlParserRULE_mapEntry                = 39
	SimplifiedCqlParserRULE_tupleLiterals           = 40
	SimplifiedCqlParserRULE_tupleLiteral            = 41
	SimplifiedCqlParserRULE_udtLiteral              = 42
	SimplifiedCqlParserRULE_fieldLiterals           = 43
	SimplifiedCqlParserRULE_fieldLiteral            = 44
	SimplifiedCqlParserRULE_functionCall            = 45
	SimplifiedCqlParserRULE_functionArgs            = 46
	SimplifiedCqlParserRULE_functionArg             = 47
	SimplifiedCqlParserRULE_bindMarkers             = 48
	SimplifiedCqlParserRULE_bindMarker              = 49
	SimplifiedCqlParserRULE_positionalBindMarker    = 50
	SimplifiedCqlParserRULE_namedBindMarker         = 51
	SimplifiedCqlParserRULE_terms                   = 52
	SimplifiedCqlParserRULE_term                    = 53
	SimplifiedCqlParserRULE_typeCast                = 54
	SimplifiedCqlParserRULE_cqlType                 = 55
	SimplifiedCqlParserRULE_primitiveType           = 56
	SimplifiedCqlParserRULE_collectionType          = 57
	SimplifiedCqlParserRULE_tupleType               = 58
	SimplifiedCqlParserRULE_tableName               = 59
	SimplifiedCqlParserRULE_functionName            = 60
	SimplifiedCqlParserRULE_userTypeName            = 61
	SimplifiedCqlParserRULE_keyspaceName            = 62
	SimplifiedCqlParserRULE_qualifiedIdentifier     = 63
	SimplifiedCqlParserRULE_identifiers             = 64
	SimplifiedCqlParserRULE_identifier              = 65
	SimplifiedCqlParserRULE_unreservedKeyword       = 66
	SimplifiedCqlParserRULE_unrecognizedStatement   = 67
	SimplifiedCqlParserRULE_unrecognizedToken       = 68
)

// ICqlStatementContext is an interface to support dynamic dispatch.
type ICqlStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	InsertStatement() IInsertStatementContext
	EOS() antlr.TerminalNode
	UpdateStatement() IUpdateStatementContext
	DeleteStatement() IDeleteStatementContext
	BatchStatement() IBatchStatementContext
	SelectStatement() ISelectStatementContext
	UseStatement() IUseStatementContext
	CallStatement() ICallStatementContext
	UnrecognizedStatement() IUnrecognizedStatementContext

	// IsCqlStatementContext differentiates from other interfaces.
	IsCqlStatementContext()
}

type CqlStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCqlStatementContext() *CqlStatementContext {
	var p = new(CqlStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_cqlStatement
	return p
}

func InitEmptyCqlStatementContext(p *CqlStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_cqlStatement
}

func (*CqlStatementContext) IsCqlStatementContext() {}

func NewCqlStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CqlStatementContext {
	var p = new(CqlStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_cqlStatement

	return p
}

func (s *CqlStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CqlStatementContext) InsertStatement() IInsertStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInsertStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInsertStatementContext)
}

func (s *CqlStatementContext) EOS() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserEOS, 0)
}

func (s *CqlStatementContext) UpdateStatement() IUpdateStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUpdateStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUpdateStatementContext)
}

func (s *CqlStatementContext) DeleteStatement() IDeleteStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeleteStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeleteStatementContext)
}

func (s *CqlStatementContext) BatchStatement() IBatchStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBatchStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBatchStatementContext)
}

func (s *CqlStatementContext) SelectStatement() ISelectStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelectStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelectStatementContext)
}

func (s *CqlStatementContext) UseStatement() IUseStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUseStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUseStatementContext)
}

func (s *CqlStatementContext) CallStatement() ICallStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICallStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICallStatementContext)
}

func (s *CqlStatementContext) UnrecognizedStatement() IUnrecognizedStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnrecognizedStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnrecognizedStatementContext)
}

func (s *CqlStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CqlStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CqlStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterCqlStatement(s)
	}
}

func (s *CqlStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitCqlStatement(s)
	}
}

func (p *SimplifiedCqlParser) CqlStatement() (localctx ICqlStatementContext) {
	localctx = NewCqlStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, SimplifiedCqlParserRULE_cqlStatement)
	var _la int

	p.SetState(170)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 8, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(138)
			p.InsertStatement()
		}
		p.SetState(140)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SimplifiedCqlParserEOS {
			{
				p.SetState(139)
				p.Match(SimplifiedCqlParserEOS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(142)
			p.UpdateStatement()
		}
		p.SetState(144)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SimplifiedCqlParserEOS {
			{
				p.SetState(143)
				p.Match(SimplifiedCqlParserEOS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(146)
			p.DeleteStatement()
		}
		p.SetState(148)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SimplifiedCqlParserEOS {
			{
				p.SetState(147)
				p.Match(SimplifiedCqlParserEOS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(150)
			p.BatchStatement()
		}
		p.SetState(152)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SimplifiedCqlParserEOS {
			{
				p.SetState(151)
				p.Match(SimplifiedCqlParserEOS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(154)
			p.SelectStatement()
		}
		p.SetState(156)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SimplifiedCqlParserEOS {
			{
				p.SetState(155)
				p.Match(SimplifiedCqlParserEOS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(158)
			p.UseStatement()
		}
		p.SetState(160)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SimplifiedCqlParserEOS {
			{
				p.SetState(159)
				p.Match(SimplifiedCqlParserEOS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(162)
			p.CallStatement()
		}
		p.SetState(164)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SimplifiedCqlParserEOS {
			{
				p.SetState(163)
				p.Match(SimplifiedCqlParserEOS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(166)
			p.UnrecognizedStatement()
		}
		p.SetState(168)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SimplifiedCqlParserEOS {
			{
				p.SetState(167)
				p.Match(SimplifiedCqlParserEOS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInsertStatementContext is an interface to support dynamic dispatch.
type IInsertStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	K_INSERT() antlr.TerminalNode
	K_INTO() antlr.TerminalNode
	TableName() ITableNameContext
	Identifiers() IIdentifiersContext
	K_VALUES() antlr.TerminalNode
	Terms() ITermsContext
	K_IF() antlr.TerminalNode
	K_NOT() antlr.TerminalNode
	K_EXISTS() antlr.TerminalNode
	UsingClause() IUsingClauseContext

	// IsInsertStatementContext differentiates from other interfaces.
	IsInsertStatementContext()
}

type InsertStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInsertStatementContext() *InsertStatementContext {
	var p = new(InsertStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_insertStatement
	return p
}

func InitEmptyInsertStatementContext(p *InsertStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_insertStatement
}

func (*InsertStatementContext) IsInsertStatementContext() {}

func NewInsertStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InsertStatementContext {
	var p = new(InsertStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_insertStatement

	return p
}

func (s *InsertStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *InsertStatementContext) K_INSERT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_INSERT, 0)
}

func (s *InsertStatementContext) K_INTO() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_INTO, 0)
}

func (s *InsertStatementContext) TableName() ITableNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *InsertStatementContext) Identifiers() IIdentifiersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifiersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifiersContext)
}

func (s *InsertStatementContext) K_VALUES() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_VALUES, 0)
}

func (s *InsertStatementContext) Terms() ITermsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITermsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITermsContext)
}

func (s *InsertStatementContext) K_IF() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_IF, 0)
}

func (s *InsertStatementContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_NOT, 0)
}

func (s *InsertStatementContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_EXISTS, 0)
}

func (s *InsertStatementContext) UsingClause() IUsingClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUsingClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUsingClauseContext)
}

func (s *InsertStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InsertStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InsertStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterInsertStatement(s)
	}
}

func (s *InsertStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitInsertStatement(s)
	}
}

func (p *SimplifiedCqlParser) InsertStatement() (localctx IInsertStatementContext) {
	localctx = NewInsertStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, SimplifiedCqlParserRULE_insertStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(172)
		p.Match(SimplifiedCqlParserK_INSERT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(173)
		p.Match(SimplifiedCqlParserK_INTO)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(174)
		p.TableName()
	}
	{
		p.SetState(175)
		p.Match(SimplifiedCqlParserT__0)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(176)
		p.Identifiers()
	}
	{
		p.SetState(177)
		p.Match(SimplifiedCqlParserT__1)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(178)
		p.Match(SimplifiedCqlParserK_VALUES)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(179)
		p.Match(SimplifiedCqlParserT__0)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(180)
		p.Terms()
	}
	{
		p.SetState(181)
		p.Match(SimplifiedCqlParserT__1)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(185)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_IF {
		{
			p.SetState(182)
			p.Match(SimplifiedCqlParserK_IF)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(183)
			p.Match(SimplifiedCqlParserK_NOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(184)
			p.Match(SimplifiedCqlParserK_EXISTS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(188)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_USING {
		{
			p.SetState(187)
			p.UsingClause()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUpdateStatementContext is an interface to support dynamic dispatch.
type IUpdateStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	K_UPDATE() antlr.TerminalNode
	TableName() ITableNameContext
	K_SET() antlr.TerminalNode
	UpdateOperations() IUpdateOperationsContext
	WhereClause() IWhereClauseContext
	UsingClause() IUsingClauseContext
	K_IF() antlr.TerminalNode
	K_EXISTS() antlr.TerminalNode
	Conditions() IConditionsContext

	// IsUpdateStatementContext differentiates from other interfaces.
	IsUpdateStatementContext()
}

type UpdateStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdateStatementContext() *UpdateStatementContext {
	var p = new(UpdateStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_updateStatement
	return p
}

func InitEmptyUpdateStatementContext(p *UpdateStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_updateStatement
}

func (*UpdateStatementContext) IsUpdateStatementContext() {}

func NewUpdateStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UpdateStatementContext {
	var p = new(UpdateStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_updateStatement

	return p
}

func (s *UpdateStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *UpdateStatementContext) K_UPDATE() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_UPDATE, 0)
}

func (s *UpdateStatementContext) TableName() ITableNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *UpdateStatementContext) K_SET() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_SET, 0)
}

func (s *UpdateStatementContext) UpdateOperations() IUpdateOperationsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUpdateOperationsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUpdateOperationsContext)
}

func (s *UpdateStatementContext) WhereClause() IWhereClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhereClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhereClauseContext)
}

func (s *UpdateStatementContext) UsingClause() IUsingClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUsingClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUsingClauseContext)
}

func (s *UpdateStatementContext) K_IF() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_IF, 0)
}

func (s *UpdateStatementContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_EXISTS, 0)
}

func (s *UpdateStatementContext) Conditions() IConditionsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConditionsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConditionsContext)
}

func (s *UpdateStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UpdateStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UpdateStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterUpdateStatement(s)
	}
}

func (s *UpdateStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitUpdateStatement(s)
	}
}

func (p *SimplifiedCqlParser) UpdateStatement() (localctx IUpdateStatementContext) {
	localctx = NewUpdateStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, SimplifiedCqlParserRULE_updateStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(190)
		p.Match(SimplifiedCqlParserK_UPDATE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(191)
		p.TableName()
	}
	p.SetState(193)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_USING {
		{
			p.SetState(192)
			p.UsingClause()
		}

	}
	{
		p.SetState(195)
		p.Match(SimplifiedCqlParserK_SET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(196)
		p.UpdateOperations()
	}
	{
		p.SetState(197)
		p.WhereClause()
	}
	p.SetState(203)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_IF {
		{
			p.SetState(198)
			p.Match(SimplifiedCqlParserK_IF)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(201)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 12, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(199)
				p.Match(SimplifiedCqlParserK_EXISTS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case 2:
			{
				p.SetState(200)
				p.Conditions()
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUpdateOperationsContext is an interface to support dynamic dispatch.
type IUpdateOperationsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllUpdateOperation() []IUpdateOperationContext
	UpdateOperation(i int) IUpdateOperationContext

	// IsUpdateOperationsContext differentiates from other interfaces.
	IsUpdateOperationsContext()
}

type UpdateOperationsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdateOperationsContext() *UpdateOperationsContext {
	var p = new(UpdateOperationsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_updateOperations
	return p
}

func InitEmptyUpdateOperationsContext(p *UpdateOperationsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_updateOperations
}

func (*UpdateOperationsContext) IsUpdateOperationsContext() {}

func NewUpdateOperationsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UpdateOperationsContext {
	var p = new(UpdateOperationsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_updateOperations

	return p
}

func (s *UpdateOperationsContext) GetParser() antlr.Parser { return s.parser }

func (s *UpdateOperationsContext) AllUpdateOperation() []IUpdateOperationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IUpdateOperationContext); ok {
			len++
		}
	}

	tst := make([]IUpdateOperationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IUpdateOperationContext); ok {
			tst[i] = t.(IUpdateOperationContext)
			i++
		}
	}

	return tst
}

func (s *UpdateOperationsContext) UpdateOperation(i int) IUpdateOperationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUpdateOperationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUpdateOperationContext)
}

func (s *UpdateOperationsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UpdateOperationsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UpdateOperationsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterUpdateOperations(s)
	}
}

func (s *UpdateOperationsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitUpdateOperations(s)
	}
}

func (p *SimplifiedCqlParser) UpdateOperations() (localctx IUpdateOperationsContext) {
	localctx = NewUpdateOperationsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, SimplifiedCqlParserRULE_updateOperations)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(205)
		p.UpdateOperation()
	}
	p.SetState(210)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserT__2 {
		{
			p.SetState(206)
			p.Match(SimplifiedCqlParserT__2)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(207)
			p.UpdateOperation()
		}

		p.SetState(212)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUpdateOperationContext is an interface to support dynamic dispatch.
type IUpdateOperationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	AllTerm() []ITermContext
	Term(i int) ITermContext

	// IsUpdateOperationContext differentiates from other interfaces.
	IsUpdateOperationContext()
}

type UpdateOperationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdateOperationContext() *UpdateOperationContext {
	var p = new(UpdateOperationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_updateOperation
	return p
}

func InitEmptyUpdateOperationContext(p *UpdateOperationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_updateOperation
}

func (*UpdateOperationContext) IsUpdateOperationContext() {}

func NewUpdateOperationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UpdateOperationContext {
	var p = new(UpdateOperationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_updateOperation

	return p
}

func (s *UpdateOperationContext) GetParser() antlr.Parser { return s.parser }

func (s *UpdateOperationContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *UpdateOperationContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *UpdateOperationContext) AllTerm() []ITermContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITermContext); ok {
			len++
		}
	}

	tst := make([]ITermContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITermContext); ok {
			tst[i] = t.(ITermContext)
			i++
		}
	}

	return tst
}

func (s *UpdateOperationContext) Term(i int) ITermContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITermContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITermContext)
}

func (s *UpdateOperationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UpdateOperationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UpdateOperationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterUpdateOperation(s)
	}
}

func (s *UpdateOperationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitUpdateOperation(s)
	}
}

func (p *SimplifiedCqlParser) UpdateOperation() (localctx IUpdateOperationContext) {
	localctx = NewUpdateOperationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, SimplifiedCqlParserRULE_updateOperation)
	var _la int

	p.SetState(243)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 16, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(213)
			p.Identifier()
		}
		{
			p.SetState(214)
			p.Match(SimplifiedCqlParserT__3)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(215)
			p.Term()
		}
		p.SetState(218)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SimplifiedCqlParserT__4 {
			{
				p.SetState(216)
				p.Match(SimplifiedCqlParserT__4)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(217)
				p.Identifier()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(220)
			p.Identifier()
		}
		{
			p.SetState(221)
			p.Match(SimplifiedCqlParserT__3)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(222)
			p.Identifier()
		}
		{
			p.SetState(223)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SimplifiedCqlParserT__4 || _la == SimplifiedCqlParserT__5) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(224)
			p.Term()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(226)
			p.Identifier()
		}
		{
			p.SetState(227)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SimplifiedCqlParserT__6 || _la == SimplifiedCqlParserT__7) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(228)
			p.Term()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(230)
			p.Identifier()
		}
		{
			p.SetState(231)
			p.Match(SimplifiedCqlParserT__8)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(232)
			p.Term()
		}
		{
			p.SetState(233)
			p.Match(SimplifiedCqlParserT__9)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(234)
			p.Match(SimplifiedCqlParserT__3)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(235)
			p.Term()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(237)
			p.Identifier()
		}
		{
			p.SetState(238)
			p.Match(SimplifiedCqlParserT__10)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(239)
			p.Identifier()
		}
		{
			p.SetState(240)
			p.Match(SimplifiedCqlParserT__3)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(241)
			p.Term()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDeleteStatementContext is an interface to support dynamic dispatch.
type IDeleteStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	K_DELETE() antlr.TerminalNode
	K_FROM() antlr.TerminalNode
	TableName() ITableNameContext
	WhereClause() IWhereClauseContext
	DeleteOperations() IDeleteOperationsContext
	K_USING() antlr.TerminalNode
	Timestamp() ITimestampContext
	K_IF() antlr.TerminalNode
	K_EXISTS() antlr.TerminalNode
	Conditions() IConditionsContext

	// IsDeleteStatementContext differentiates from other interfaces.
	IsDeleteStatementContext()
}

type DeleteStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeleteStatementContext() *DeleteStatementContext {
	var p = new(DeleteStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_deleteStatement
	return p
}

func InitEmptyDeleteStatementContext(p *DeleteStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_deleteStatement
}

func (*DeleteStatementContext) IsDeleteStatementContext() {}

func NewDeleteStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeleteStatementContext {
	var p = new(DeleteStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_deleteStatement

	return p
}

func (s *DeleteStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DeleteStatementContext) K_DELETE() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_DELETE, 0)
}

func (s *DeleteStatementContext) K_FROM() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_FROM, 0)
}

func (s *DeleteStatementContext) TableName() ITableNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *DeleteStatementContext) WhereClause() IWhereClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhereClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhereClauseContext)
}

func (s *DeleteStatementContext) DeleteOperations() IDeleteOperationsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeleteOperationsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeleteOperationsContext)
}

func (s *DeleteStatementContext) K_USING() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_USING, 0)
}

func (s *DeleteStatementContext) Timestamp() ITimestampContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITimestampContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITimestampContext)
}

func (s *DeleteStatementContext) K_IF() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_IF, 0)
}

func (s *DeleteStatementContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_EXISTS, 0)
}

func (s *DeleteStatementContext) Conditions() IConditionsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConditionsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConditionsContext)
}

func (s *DeleteStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeleteStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeleteStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterDeleteStatement(s)
	}
}

func (s *DeleteStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitDeleteStatement(s)
	}
}

func (p *SimplifiedCqlParser) DeleteStatement() (localctx IDeleteStatementContext) {
	localctx = NewDeleteStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, SimplifiedCqlParserRULE_deleteStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(245)
		p.Match(SimplifiedCqlParserK_DELETE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(247)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&8227506958861598720) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&280751896963) != 0) {
		{
			p.SetState(246)
			p.DeleteOperations()
		}

	}
	{
		p.SetState(249)
		p.Match(SimplifiedCqlParserK_FROM)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(250)
		p.TableName()
	}
	p.SetState(253)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_USING {
		{
			p.SetState(251)
			p.Match(SimplifiedCqlParserK_USING)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(252)
			p.Timestamp()
		}

	}
	{
		p.SetState(255)
		p.WhereClause()
	}
	p.SetState(261)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_IF {
		{
			p.SetState(256)
			p.Match(SimplifiedCqlParserK_IF)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(259)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 19, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(257)
				p.Match(SimplifiedCqlParserK_EXISTS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case 2:
			{
				p.SetState(258)
				p.Conditions()
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDeleteOperationsContext is an interface to support dynamic dispatch.
type IDeleteOperationsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllDeleteOperation() []IDeleteOperationContext
	DeleteOperation(i int) IDeleteOperationContext

	// IsDeleteOperationsContext differentiates from other interfaces.
	IsDeleteOperationsContext()
}

type DeleteOperationsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeleteOperationsContext() *DeleteOperationsContext {
	var p = new(DeleteOperationsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_deleteOperations
	return p
}

func InitEmptyDeleteOperationsContext(p *DeleteOperationsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_deleteOperations
}

func (*DeleteOperationsContext) IsDeleteOperationsContext() {}

func NewDeleteOperationsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeleteOperationsContext {
	var p = new(DeleteOperationsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_deleteOperations

	return p
}

func (s *DeleteOperationsContext) GetParser() antlr.Parser { return s.parser }

func (s *DeleteOperationsContext) AllDeleteOperation() []IDeleteOperationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDeleteOperationContext); ok {
			len++
		}
	}

	tst := make([]IDeleteOperationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDeleteOperationContext); ok {
			tst[i] = t.(IDeleteOperationContext)
			i++
		}
	}

	return tst
}

func (s *DeleteOperationsContext) DeleteOperation(i int) IDeleteOperationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeleteOperationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeleteOperationContext)
}

func (s *DeleteOperationsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeleteOperationsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeleteOperationsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterDeleteOperations(s)
	}
}

func (s *DeleteOperationsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitDeleteOperations(s)
	}
}

func (p *SimplifiedCqlParser) DeleteOperations() (localctx IDeleteOperationsContext) {
	localctx = NewDeleteOperationsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, SimplifiedCqlParserRULE_deleteOperations)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(263)
		p.DeleteOperation()
	}
	p.SetState(268)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserT__2 {
		{
			p.SetState(264)
			p.Match(SimplifiedCqlParserT__2)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(265)
			p.DeleteOperation()
		}

		p.SetState(270)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDeleteOperationContext is an interface to support dynamic dispatch.
type IDeleteOperationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	Term() ITermContext

	// IsDeleteOperationContext differentiates from other interfaces.
	IsDeleteOperationContext()
}

type DeleteOperationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeleteOperationContext() *DeleteOperationContext {
	var p = new(DeleteOperationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_deleteOperation
	return p
}

func InitEmptyDeleteOperationContext(p *DeleteOperationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_deleteOperation
}

func (*DeleteOperationContext) IsDeleteOperationContext() {}

func NewDeleteOperationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeleteOperationContext {
	var p = new(DeleteOperationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_deleteOperation

	return p
}

func (s *DeleteOperationContext) GetParser() antlr.Parser { return s.parser }

func (s *DeleteOperationContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *DeleteOperationContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *DeleteOperationContext) Term() ITermContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITermContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITermContext)
}

func (s *DeleteOperationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeleteOperationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeleteOperationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterDeleteOperation(s)
	}
}

func (s *DeleteOperationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitDeleteOperation(s)
	}
}

func (p *SimplifiedCqlParser) DeleteOperation() (localctx IDeleteOperationContext) {
	localctx = NewDeleteOperationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, SimplifiedCqlParserRULE_deleteOperation)
	p.SetState(281)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 22, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(271)
			p.Identifier()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(272)
			p.Identifier()
		}
		{
			p.SetState(273)
			p.Match(SimplifiedCqlParserT__8)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(274)
			p.Term()
		}
		{
			p.SetState(275)
			p.Match(SimplifiedCqlParserT__9)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(277)
			p.Identifier()
		}
		{
			p.SetState(278)
			p.Match(SimplifiedCqlParserT__10)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(279)
			p.Identifier()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBatchStatementContext is an interface to support dynamic dispatch.
type IBatchStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	K_BEGIN() antlr.TerminalNode
	AllK_BATCH() []antlr.TerminalNode
	K_BATCH(i int) antlr.TerminalNode
	K_APPLY() antlr.TerminalNode
	UsingClause() IUsingClauseContext
	AllBatchChildStatement() []IBatchChildStatementContext
	BatchChildStatement(i int) IBatchChildStatementContext
	K_UNLOGGED() antlr.TerminalNode
	K_COUNTER() antlr.TerminalNode
	AllEOS() []antlr.TerminalNode
	EOS(i int) antlr.TerminalNode

	// IsBatchStatementContext differentiates from other interfaces.
	IsBatchStatementContext()
}

type BatchStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBatchStatementContext() *BatchStatementContext {
	var p = new(BatchStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_batchStatement
	return p
}

func InitEmptyBatchStatementContext(p *BatchStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_batchStatement
}

func (*BatchStatementContext) IsBatchStatementContext() {}

func NewBatchStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BatchStatementContext {
	var p = new(BatchStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_batchStatement

	return p
}

func (s *BatchStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *BatchStatementContext) K_BEGIN() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_BEGIN, 0)
}

func (s *BatchStatementContext) AllK_BATCH() []antlr.TerminalNode {
	return s.GetTokens(SimplifiedCqlParserK_BATCH)
}

func (s *BatchStatementContext) K_BATCH(i int) antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_BATCH, i)
}

func (s *BatchStatementContext) K_APPLY() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_APPLY, 0)
}

func (s *BatchStatementContext) UsingClause() IUsingClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUsingClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUsingClauseContext)
}

func (s *BatchStatementContext) AllBatchChildStatement() []IBatchChildStatementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IBatchChildStatementContext); ok {
			len++
		}
	}

	tst := make([]IBatchChildStatementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IBatchChildStatementContext); ok {
			tst[i] = t.(IBatchChildStatementContext)
			i++
		}
	}

	return tst
}

func (s *BatchStatementContext) BatchChildStatement(i int) IBatchChildStatementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBatchChildStatementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBatchChildStatementContext)
}

func (s *BatchStatementContext) K_UNLOGGED() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_UNLOGGED, 0)
}

func (s *BatchStatementContext) K_COUNTER() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_COUNTER, 0)
}

func (s *BatchStatementContext) AllEOS() []antlr.TerminalNode {
	return s.GetTokens(SimplifiedCqlParserEOS)
}

func (s *BatchStatementContext) EOS(i int) antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserEOS, i)
}

func (s *BatchStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BatchStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BatchStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterBatchStatement(s)
	}
}

func (s *BatchStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitBatchStatement(s)
	}
}

func (p *SimplifiedCqlParser) BatchStatement() (localctx IBatchStatementContext) {
	localctx = NewBatchStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, SimplifiedCqlParserRULE_batchStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(283)
		p.Match(SimplifiedCqlParserK_BEGIN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(285)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_COUNTER || _la == SimplifiedCqlParserK_UNLOGGED {
		{
			p.SetState(284)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SimplifiedCqlParserK_COUNTER || _la == SimplifiedCqlParserK_UNLOGGED) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(287)
		p.Match(SimplifiedCqlParserK_BATCH)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(289)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_USING {
		{
			p.SetState(288)
			p.UsingClause()
		}

	}
	p.SetState(297)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-41)) & ^0x3f) == 0 && ((int64(1)<<(_la-41))&35184372105217) != 0 {
		{
			p.SetState(291)
			p.BatchChildStatement()
		}
		p.SetState(293)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SimplifiedCqlParserEOS {
			{
				p.SetState(292)
				p.Match(SimplifiedCqlParserEOS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

		p.SetState(299)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(300)
		p.Match(SimplifiedCqlParserK_APPLY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(301)
		p.Match(SimplifiedCqlParserK_BATCH)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBatchChildStatementContext is an interface to support dynamic dispatch.
type IBatchChildStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	InsertStatement() IInsertStatementContext
	UpdateStatement() IUpdateStatementContext
	DeleteStatement() IDeleteStatementContext

	// IsBatchChildStatementContext differentiates from other interfaces.
	IsBatchChildStatementContext()
}

type BatchChildStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBatchChildStatementContext() *BatchChildStatementContext {
	var p = new(BatchChildStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_batchChildStatement
	return p
}

func InitEmptyBatchChildStatementContext(p *BatchChildStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_batchChildStatement
}

func (*BatchChildStatementContext) IsBatchChildStatementContext() {}

func NewBatchChildStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BatchChildStatementContext {
	var p = new(BatchChildStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_batchChildStatement

	return p
}

func (s *BatchChildStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *BatchChildStatementContext) InsertStatement() IInsertStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInsertStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInsertStatementContext)
}

func (s *BatchChildStatementContext) UpdateStatement() IUpdateStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUpdateStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUpdateStatementContext)
}

func (s *BatchChildStatementContext) DeleteStatement() IDeleteStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeleteStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeleteStatementContext)
}

func (s *BatchChildStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BatchChildStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BatchChildStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterBatchChildStatement(s)
	}
}

func (s *BatchChildStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitBatchChildStatement(s)
	}
}

func (p *SimplifiedCqlParser) BatchChildStatement() (localctx IBatchChildStatementContext) {
	localctx = NewBatchChildStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, SimplifiedCqlParserRULE_batchChildStatement)
	p.SetState(306)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case SimplifiedCqlParserK_INSERT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(303)
			p.InsertStatement()
		}

	case SimplifiedCqlParserK_UPDATE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(304)
			p.UpdateStatement()
		}

	case SimplifiedCqlParserK_DELETE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(305)
			p.DeleteStatement()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelectStatementContext is an interface to support dynamic dispatch.
type ISelectStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	K_SELECT() antlr.TerminalNode
	SelectClause() ISelectClauseContext
	K_FROM() antlr.TerminalNode
	TableName() ITableNameContext
	K_JSON() antlr.TerminalNode
	K_DISTINCT() antlr.TerminalNode
	WhereClause() IWhereClauseContext
	GroupByClause() IGroupByClauseContext
	OrderByClause() IOrderByClauseContext
	PerPartitionLimitClause() IPerPartitionLimitClauseContext
	LimitClause() ILimitClauseContext
	K_ALLOW() antlr.TerminalNode
	K_FILTERING() antlr.TerminalNode

	// IsSelectStatementContext differentiates from other interfaces.
	IsSelectStatementContext()
}

type SelectStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectStatementContext() *SelectStatementContext {
	var p = new(SelectStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_selectStatement
	return p
}

func InitEmptySelectStatementContext(p *SelectStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_selectStatement
}

func (*SelectStatementContext) IsSelectStatementContext() {}

func NewSelectStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectStatementContext {
	var p = new(SelectStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_selectStatement

	return p
}

func (s *SelectStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectStatementContext) K_SELECT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_SELECT, 0)
}

func (s *SelectStatementContext) SelectClause() ISelectClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelectClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelectClauseContext)
}

func (s *SelectStatementContext) K_FROM() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_FROM, 0)
}

func (s *SelectStatementContext) TableName() ITableNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITableNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *SelectStatementContext) K_JSON() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_JSON, 0)
}

func (s *SelectStatementContext) K_DISTINCT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_DISTINCT, 0)
}

func (s *SelectStatementContext) WhereClause() IWhereClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhereClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhereClauseContext)
}

func (s *SelectStatementContext) GroupByClause() IGroupByClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGroupByClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGroupByClauseContext)
}

func (s *SelectStatementContext) OrderByClause() IOrderByClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrderByClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrderByClauseContext)
}

func (s *SelectStatementContext) PerPartitionLimitClause() IPerPartitionLimitClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPerPartitionLimitClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPerPartitionLimitClauseContext)
}

func (s *SelectStatementContext) LimitClause() ILimitClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILimitClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILimitClauseContext)
}

func (s *SelectStatementContext) K_ALLOW() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_ALLOW, 0)
}

func (s *SelectStatementContext) K_FILTERING() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_FILTERING, 0)
}

func (s *SelectStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterSelectStatement(s)
	}
}

func (s *SelectStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitSelectStatement(s)
	}
}

func (p *SimplifiedCqlParser) SelectStatement() (localctx ISelectStatementContext) {
	localctx = NewSelectStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, SimplifiedCqlParserRULE_selectStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(308)
		p.Match(SimplifiedCqlParserK_SELECT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(310)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 28, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(309)
			p.Match(SimplifiedCqlParserK_JSON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(313)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 29, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(312)
			p.Match(SimplifiedCqlParserK_DISTINCT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(315)
		p.SelectClause()
	}
	{
		p.SetState(316)
		p.Match(SimplifiedCqlParserK_FROM)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(317)
		p.TableName()
	}
	p.SetState(319)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_WHERE {
		{
			p.SetState(318)
			p.WhereClause()
		}

	}
	p.SetState(322)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_GROUP {
		{
			p.SetState(321)
			p.GroupByClause()
		}

	}
	p.SetState(325)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_ORDER {
		{
			p.SetState(324)
			p.OrderByClause()
		}

	}
	p.SetState(328)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_PER {
		{
			p.SetState(327)
			p.PerPartitionLimitClause()
		}

	}
	p.SetState(331)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_LIMIT {
		{
			p.SetState(330)
			p.LimitClause()
		}

	}
	p.SetState(335)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_ALLOW {
		{
			p.SetState(333)
			p.Match(SimplifiedCqlParserK_ALLOW)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(334)
			p.Match(SimplifiedCqlParserK_FILTERING)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelectClauseContext is an interface to support dynamic dispatch.
type ISelectClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Selectors() ISelectorsContext

	// IsSelectClauseContext differentiates from other interfaces.
	IsSelectClauseContext()
}

type SelectClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectClauseContext() *SelectClauseContext {
	var p = new(SelectClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_selectClause
	return p
}

func InitEmptySelectClauseContext(p *SelectClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_selectClause
}

func (*SelectClauseContext) IsSelectClauseContext() {}

func NewSelectClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectClauseContext {
	var p = new(SelectClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_selectClause

	return p
}

func (s *SelectClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectClauseContext) Selectors() ISelectorsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelectorsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelectorsContext)
}

func (s *SelectClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterSelectClause(s)
	}
}

func (s *SelectClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitSelectClause(s)
	}
}

func (p *SimplifiedCqlParser) SelectClause() (localctx ISelectClauseContext) {
	localctx = NewSelectClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, SimplifiedCqlParserRULE_selectClause)
	p.SetState(339)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case SimplifiedCqlParserT__11:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(337)
			p.Match(SimplifiedCqlParserT__11)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SimplifiedCqlParserT__0, SimplifiedCqlParserT__5, SimplifiedCqlParserT__8, SimplifiedCqlParserT__17, SimplifiedCqlParserT__18, SimplifiedCqlParserK_AS, SimplifiedCqlParserK_ASCII, SimplifiedCqlParserK_BIGINT, SimplifiedCqlParserK_BLOB, SimplifiedCqlParserK_BOOLEAN, SimplifiedCqlParserK_CAST, SimplifiedCqlParserK_CLUSTERING, SimplifiedCqlParserK_CONTAINS, SimplifiedCqlParserK_COUNTER, SimplifiedCqlParserK_COUNT, SimplifiedCqlParserK_DATE, SimplifiedCqlParserK_DECIMAL, SimplifiedCqlParserK_DISTINCT, SimplifiedCqlParserK_DOUBLE, SimplifiedCqlParserK_DURATION, SimplifiedCqlParserK_EXISTS, SimplifiedCqlParserK_FILTERING, SimplifiedCqlParserK_FLOAT, SimplifiedCqlParserK_FROZEN, SimplifiedCqlParserK_GROUP, SimplifiedCqlParserK_INET, SimplifiedCqlParserK_INFINITY, SimplifiedCqlParserK_INT, SimplifiedCqlParserK_JSON, SimplifiedCqlParserK_KEY, SimplifiedCqlParserK_LIKE, SimplifiedCqlParserK_LIST, SimplifiedCqlParserK_MAP, SimplifiedCqlParserK_NAN, SimplifiedCqlParserK_NULL, SimplifiedCqlParserK_PARTITION, SimplifiedCqlParserK_PER, SimplifiedCqlParserK_SMALLINT, SimplifiedCqlParserK_TEXT, SimplifiedCqlParserK_TIMESTAMP, SimplifiedCqlParserK_TIMEUUID, SimplifiedCqlParserK_TIME, SimplifiedCqlParserK_TINYINT, SimplifiedCqlParserK_TTL, SimplifiedCqlParserK_TUPLE, SimplifiedCqlParserK_TYPE, SimplifiedCqlParserK_UUID, SimplifiedCqlParserK_VALUES, SimplifiedCqlParserK_VARCHAR, SimplifiedCqlParserK_VARINT, SimplifiedCqlParserK_WRITETIME, SimplifiedCqlParserSTRING_LITERAL, SimplifiedCqlParserQUOTED_IDENTIFIER, SimplifiedCqlParserINTEGER, SimplifiedCqlParserQMARK, SimplifiedCqlParserFLOAT, SimplifiedCqlParserBOOLEAN, SimplifiedCqlParserDURATION, SimplifiedCqlParserUNQUOTED_IDENTIFIER, SimplifiedCqlParserHEXNUMBER, SimplifiedCqlParserUUID:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(338)
			p.Selectors()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelectorsContext is an interface to support dynamic dispatch.
type ISelectorsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllSelector() []ISelectorContext
	Selector(i int) ISelectorContext

	// IsSelectorsContext differentiates from other interfaces.
	IsSelectorsContext()
}

type SelectorsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectorsContext() *SelectorsContext {
	var p = new(SelectorsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_selectors
	return p
}

func InitEmptySelectorsContext(p *SelectorsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_selectors
}

func (*SelectorsContext) IsSelectorsContext() {}

func NewSelectorsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectorsContext {
	var p = new(SelectorsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_selectors

	return p
}

func (s *SelectorsContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectorsContext) AllSelector() []ISelectorContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISelectorContext); ok {
			len++
		}
	}

	tst := make([]ISelectorContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISelectorContext); ok {
			tst[i] = t.(ISelectorContext)
			i++
		}
	}

	return tst
}

func (s *SelectorsContext) Selector(i int) ISelectorContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelectorContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelectorContext)
}

func (s *SelectorsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectorsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectorsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterSelectors(s)
	}
}

func (s *SelectorsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitSelectors(s)
	}
}

func (p *SimplifiedCqlParser) Selectors() (localctx ISelectorsContext) {
	localctx = NewSelectorsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, SimplifiedCqlParserRULE_selectors)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(341)
		p.Selector()
	}
	p.SetState(346)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserT__2 {
		{
			p.SetState(342)
			p.Match(SimplifiedCqlParserT__2)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(343)
			p.Selector()
		}

		p.SetState(348)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelectorContext is an interface to support dynamic dispatch.
type ISelectorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UnaliasedSelector() IUnaliasedSelectorContext
	K_AS() antlr.TerminalNode
	Identifier() IIdentifierContext

	// IsSelectorContext differentiates from other interfaces.
	IsSelectorContext()
}

type SelectorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectorContext() *SelectorContext {
	var p = new(SelectorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_selector
	return p
}

func InitEmptySelectorContext(p *SelectorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_selector
}

func (*SelectorContext) IsSelectorContext() {}

func NewSelectorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectorContext {
	var p = new(SelectorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_selector

	return p
}

func (s *SelectorContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectorContext) UnaliasedSelector() IUnaliasedSelectorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnaliasedSelectorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnaliasedSelectorContext)
}

func (s *SelectorContext) K_AS() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_AS, 0)
}

func (s *SelectorContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *SelectorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterSelector(s)
	}
}

func (s *SelectorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitSelector(s)
	}
}

func (p *SimplifiedCqlParser) Selector() (localctx ISelectorContext) {
	localctx = NewSelectorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, SimplifiedCqlParserRULE_selector)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(349)
		p.UnaliasedSelector()
	}
	p.SetState(352)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_AS {
		{
			p.SetState(350)
			p.Match(SimplifiedCqlParserK_AS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(351)
			p.Identifier()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnaliasedSelectorContext is an interface to support dynamic dispatch.
type IUnaliasedSelectorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	Term() ITermContext
	K_COUNT() antlr.TerminalNode
	K_CAST() antlr.TerminalNode
	UnaliasedSelector() IUnaliasedSelectorContext
	K_AS() antlr.TerminalNode
	PrimitiveType() IPrimitiveTypeContext

	// IsUnaliasedSelectorContext differentiates from other interfaces.
	IsUnaliasedSelectorContext()
}

type UnaliasedSelectorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnaliasedSelectorContext() *UnaliasedSelectorContext {
	var p = new(UnaliasedSelectorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_unaliasedSelector
	return p
}

func InitEmptyUnaliasedSelectorContext(p *UnaliasedSelectorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_unaliasedSelector
}

func (*UnaliasedSelectorContext) IsUnaliasedSelectorContext() {}

func NewUnaliasedSelectorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnaliasedSelectorContext {
	var p = new(UnaliasedSelectorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_unaliasedSelector

	return p
}

func (s *UnaliasedSelectorContext) GetParser() antlr.Parser { return s.parser }

func (s *UnaliasedSelectorContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *UnaliasedSelectorContext) Term() ITermContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITermContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITermContext)
}

func (s *UnaliasedSelectorContext) K_COUNT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_COUNT, 0)
}

func (s *UnaliasedSelectorContext) K_CAST() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_CAST, 0)
}

func (s *UnaliasedSelectorContext) UnaliasedSelector() IUnaliasedSelectorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnaliasedSelectorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnaliasedSelectorContext)
}

func (s *UnaliasedSelectorContext) K_AS() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_AS, 0)
}

func (s *UnaliasedSelectorContext) PrimitiveType() IPrimitiveTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimitiveTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimitiveTypeContext)
}

func (s *UnaliasedSelectorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnaliasedSelectorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnaliasedSelectorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterUnaliasedSelector(s)
	}
}

func (s *UnaliasedSelectorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitUnaliasedSelector(s)
	}
}

func (p *SimplifiedCqlParser) UnaliasedSelector() (localctx IUnaliasedSelectorContext) {
	localctx = NewUnaliasedSelectorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, SimplifiedCqlParserRULE_unaliasedSelector)
	p.SetState(367)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 39, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(354)
			p.Identifier()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(355)
			p.Term()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(356)
			p.Match(SimplifiedCqlParserK_COUNT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(357)
			p.Match(SimplifiedCqlParserT__0)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(358)
			p.Match(SimplifiedCqlParserT__11)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(359)
			p.Match(SimplifiedCqlParserT__1)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(360)
			p.Match(SimplifiedCqlParserK_CAST)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(361)
			p.Match(SimplifiedCqlParserT__0)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(362)
			p.UnaliasedSelector()
		}
		{
			p.SetState(363)
			p.Match(SimplifiedCqlParserK_AS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(364)
			p.PrimitiveType()
		}
		{
			p.SetState(365)
			p.Match(SimplifiedCqlParserT__1)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUseStatementContext is an interface to support dynamic dispatch.
type IUseStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	K_USE() antlr.TerminalNode
	KeyspaceName() IKeyspaceNameContext

	// IsUseStatementContext differentiates from other interfaces.
	IsUseStatementContext()
}

type UseStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUseStatementContext() *UseStatementContext {
	var p = new(UseStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_useStatement
	return p
}

func InitEmptyUseStatementContext(p *UseStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_useStatement
}

func (*UseStatementContext) IsUseStatementContext() {}

func NewUseStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UseStatementContext {
	var p = new(UseStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_useStatement

	return p
}

func (s *UseStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *UseStatementContext) K_USE() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_USE, 0)
}

func (s *UseStatementContext) KeyspaceName() IKeyspaceNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IKeyspaceNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IKeyspaceNameContext)
}

func (s *UseStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UseStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UseStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterUseStatement(s)
	}
}

func (s *UseStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitUseStatement(s)
	}
}

func (p *SimplifiedCqlParser) UseStatement() (localctx IUseStatementContext) {
	localctx = NewUseStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, SimplifiedCqlParserRULE_useStatement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(369)
		p.Match(SimplifiedCqlParserK_USE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(370)
		p.KeyspaceName()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICallStatementContext is an interface to support dynamic dispatch.
type ICallStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	K_CALL() antlr.TerminalNode
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	Terms() ITermsContext

	// IsCallStatementContext differentiates from other interfaces.
	IsCallStatementContext()
}

type CallStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallStatementContext() *CallStatementContext {
	var p = new(CallStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_callStatement
	return p
}

func InitEmptyCallStatementContext(p *CallStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_callStatement
}

func (*CallStatementContext) IsCallStatementContext() {}

func NewCallStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallStatementContext {
	var p = new(CallStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_callStatement

	return p
}

func (s *CallStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CallStatementContext) K_CALL() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_CALL, 0)
}

func (s *CallStatementContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *CallStatementContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *CallStatementContext) Terms() ITermsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITermsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITermsContext)
}

func (s *CallStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterCallStatement(s)
	}
}

func (s *CallStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitCallStatement(s)
	}
}

func (p *SimplifiedCqlParser) CallStatement() (localctx ICallStatementContext) {
	localctx = NewCallStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, SimplifiedCqlParserRULE_callStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(372)
		p.Match(SimplifiedCqlParserK_CALL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(373)
		p.Identifier()
	}
	{
		p.SetState(374)
		p.Match(SimplifiedCqlParserT__10)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(375)
		p.Identifier()
	}
	{
		p.SetState(376)
		p.Match(SimplifiedCqlParserT__0)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(378)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&8245521357371867714) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&2198454794647) != 0) {
		{
			p.SetState(377)
			p.Terms()
		}

	}
	{
		p.SetState(380)
		p.Match(SimplifiedCqlParserT__1)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOrderByClauseContext is an interface to support dynamic dispatch.
type IOrderByClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	K_ORDER() antlr.TerminalNode
	K_BY() antlr.TerminalNode
	Orderings() IOrderingsContext

	// IsOrderByClauseContext differentiates from other interfaces.
	IsOrderByClauseContext()
}

type OrderByClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrderByClauseContext() *OrderByClauseContext {
	var p = new(OrderByClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_orderByClause
	return p
}

func InitEmptyOrderByClauseContext(p *OrderByClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_orderByClause
}

func (*OrderByClauseContext) IsOrderByClauseContext() {}

func NewOrderByClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OrderByClauseContext {
	var p = new(OrderByClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_orderByClause

	return p
}

func (s *OrderByClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *OrderByClauseContext) K_ORDER() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_ORDER, 0)
}

func (s *OrderByClauseContext) K_BY() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_BY, 0)
}

func (s *OrderByClauseContext) Orderings() IOrderingsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrderingsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrderingsContext)
}

func (s *OrderByClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OrderByClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OrderByClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterOrderByClause(s)
	}
}

func (s *OrderByClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitOrderByClause(s)
	}
}

func (p *SimplifiedCqlParser) OrderByClause() (localctx IOrderByClauseContext) {
	localctx = NewOrderByClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, SimplifiedCqlParserRULE_orderByClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(382)
		p.Match(SimplifiedCqlParserK_ORDER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(383)
		p.Match(SimplifiedCqlParserK_BY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(384)
		p.Orderings()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOrderingsContext is an interface to support dynamic dispatch.
type IOrderingsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllOrdering() []IOrderingContext
	Ordering(i int) IOrderingContext

	// IsOrderingsContext differentiates from other interfaces.
	IsOrderingsContext()
}

type OrderingsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrderingsContext() *OrderingsContext {
	var p = new(OrderingsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_orderings
	return p
}

func InitEmptyOrderingsContext(p *OrderingsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_orderings
}

func (*OrderingsContext) IsOrderingsContext() {}

func NewOrderingsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OrderingsContext {
	var p = new(OrderingsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_orderings

	return p
}

func (s *OrderingsContext) GetParser() antlr.Parser { return s.parser }

func (s *OrderingsContext) AllOrdering() []IOrderingContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IOrderingContext); ok {
			len++
		}
	}

	tst := make([]IOrderingContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IOrderingContext); ok {
			tst[i] = t.(IOrderingContext)
			i++
		}
	}

	return tst
}

func (s *OrderingsContext) Ordering(i int) IOrderingContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrderingContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrderingContext)
}

func (s *OrderingsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OrderingsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OrderingsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterOrderings(s)
	}
}

func (s *OrderingsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitOrderings(s)
	}
}

func (p *SimplifiedCqlParser) Orderings() (localctx IOrderingsContext) {
	localctx = NewOrderingsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, SimplifiedCqlParserRULE_orderings)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(386)
		p.Ordering()
	}
	p.SetState(391)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserT__2 {
		{
			p.SetState(387)
			p.Match(SimplifiedCqlParserT__2)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(388)
			p.Ordering()
		}

		p.SetState(393)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOrderingContext is an interface to support dynamic dispatch.
type IOrderingContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	K_ASC() antlr.TerminalNode
	K_DESC() antlr.TerminalNode

	// IsOrderingContext differentiates from other interfaces.
	IsOrderingContext()
}

type OrderingContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrderingContext() *OrderingContext {
	var p = new(OrderingContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_ordering
	return p
}

func InitEmptyOrderingContext(p *OrderingContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_ordering
}

func (*OrderingContext) IsOrderingContext() {}

func NewOrderingContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OrderingContext {
	var p = new(OrderingContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_ordering

	return p
}

func (s *OrderingContext) GetParser() antlr.Parser { return s.parser }

func (s *OrderingContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *OrderingContext) K_ASC() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_ASC, 0)
}

func (s *OrderingContext) K_DESC() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_DESC, 0)
}

func (s *OrderingContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OrderingContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OrderingContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterOrdering(s)
	}
}

func (s *OrderingContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitOrdering(s)
	}
}

func (p *SimplifiedCqlParser) Ordering() (localctx IOrderingContext) {
	localctx = NewOrderingContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, SimplifiedCqlParserRULE_ordering)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(394)
		p.Identifier()
	}
	p.SetState(396)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_ASC || _la == SimplifiedCqlParserK_DESC {
		{
			p.SetState(395)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SimplifiedCqlParserK_ASC || _la == SimplifiedCqlParserK_DESC) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGroupByClauseContext is an interface to support dynamic dispatch.
type IGroupByClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	K_GROUP() antlr.TerminalNode
	K_BY() antlr.TerminalNode
	Identifiers() IIdentifiersContext

	// IsGroupByClauseContext differentiates from other interfaces.
	IsGroupByClauseContext()
}

type GroupByClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroupByClauseContext() *GroupByClauseContext {
	var p = new(GroupByClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_groupByClause
	return p
}

func InitEmptyGroupByClauseContext(p *GroupByClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_groupByClause
}

func (*GroupByClauseContext) IsGroupByClauseContext() {}

func NewGroupByClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GroupByClauseContext {
	var p = new(GroupByClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_groupByClause

	return p
}

func (s *GroupByClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *GroupByClauseContext) K_GROUP() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_GROUP, 0)
}

func (s *GroupByClauseContext) K_BY() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_BY, 0)
}

func (s *GroupByClauseContext) Identifiers() IIdentifiersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifiersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifiersContext)
}

func (s *GroupByClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GroupByClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GroupByClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterGroupByClause(s)
	}
}

func (s *GroupByClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitGroupByClause(s)
	}
}

func (p *SimplifiedCqlParser) GroupByClause() (localctx IGroupByClauseContext) {
	localctx = NewGroupByClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, SimplifiedCqlParserRULE_groupByClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(398)
		p.Match(SimplifiedCqlParserK_GROUP)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(399)
		p.Match(SimplifiedCqlParserK_BY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(400)
		p.Identifiers()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPerPartitionLimitClauseContext is an interface to support dynamic dispatch.
type IPerPartitionLimitClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	K_PER() antlr.TerminalNode
	K_PARTITION() antlr.TerminalNode
	K_LIMIT() antlr.TerminalNode
	INTEGER() antlr.TerminalNode
	BindMarker() IBindMarkerContext

	// IsPerPartitionLimitClauseContext differentiates from other interfaces.
	IsPerPartitionLimitClauseContext()
}

type PerPartitionLimitClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPerPartitionLimitClauseContext() *PerPartitionLimitClauseContext {
	var p = new(PerPartitionLimitClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_perPartitionLimitClause
	return p
}

func InitEmptyPerPartitionLimitClauseContext(p *PerPartitionLimitClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_perPartitionLimitClause
}

func (*PerPartitionLimitClauseContext) IsPerPartitionLimitClauseContext() {}

func NewPerPartitionLimitClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PerPartitionLimitClauseContext {
	var p = new(PerPartitionLimitClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_perPartitionLimitClause

	return p
}

func (s *PerPartitionLimitClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *PerPartitionLimitClauseContext) K_PER() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_PER, 0)
}

func (s *PerPartitionLimitClauseContext) K_PARTITION() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_PARTITION, 0)
}

func (s *PerPartitionLimitClauseContext) K_LIMIT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_LIMIT, 0)
}

func (s *PerPartitionLimitClauseContext) INTEGER() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserINTEGER, 0)
}

func (s *PerPartitionLimitClauseContext) BindMarker() IBindMarkerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBindMarkerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBindMarkerContext)
}

func (s *PerPartitionLimitClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PerPartitionLimitClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PerPartitionLimitClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterPerPartitionLimitClause(s)
	}
}

func (s *PerPartitionLimitClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitPerPartitionLimitClause(s)
	}
}

func (p *SimplifiedCqlParser) PerPartitionLimitClause() (localctx IPerPartitionLimitClauseContext) {
	localctx = NewPerPartitionLimitClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, SimplifiedCqlParserRULE_perPartitionLimitClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(402)
		p.Match(SimplifiedCqlParserK_PER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(403)
		p.Match(SimplifiedCqlParserK_PARTITION)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(404)
		p.Match(SimplifiedCqlParserK_LIMIT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(407)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case SimplifiedCqlParserINTEGER:
		{
			p.SetState(405)
			p.Match(SimplifiedCqlParserINTEGER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SimplifiedCqlParserT__17, SimplifiedCqlParserQMARK:
		{
			p.SetState(406)
			p.BindMarker()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILimitClauseContext is an interface to support dynamic dispatch.
type ILimitClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	K_LIMIT() antlr.TerminalNode
	INTEGER() antlr.TerminalNode
	BindMarker() IBindMarkerContext

	// IsLimitClauseContext differentiates from other interfaces.
	IsLimitClauseContext()
}

type LimitClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLimitClauseContext() *LimitClauseContext {
	var p = new(LimitClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_limitClause
	return p
}

func InitEmptyLimitClauseContext(p *LimitClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_limitClause
}

func (*LimitClauseContext) IsLimitClauseContext() {}

func NewLimitClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LimitClauseContext {
	var p = new(LimitClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_limitClause

	return p
}

func (s *LimitClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *LimitClauseContext) K_LIMIT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_LIMIT, 0)
}

func (s *LimitClauseContext) INTEGER() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserINTEGER, 0)
}

func (s *LimitClauseContext) BindMarker() IBindMarkerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBindMarkerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBindMarkerContext)
}

func (s *LimitClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LimitClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LimitClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterLimitClause(s)
	}
}

func (s *LimitClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitLimitClause(s)
	}
}

func (p *SimplifiedCqlParser) LimitClause() (localctx ILimitClauseContext) {
	localctx = NewLimitClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, SimplifiedCqlParserRULE_limitClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(409)
		p.Match(SimplifiedCqlParserK_LIMIT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(412)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case SimplifiedCqlParserINTEGER:
		{
			p.SetState(410)
			p.Match(SimplifiedCqlParserINTEGER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SimplifiedCqlParserT__17, SimplifiedCqlParserQMARK:
		{
			p.SetState(411)
			p.BindMarker()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUsingClauseContext is an interface to support dynamic dispatch.
type IUsingClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	K_USING() antlr.TerminalNode
	Timestamp() ITimestampContext
	Ttl() ITtlContext
	K_AND() antlr.TerminalNode

	// IsUsingClauseContext differentiates from other interfaces.
	IsUsingClauseContext()
}

type UsingClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUsingClauseContext() *UsingClauseContext {
	var p = new(UsingClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_usingClause
	return p
}

func InitEmptyUsingClauseContext(p *UsingClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_usingClause
}

func (*UsingClauseContext) IsUsingClauseContext() {}

func NewUsingClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UsingClauseContext {
	var p = new(UsingClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_usingClause

	return p
}

func (s *UsingClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *UsingClauseContext) K_USING() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_USING, 0)
}

func (s *UsingClauseContext) Timestamp() ITimestampContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITimestampContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITimestampContext)
}

func (s *UsingClauseContext) Ttl() ITtlContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITtlContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITtlContext)
}

func (s *UsingClauseContext) K_AND() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_AND, 0)
}

func (s *UsingClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UsingClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UsingClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterUsingClause(s)
	}
}

func (s *UsingClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitUsingClause(s)
	}
}

func (p *SimplifiedCqlParser) UsingClause() (localctx IUsingClauseContext) {
	localctx = NewUsingClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, SimplifiedCqlParserRULE_usingClause)
	p.SetState(428)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 45, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(414)
			p.Match(SimplifiedCqlParserK_USING)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(415)
			p.Timestamp()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(416)
			p.Match(SimplifiedCqlParserK_USING)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(417)
			p.Ttl()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(418)
			p.Match(SimplifiedCqlParserK_USING)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(419)
			p.Timestamp()
		}
		{
			p.SetState(420)
			p.Match(SimplifiedCqlParserK_AND)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(421)
			p.Ttl()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(423)
			p.Match(SimplifiedCqlParserK_USING)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(424)
			p.Ttl()
		}
		{
			p.SetState(425)
			p.Match(SimplifiedCqlParserK_AND)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(426)
			p.Timestamp()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITimestampContext is an interface to support dynamic dispatch.
type ITimestampContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	K_TIMESTAMP() antlr.TerminalNode
	INTEGER() antlr.TerminalNode
	BindMarker() IBindMarkerContext

	// IsTimestampContext differentiates from other interfaces.
	IsTimestampContext()
}

type TimestampContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTimestampContext() *TimestampContext {
	var p = new(TimestampContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_timestamp
	return p
}

func InitEmptyTimestampContext(p *TimestampContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_timestamp
}

func (*TimestampContext) IsTimestampContext() {}

func NewTimestampContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TimestampContext {
	var p = new(TimestampContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_timestamp

	return p
}

func (s *TimestampContext) GetParser() antlr.Parser { return s.parser }

func (s *TimestampContext) K_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_TIMESTAMP, 0)
}

func (s *TimestampContext) INTEGER() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserINTEGER, 0)
}

func (s *TimestampContext) BindMarker() IBindMarkerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBindMarkerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBindMarkerContext)
}

func (s *TimestampContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TimestampContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TimestampContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterTimestamp(s)
	}
}

func (s *TimestampContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitTimestamp(s)
	}
}

func (p *SimplifiedCqlParser) Timestamp() (localctx ITimestampContext) {
	localctx = NewTimestampContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, SimplifiedCqlParserRULE_timestamp)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(430)
		p.Match(SimplifiedCqlParserK_TIMESTAMP)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(433)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case SimplifiedCqlParserINTEGER:
		{
			p.SetState(431)
			p.Match(SimplifiedCqlParserINTEGER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SimplifiedCqlParserT__17, SimplifiedCqlParserQMARK:
		{
			p.SetState(432)
			p.BindMarker()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITtlContext is an interface to support dynamic dispatch.
type ITtlContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	K_TTL() antlr.TerminalNode
	INTEGER() antlr.TerminalNode
	BindMarker() IBindMarkerContext

	// IsTtlContext differentiates from other interfaces.
	IsTtlContext()
}

type TtlContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTtlContext() *TtlContext {
	var p = new(TtlContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_ttl
	return p
}

func InitEmptyTtlContext(p *TtlContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_ttl
}

func (*TtlContext) IsTtlContext() {}

func NewTtlContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TtlContext {
	var p = new(TtlContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_ttl

	return p
}

func (s *TtlContext) GetParser() antlr.Parser { return s.parser }

func (s *TtlContext) K_TTL() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_TTL, 0)
}

func (s *TtlContext) INTEGER() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserINTEGER, 0)
}

func (s *TtlContext) BindMarker() IBindMarkerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBindMarkerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBindMarkerContext)
}

func (s *TtlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TtlContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TtlContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterTtl(s)
	}
}

func (s *TtlContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitTtl(s)
	}
}

func (p *SimplifiedCqlParser) Ttl() (localctx ITtlContext) {
	localctx = NewTtlContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, SimplifiedCqlParserRULE_ttl)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(435)
		p.Match(SimplifiedCqlParserK_TTL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(438)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case SimplifiedCqlParserINTEGER:
		{
			p.SetState(436)
			p.Match(SimplifiedCqlParserINTEGER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SimplifiedCqlParserT__17, SimplifiedCqlParserQMARK:
		{
			p.SetState(437)
			p.BindMarker()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IConditionsContext is an interface to support dynamic dispatch.
type IConditionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllCondition() []IConditionContext
	Condition(i int) IConditionContext
	AllK_AND() []antlr.TerminalNode
	K_AND(i int) antlr.TerminalNode

	// IsConditionsContext differentiates from other interfaces.
	IsConditionsContext()
}

type ConditionsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditionsContext() *ConditionsContext {
	var p = new(ConditionsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_conditions
	return p
}

func InitEmptyConditionsContext(p *ConditionsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_conditions
}

func (*ConditionsContext) IsConditionsContext() {}

func NewConditionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConditionsContext {
	var p = new(ConditionsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_conditions

	return p
}

func (s *ConditionsContext) GetParser() antlr.Parser { return s.parser }

func (s *ConditionsContext) AllCondition() []IConditionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IConditionContext); ok {
			len++
		}
	}

	tst := make([]IConditionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IConditionContext); ok {
			tst[i] = t.(IConditionContext)
			i++
		}
	}

	return tst
}

func (s *ConditionsContext) Condition(i int) IConditionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConditionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConditionContext)
}

func (s *ConditionsContext) AllK_AND() []antlr.TerminalNode {
	return s.GetTokens(SimplifiedCqlParserK_AND)
}

func (s *ConditionsContext) K_AND(i int) antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_AND, i)
}

func (s *ConditionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConditionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterConditions(s)
	}
}

func (s *ConditionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitConditions(s)
	}
}

func (p *SimplifiedCqlParser) Conditions() (localctx IConditionsContext) {
	localctx = NewConditionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, SimplifiedCqlParserRULE_conditions)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(440)
		p.Condition()
	}
	p.SetState(445)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserK_AND {
		{
			p.SetState(441)
			p.Match(SimplifiedCqlParserK_AND)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(442)
			p.Condition()
		}

		p.SetState(447)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IConditionContext is an interface to support dynamic dispatch.
type IConditionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	Operator() IOperatorContext
	AllTerm() []ITermContext
	Term(i int) ITermContext
	K_IN() antlr.TerminalNode
	BindMarker() IBindMarkerContext
	Terms() ITermsContext

	// IsConditionContext differentiates from other interfaces.
	IsConditionContext()
}

type ConditionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditionContext() *ConditionContext {
	var p = new(ConditionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_condition
	return p
}

func InitEmptyConditionContext(p *ConditionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_condition
}

func (*ConditionContext) IsConditionContext() {}

func NewConditionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConditionContext {
	var p = new(ConditionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_condition

	return p
}

func (s *ConditionContext) GetParser() antlr.Parser { return s.parser }

func (s *ConditionContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *ConditionContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ConditionContext) Operator() IOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOperatorContext)
}

func (s *ConditionContext) AllTerm() []ITermContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITermContext); ok {
			len++
		}
	}

	tst := make([]ITermContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITermContext); ok {
			tst[i] = t.(ITermContext)
			i++
		}
	}

	return tst
}

func (s *ConditionContext) Term(i int) ITermContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITermContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITermContext)
}

func (s *ConditionContext) K_IN() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_IN, 0)
}

func (s *ConditionContext) BindMarker() IBindMarkerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBindMarkerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBindMarkerContext)
}

func (s *ConditionContext) Terms() ITermsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITermsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITermsContext)
}

func (s *ConditionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConditionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterCondition(s)
	}
}

func (s *ConditionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitCondition(s)
	}
}

func (p *SimplifiedCqlParser) Condition() (localctx IConditionContext) {
	localctx = NewConditionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, SimplifiedCqlParserRULE_condition)
	var _la int

	p.SetState(500)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 55, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(448)
			p.Identifier()
		}
		{
			p.SetState(449)
			p.Operator()
		}
		{
			p.SetState(450)
			p.Term()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(452)
			p.Identifier()
		}
		{
			p.SetState(453)
			p.Match(SimplifiedCqlParserK_IN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(460)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case SimplifiedCqlParserT__0:
			{
				p.SetState(454)
				p.Match(SimplifiedCqlParserT__0)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(456)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&8245521357371867714) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&2198454794647) != 0) {
				{
					p.SetState(455)
					p.Terms()
				}

			}
			{
				p.SetState(458)
				p.Match(SimplifiedCqlParserT__1)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case SimplifiedCqlParserT__17, SimplifiedCqlParserQMARK:
			{
				p.SetState(459)
				p.BindMarker()
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(462)
			p.Identifier()
		}
		{
			p.SetState(463)
			p.Match(SimplifiedCqlParserT__8)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(464)
			p.Term()
		}
		{
			p.SetState(465)
			p.Match(SimplifiedCqlParserT__9)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(466)
			p.Operator()
		}
		{
			p.SetState(467)
			p.Term()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(469)
			p.Identifier()
		}
		{
			p.SetState(470)
			p.Match(SimplifiedCqlParserT__8)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(471)
			p.Term()
		}
		{
			p.SetState(472)
			p.Match(SimplifiedCqlParserT__9)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(473)
			p.Match(SimplifiedCqlParserK_IN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(480)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case SimplifiedCqlParserT__0:
			{
				p.SetState(474)
				p.Match(SimplifiedCqlParserT__0)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(476)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&8245521357371867714) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&2198454794647) != 0) {
				{
					p.SetState(475)
					p.Terms()
				}

			}
			{
				p.SetState(478)
				p.Match(SimplifiedCqlParserT__1)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case SimplifiedCqlParserT__17, SimplifiedCqlParserQMARK:
			{
				p.SetState(479)
				p.BindMarker()
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(482)
			p.Identifier()
		}
		{
			p.SetState(483)
			p.Match(SimplifiedCqlParserT__10)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(484)
			p.Identifier()
		}
		{
			p.SetState(485)
			p.Operator()
		}
		{
			p.SetState(486)
			p.Term()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(488)
			p.Identifier()
		}
		{
			p.SetState(489)
			p.Match(SimplifiedCqlParserT__10)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(490)
			p.Identifier()
		}
		{
			p.SetState(491)
			p.Match(SimplifiedCqlParserK_IN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(498)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case SimplifiedCqlParserT__0:
			{
				p.SetState(492)
				p.Match(SimplifiedCqlParserT__0)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(494)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&8245521357371867714) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&2198454794647) != 0) {
				{
					p.SetState(493)
					p.Terms()
				}

			}
			{
				p.SetState(496)
				p.Match(SimplifiedCqlParserT__1)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case SimplifiedCqlParserT__17, SimplifiedCqlParserQMARK:
			{
				p.SetState(497)
				p.BindMarker()
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWhereClauseContext is an interface to support dynamic dispatch.
type IWhereClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	K_WHERE() antlr.TerminalNode
	AllRelation() []IRelationContext
	Relation(i int) IRelationContext
	AllLogicalOperator() []ILogicalOperatorContext
	LogicalOperator(i int) ILogicalOperatorContext

	// IsWhereClauseContext differentiates from other interfaces.
	IsWhereClauseContext()
}

type WhereClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhereClauseContext() *WhereClauseContext {
	var p = new(WhereClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_whereClause
	return p
}

func InitEmptyWhereClauseContext(p *WhereClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_whereClause
}

func (*WhereClauseContext) IsWhereClauseContext() {}

func NewWhereClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhereClauseContext {
	var p = new(WhereClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_whereClause

	return p
}

func (s *WhereClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *WhereClauseContext) K_WHERE() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_WHERE, 0)
}

func (s *WhereClauseContext) AllRelation() []IRelationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IRelationContext); ok {
			len++
		}
	}

	tst := make([]IRelationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IRelationContext); ok {
			tst[i] = t.(IRelationContext)
			i++
		}
	}

	return tst
}

func (s *WhereClauseContext) Relation(i int) IRelationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRelationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRelationContext)
}

func (s *WhereClauseContext) AllLogicalOperator() []ILogicalOperatorContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ILogicalOperatorContext); ok {
			len++
		}
	}

	tst := make([]ILogicalOperatorContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ILogicalOperatorContext); ok {
			tst[i] = t.(ILogicalOperatorContext)
			i++
		}
	}

	return tst
}

func (s *WhereClauseContext) LogicalOperator(i int) ILogicalOperatorContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILogicalOperatorContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILogicalOperatorContext)
}

func (s *WhereClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhereClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WhereClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterWhereClause(s)
	}
}

func (s *WhereClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitWhereClause(s)
	}
}

func (p *SimplifiedCqlParser) WhereClause() (localctx IWhereClauseContext) {
	localctx = NewWhereClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, SimplifiedCqlParserRULE_whereClause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(502)
		p.Match(SimplifiedCqlParserK_WHERE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(503)
		p.Relation()
	}
	p.SetState(509)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserK_AND || _la == SimplifiedCqlParserK_OR {
		{
			p.SetState(504)
			p.LogicalOperator()
		}
		{
			p.SetState(505)
			p.Relation()
		}

		p.SetState(511)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILogicalOperatorContext is an interface to support dynamic dispatch.
type ILogicalOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	K_AND() antlr.TerminalNode
	K_OR() antlr.TerminalNode

	// IsLogicalOperatorContext differentiates from other interfaces.
	IsLogicalOperatorContext()
}

type LogicalOperatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLogicalOperatorContext() *LogicalOperatorContext {
	var p = new(LogicalOperatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_logicalOperator
	return p
}

func InitEmptyLogicalOperatorContext(p *LogicalOperatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_logicalOperator
}

func (*LogicalOperatorContext) IsLogicalOperatorContext() {}

func NewLogicalOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LogicalOperatorContext {
	var p = new(LogicalOperatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_logicalOperator

	return p
}

func (s *LogicalOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *LogicalOperatorContext) K_AND() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_AND, 0)
}

func (s *LogicalOperatorContext) K_OR() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_OR, 0)
}

func (s *LogicalOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LogicalOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterLogicalOperator(s)
	}
}

func (s *LogicalOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitLogicalOperator(s)
	}
}

func (p *SimplifiedCqlParser) LogicalOperator() (localctx ILogicalOperatorContext) {
	localctx = NewLogicalOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, SimplifiedCqlParserRULE_logicalOperator)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(512)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SimplifiedCqlParserK_AND || _la == SimplifiedCqlParserK_OR) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRelationContext is an interface to support dynamic dispatch.
type IRelationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	Operator() IOperatorContext
	AllTerm() []ITermContext
	Term(i int) ITermContext
	K_TOKEN() antlr.TerminalNode
	Identifiers() IIdentifiersContext
	K_LIKE() antlr.TerminalNode
	K_IS() antlr.TerminalNode
	K_NOT() antlr.TerminalNode
	K_NULL() antlr.TerminalNode
	K_CONTAINS() antlr.TerminalNode
	K_KEY() antlr.TerminalNode
	K_IN() antlr.TerminalNode
	BindMarker() IBindMarkerContext
	Terms() ITermsContext
	TupleLiterals() ITupleLiteralsContext
	BindMarkers() IBindMarkersContext
	TupleLiteral() ITupleLiteralContext
	Relation() IRelationContext

	// IsRelationContext differentiates from other interfaces.
	IsRelationContext()
}

type RelationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRelationContext() *RelationContext {
	var p = new(RelationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_relation
	return p
}

func InitEmptyRelationContext(p *RelationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_relation
}

func (*RelationContext) IsRelationContext() {}

func NewRelationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RelationContext {
	var p = new(RelationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_relation

	return p
}

func (s *RelationContext) GetParser() antlr.Parser { return s.parser }

func (s *RelationContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *RelationContext) Operator() IOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOperatorContext)
}

func (s *RelationContext) AllTerm() []ITermContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITermContext); ok {
			len++
		}
	}

	tst := make([]ITermContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITermContext); ok {
			tst[i] = t.(ITermContext)
			i++
		}
	}

	return tst
}

func (s *RelationContext) Term(i int) ITermContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITermContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITermContext)
}

func (s *RelationContext) K_TOKEN() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_TOKEN, 0)
}

func (s *RelationContext) Identifiers() IIdentifiersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifiersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifiersContext)
}

func (s *RelationContext) K_LIKE() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_LIKE, 0)
}

func (s *RelationContext) K_IS() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_IS, 0)
}

func (s *RelationContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_NOT, 0)
}

func (s *RelationContext) K_NULL() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_NULL, 0)
}

func (s *RelationContext) K_CONTAINS() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_CONTAINS, 0)
}

func (s *RelationContext) K_KEY() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_KEY, 0)
}

func (s *RelationContext) K_IN() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_IN, 0)
}

func (s *RelationContext) BindMarker() IBindMarkerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBindMarkerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBindMarkerContext)
}

func (s *RelationContext) Terms() ITermsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITermsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITermsContext)
}

func (s *RelationContext) TupleLiterals() ITupleLiteralsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITupleLiteralsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITupleLiteralsContext)
}

func (s *RelationContext) BindMarkers() IBindMarkersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBindMarkersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBindMarkersContext)
}

func (s *RelationContext) TupleLiteral() ITupleLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITupleLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITupleLiteralContext)
}

func (s *RelationContext) Relation() IRelationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRelationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRelationContext)
}

func (s *RelationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RelationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RelationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterRelation(s)
	}
}

func (s *RelationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitRelation(s)
	}
}

func (p *SimplifiedCqlParser) Relation() (localctx IRelationContext) {
	localctx = NewRelationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, SimplifiedCqlParserRULE_relation)
	var _la int

	p.SetState(611)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 60, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(514)
			p.Identifier()
		}
		{
			p.SetState(515)
			p.Operator()
		}
		{
			p.SetState(516)
			p.Term()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(518)
			p.Match(SimplifiedCqlParserK_TOKEN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(519)
			p.Match(SimplifiedCqlParserT__0)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(520)
			p.Identifiers()
		}
		{
			p.SetState(521)
			p.Match(SimplifiedCqlParserT__1)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(522)
			p.Operator()
		}
		{
			p.SetState(523)
			p.Term()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(525)
			p.Identifier()
		}
		{
			p.SetState(526)
			p.Match(SimplifiedCqlParserK_LIKE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(527)
			p.Term()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(529)
			p.Identifier()
		}
		{
			p.SetState(530)
			p.Match(SimplifiedCqlParserK_IS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(531)
			p.Match(SimplifiedCqlParserK_NOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(532)
			p.Match(SimplifiedCqlParserK_NULL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(534)
			p.Identifier()
		}
		{
			p.SetState(535)
			p.Match(SimplifiedCqlParserK_CONTAINS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(537)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 57, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(536)
				p.Match(SimplifiedCqlParserK_KEY)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(539)
			p.Term()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(541)
			p.Identifier()
		}
		{
			p.SetState(542)
			p.Match(SimplifiedCqlParserT__8)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(543)
			p.Term()
		}
		{
			p.SetState(544)
			p.Match(SimplifiedCqlParserT__9)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(545)
			p.Operator()
		}
		{
			p.SetState(546)
			p.Term()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(548)
			p.Identifier()
		}
		{
			p.SetState(549)
			p.Match(SimplifiedCqlParserK_IN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(556)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case SimplifiedCqlParserT__0:
			{
				p.SetState(550)
				p.Match(SimplifiedCqlParserT__0)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(552)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&8245521357371867714) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&2198454794647) != 0) {
				{
					p.SetState(551)
					p.Terms()
				}

			}
			{
				p.SetState(554)
				p.Match(SimplifiedCqlParserT__1)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case SimplifiedCqlParserT__17, SimplifiedCqlParserQMARK:
			{
				p.SetState(555)
				p.BindMarker()
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(558)
			p.Match(SimplifiedCqlParserT__0)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(559)
			p.Identifiers()
		}
		{
			p.SetState(560)
			p.Match(SimplifiedCqlParserT__1)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(561)
			p.Match(SimplifiedCqlParserK_IN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(562)
			p.Match(SimplifiedCqlParserT__0)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(563)
			p.Match(SimplifiedCqlParserT__1)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(565)
			p.Match(SimplifiedCqlParserT__0)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(566)
			p.Identifiers()
		}
		{
			p.SetState(567)
			p.Match(SimplifiedCqlParserT__1)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(568)
			p.Match(SimplifiedCqlParserK_IN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(569)
			p.BindMarker()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(571)
			p.Match(SimplifiedCqlParserT__0)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(572)
			p.Identifiers()
		}
		{
			p.SetState(573)
			p.Match(SimplifiedCqlParserT__1)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(574)
			p.Match(SimplifiedCqlParserK_IN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(575)
			p.Match(SimplifiedCqlParserT__0)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(576)
			p.TupleLiterals()
		}
		{
			p.SetState(577)
			p.Match(SimplifiedCqlParserT__1)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(579)
			p.Match(SimplifiedCqlParserT__0)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(580)
			p.Identifiers()
		}
		{
			p.SetState(581)
			p.Match(SimplifiedCqlParserT__1)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(582)
			p.Match(SimplifiedCqlParserK_IN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(583)
			p.Match(SimplifiedCqlParserT__0)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(584)
			p.BindMarkers()
		}
		{
			p.SetState(585)
			p.Match(SimplifiedCqlParserT__1)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(587)
			p.Match(SimplifiedCqlParserT__0)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(588)
			p.Identifiers()
		}
		{
			p.SetState(589)
			p.Match(SimplifiedCqlParserT__1)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(590)
			p.Operator()
		}
		{
			p.SetState(591)
			p.TupleLiteral()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(593)
			p.Match(SimplifiedCqlParserT__0)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(594)
			p.Identifiers()
		}
		{
			p.SetState(595)
			p.Match(SimplifiedCqlParserT__1)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(596)
			p.Operator()
		}
		{
			p.SetState(597)
			p.Match(SimplifiedCqlParserT__0)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(598)
			p.BindMarkers()
		}
		{
			p.SetState(599)
			p.Match(SimplifiedCqlParserT__1)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(601)
			p.Match(SimplifiedCqlParserT__0)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(602)
			p.Identifiers()
		}
		{
			p.SetState(603)
			p.Match(SimplifiedCqlParserT__1)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(604)
			p.Operator()
		}
		{
			p.SetState(605)
			p.BindMarker()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(607)
			p.Match(SimplifiedCqlParserT__0)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(608)
			p.Relation()
		}
		{
			p.SetState(609)
			p.Match(SimplifiedCqlParserT__1)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOperatorContext is an interface to support dynamic dispatch.
type IOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsOperatorContext differentiates from other interfaces.
	IsOperatorContext()
}

type OperatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOperatorContext() *OperatorContext {
	var p = new(OperatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_operator
	return p
}

func InitEmptyOperatorContext(p *OperatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_operator
}

func (*OperatorContext) IsOperatorContext() {}

func NewOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OperatorContext {
	var p = new(OperatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_operator

	return p
}

func (s *OperatorContext) GetParser() antlr.Parser { return s.parser }
func (s *OperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterOperator(s)
	}
}

func (s *OperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitOperator(s)
	}
}

func (p *SimplifiedCqlParser) Operator() (localctx IOperatorContext) {
	localctx = NewOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, SimplifiedCqlParserRULE_operator)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(613)
		_la = p.GetTokenStream().LA(1)

		if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&516112) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILiteralContext is an interface to support dynamic dispatch.
type ILiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PrimitiveLiteral() IPrimitiveLiteralContext
	CollectionLiteral() ICollectionLiteralContext
	TupleLiteral() ITupleLiteralContext
	UdtLiteral() IUdtLiteralContext
	K_NULL() antlr.TerminalNode

	// IsLiteralContext differentiates from other interfaces.
	IsLiteralContext()
}

type LiteralContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteralContext() *LiteralContext {
	var p = new(LiteralContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_literal
	return p
}

func InitEmptyLiteralContext(p *LiteralContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_literal
}

func (*LiteralContext) IsLiteralContext() {}

func NewLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LiteralContext {
	var p = new(LiteralContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_literal

	return p
}

func (s *LiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *LiteralContext) PrimitiveLiteral() IPrimitiveLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimitiveLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimitiveLiteralContext)
}

func (s *LiteralContext) CollectionLiteral() ICollectionLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICollectionLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICollectionLiteralContext)
}

func (s *LiteralContext) TupleLiteral() ITupleLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITupleLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITupleLiteralContext)
}

func (s *LiteralContext) UdtLiteral() IUdtLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUdtLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUdtLiteralContext)
}

func (s *LiteralContext) K_NULL() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_NULL, 0)
}

func (s *LiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterLiteral(s)
	}
}

func (s *LiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitLiteral(s)
	}
}

func (p *SimplifiedCqlParser) Literal() (localctx ILiteralContext) {
	localctx = NewLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, SimplifiedCqlParserRULE_literal)
	p.SetState(620)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 61, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(615)
			p.PrimitiveLiteral()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(616)
			p.CollectionLiteral()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(617)
			p.TupleLiteral()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(618)
			p.UdtLiteral()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(619)
			p.Match(SimplifiedCqlParserK_NULL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrimitiveLiteralContext is an interface to support dynamic dispatch.
type IPrimitiveLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	STRING_LITERAL() antlr.TerminalNode
	INTEGER() antlr.TerminalNode
	FLOAT() antlr.TerminalNode
	BOOLEAN() antlr.TerminalNode
	DURATION() antlr.TerminalNode
	UUID() antlr.TerminalNode
	HEXNUMBER() antlr.TerminalNode
	K_NAN() antlr.TerminalNode
	K_INFINITY() antlr.TerminalNode

	// IsPrimitiveLiteralContext differentiates from other interfaces.
	IsPrimitiveLiteralContext()
}

type PrimitiveLiteralContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimitiveLiteralContext() *PrimitiveLiteralContext {
	var p = new(PrimitiveLiteralContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_primitiveLiteral
	return p
}

func InitEmptyPrimitiveLiteralContext(p *PrimitiveLiteralContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_primitiveLiteral
}

func (*PrimitiveLiteralContext) IsPrimitiveLiteralContext() {}

func NewPrimitiveLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimitiveLiteralContext {
	var p = new(PrimitiveLiteralContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_primitiveLiteral

	return p
}

func (s *PrimitiveLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimitiveLiteralContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserSTRING_LITERAL, 0)
}

func (s *PrimitiveLiteralContext) INTEGER() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserINTEGER, 0)
}

func (s *PrimitiveLiteralContext) FLOAT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserFLOAT, 0)
}

func (s *PrimitiveLiteralContext) BOOLEAN() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserBOOLEAN, 0)
}

func (s *PrimitiveLiteralContext) DURATION() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserDURATION, 0)
}

func (s *PrimitiveLiteralContext) UUID() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserUUID, 0)
}

func (s *PrimitiveLiteralContext) HEXNUMBER() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserHEXNUMBER, 0)
}

func (s *PrimitiveLiteralContext) K_NAN() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_NAN, 0)
}

func (s *PrimitiveLiteralContext) K_INFINITY() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_INFINITY, 0)
}

func (s *PrimitiveLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimitiveLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimitiveLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterPrimitiveLiteral(s)
	}
}

func (s *PrimitiveLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitPrimitiveLiteral(s)
	}
}

func (p *SimplifiedCqlParser) PrimitiveLiteral() (localctx IPrimitiveLiteralContext) {
	localctx = NewPrimitiveLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, SimplifiedCqlParserRULE_primitiveLiteral)
	var _la int

	p.SetState(637)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 64, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(622)
			p.Match(SimplifiedCqlParserSTRING_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(623)
			p.Match(SimplifiedCqlParserINTEGER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(624)
			p.Match(SimplifiedCqlParserFLOAT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(625)
			p.Match(SimplifiedCqlParserBOOLEAN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(626)
			p.Match(SimplifiedCqlParserDURATION)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(627)
			p.Match(SimplifiedCqlParserUUID)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(628)
			p.Match(SimplifiedCqlParserHEXNUMBER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		p.SetState(630)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SimplifiedCqlParserT__5 {
			{
				p.SetState(629)
				p.Match(SimplifiedCqlParserT__5)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(632)
			p.Match(SimplifiedCqlParserK_NAN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		p.SetState(634)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SimplifiedCqlParserT__5 {
			{
				p.SetState(633)
				p.Match(SimplifiedCqlParserT__5)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(636)
			p.Match(SimplifiedCqlParserK_INFINITY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICollectionLiteralContext is an interface to support dynamic dispatch.
type ICollectionLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ListLiteral() IListLiteralContext
	SetLiteral() ISetLiteralContext
	MapLiteral() IMapLiteralContext

	// IsCollectionLiteralContext differentiates from other interfaces.
	IsCollectionLiteralContext()
}

type CollectionLiteralContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCollectionLiteralContext() *CollectionLiteralContext {
	var p = new(CollectionLiteralContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_collectionLiteral
	return p
}

func InitEmptyCollectionLiteralContext(p *CollectionLiteralContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_collectionLiteral
}

func (*CollectionLiteralContext) IsCollectionLiteralContext() {}

func NewCollectionLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CollectionLiteralContext {
	var p = new(CollectionLiteralContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_collectionLiteral

	return p
}

func (s *CollectionLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *CollectionLiteralContext) ListLiteral() IListLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IListLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IListLiteralContext)
}

func (s *CollectionLiteralContext) SetLiteral() ISetLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISetLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISetLiteralContext)
}

func (s *CollectionLiteralContext) MapLiteral() IMapLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMapLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMapLiteralContext)
}

func (s *CollectionLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CollectionLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CollectionLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterCollectionLiteral(s)
	}
}

func (s *CollectionLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitCollectionLiteral(s)
	}
}

func (p *SimplifiedCqlParser) CollectionLiteral() (localctx ICollectionLiteralContext) {
	localctx = NewCollectionLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, SimplifiedCqlParserRULE_collectionLiteral)
	p.SetState(642)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 65, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(639)
			p.ListLiteral()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(640)
			p.SetLiteral()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(641)
			p.MapLiteral()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IListLiteralContext is an interface to support dynamic dispatch.
type IListLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Terms() ITermsContext

	// IsListLiteralContext differentiates from other interfaces.
	IsListLiteralContext()
}

type ListLiteralContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyListLiteralContext() *ListLiteralContext {
	var p = new(ListLiteralContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_listLiteral
	return p
}

func InitEmptyListLiteralContext(p *ListLiteralContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_listLiteral
}

func (*ListLiteralContext) IsListLiteralContext() {}

func NewListLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ListLiteralContext {
	var p = new(ListLiteralContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_listLiteral

	return p
}

func (s *ListLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *ListLiteralContext) Terms() ITermsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITermsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITermsContext)
}

func (s *ListLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ListLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ListLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterListLiteral(s)
	}
}

func (s *ListLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitListLiteral(s)
	}
}

func (p *SimplifiedCqlParser) ListLiteral() (localctx IListLiteralContext) {
	localctx = NewListLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, SimplifiedCqlParserRULE_listLiteral)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(644)
		p.Match(SimplifiedCqlParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(646)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&8245521357371867714) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&2198454794647) != 0) {
		{
			p.SetState(645)
			p.Terms()
		}

	}
	{
		p.SetState(648)
		p.Match(SimplifiedCqlParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISetLiteralContext is an interface to support dynamic dispatch.
type ISetLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Terms() ITermsContext

	// IsSetLiteralContext differentiates from other interfaces.
	IsSetLiteralContext()
}

type SetLiteralContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetLiteralContext() *SetLiteralContext {
	var p = new(SetLiteralContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_setLiteral
	return p
}

func InitEmptySetLiteralContext(p *SetLiteralContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_setLiteral
}

func (*SetLiteralContext) IsSetLiteralContext() {}

func NewSetLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetLiteralContext {
	var p = new(SetLiteralContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_setLiteral

	return p
}

func (s *SetLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *SetLiteralContext) Terms() ITermsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITermsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITermsContext)
}

func (s *SetLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterSetLiteral(s)
	}
}

func (s *SetLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitSetLiteral(s)
	}
}

func (p *SimplifiedCqlParser) SetLiteral() (localctx ISetLiteralContext) {
	localctx = NewSetLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, SimplifiedCqlParserRULE_setLiteral)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(650)
		p.Match(SimplifiedCqlParserT__18)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(652)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&8245521357371867714) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&2198454794647) != 0) {
		{
			p.SetState(651)
			p.Terms()
		}

	}
	{
		p.SetState(654)
		p.Match(SimplifiedCqlParserT__19)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMapLiteralContext is an interface to support dynamic dispatch.
type IMapLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	MapEntries() IMapEntriesContext

	// IsMapLiteralContext differentiates from other interfaces.
	IsMapLiteralContext()
}

type MapLiteralContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMapLiteralContext() *MapLiteralContext {
	var p = new(MapLiteralContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_mapLiteral
	return p
}

func InitEmptyMapLiteralContext(p *MapLiteralContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_mapLiteral
}

func (*MapLiteralContext) IsMapLiteralContext() {}

func NewMapLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MapLiteralContext {
	var p = new(MapLiteralContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_mapLiteral

	return p
}

func (s *MapLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *MapLiteralContext) MapEntries() IMapEntriesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMapEntriesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMapEntriesContext)
}

func (s *MapLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MapLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterMapLiteral(s)
	}
}

func (s *MapLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitMapLiteral(s)
	}
}

func (p *SimplifiedCqlParser) MapLiteral() (localctx IMapLiteralContext) {
	localctx = NewMapLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, SimplifiedCqlParserRULE_mapLiteral)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(656)
		p.Match(SimplifiedCqlParserT__18)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(658)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&8245521357371867714) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&2198454794647) != 0) {
		{
			p.SetState(657)
			p.MapEntries()
		}

	}
	{
		p.SetState(660)
		p.Match(SimplifiedCqlParserT__19)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMapEntriesContext is an interface to support dynamic dispatch.
type IMapEntriesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllMapEntry() []IMapEntryContext
	MapEntry(i int) IMapEntryContext

	// IsMapEntriesContext differentiates from other interfaces.
	IsMapEntriesContext()
}

type MapEntriesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMapEntriesContext() *MapEntriesContext {
	var p = new(MapEntriesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_mapEntries
	return p
}

func InitEmptyMapEntriesContext(p *MapEntriesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_mapEntries
}

func (*MapEntriesContext) IsMapEntriesContext() {}

func NewMapEntriesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MapEntriesContext {
	var p = new(MapEntriesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_mapEntries

	return p
}

func (s *MapEntriesContext) GetParser() antlr.Parser { return s.parser }

func (s *MapEntriesContext) AllMapEntry() []IMapEntryContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMapEntryContext); ok {
			len++
		}
	}

	tst := make([]IMapEntryContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMapEntryContext); ok {
			tst[i] = t.(IMapEntryContext)
			i++
		}
	}

	return tst
}

func (s *MapEntriesContext) MapEntry(i int) IMapEntryContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMapEntryContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMapEntryContext)
}

func (s *MapEntriesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapEntriesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MapEntriesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterMapEntries(s)
	}
}

func (s *MapEntriesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitMapEntries(s)
	}
}

func (p *SimplifiedCqlParser) MapEntries() (localctx IMapEntriesContext) {
	localctx = NewMapEntriesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, SimplifiedCqlParserRULE_mapEntries)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(662)
		p.MapEntry()
	}
	p.SetState(667)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserT__2 {
		{
			p.SetState(663)
			p.Match(SimplifiedCqlParserT__2)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(664)
			p.MapEntry()
		}

		p.SetState(669)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMapEntryContext is an interface to support dynamic dispatch.
type IMapEntryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllTerm() []ITermContext
	Term(i int) ITermContext

	// IsMapEntryContext differentiates from other interfaces.
	IsMapEntryContext()
}

type MapEntryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMapEntryContext() *MapEntryContext {
	var p = new(MapEntryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_mapEntry
	return p
}

func InitEmptyMapEntryContext(p *MapEntryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_mapEntry
}

func (*MapEntryContext) IsMapEntryContext() {}

func NewMapEntryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MapEntryContext {
	var p = new(MapEntryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_mapEntry

	return p
}

func (s *MapEntryContext) GetParser() antlr.Parser { return s.parser }

func (s *MapEntryContext) AllTerm() []ITermContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITermContext); ok {
			len++
		}
	}

	tst := make([]ITermContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITermContext); ok {
			tst[i] = t.(ITermContext)
			i++
		}
	}

	return tst
}

func (s *MapEntryContext) Term(i int) ITermContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITermContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITermContext)
}

func (s *MapEntryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapEntryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MapEntryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterMapEntry(s)
	}
}

func (s *MapEntryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitMapEntry(s)
	}
}

func (p *SimplifiedCqlParser) MapEntry() (localctx IMapEntryContext) {
	localctx = NewMapEntryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, SimplifiedCqlParserRULE_mapEntry)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(670)
		p.Term()
	}
	{
		p.SetState(671)
		p.Match(SimplifiedCqlParserT__17)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(672)
		p.Term()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITupleLiteralsContext is an interface to support dynamic dispatch.
type ITupleLiteralsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllTupleLiteral() []ITupleLiteralContext
	TupleLiteral(i int) ITupleLiteralContext

	// IsTupleLiteralsContext differentiates from other interfaces.
	IsTupleLiteralsContext()
}

type TupleLiteralsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTupleLiteralsContext() *TupleLiteralsContext {
	var p = new(TupleLiteralsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_tupleLiterals
	return p
}

func InitEmptyTupleLiteralsContext(p *TupleLiteralsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_tupleLiterals
}

func (*TupleLiteralsContext) IsTupleLiteralsContext() {}

func NewTupleLiteralsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TupleLiteralsContext {
	var p = new(TupleLiteralsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_tupleLiterals

	return p
}

func (s *TupleLiteralsContext) GetParser() antlr.Parser { return s.parser }

func (s *TupleLiteralsContext) AllTupleLiteral() []ITupleLiteralContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITupleLiteralContext); ok {
			len++
		}
	}

	tst := make([]ITupleLiteralContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITupleLiteralContext); ok {
			tst[i] = t.(ITupleLiteralContext)
			i++
		}
	}

	return tst
}

func (s *TupleLiteralsContext) TupleLiteral(i int) ITupleLiteralContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITupleLiteralContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITupleLiteralContext)
}

func (s *TupleLiteralsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleLiteralsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TupleLiteralsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterTupleLiterals(s)
	}
}

func (s *TupleLiteralsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitTupleLiterals(s)
	}
}

func (p *SimplifiedCqlParser) TupleLiterals() (localctx ITupleLiteralsContext) {
	localctx = NewTupleLiteralsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, SimplifiedCqlParserRULE_tupleLiterals)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(674)
		p.TupleLiteral()
	}
	p.SetState(679)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserT__2 {
		{
			p.SetState(675)
			p.Match(SimplifiedCqlParserT__2)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(676)
			p.TupleLiteral()
		}

		p.SetState(681)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITupleLiteralContext is an interface to support dynamic dispatch.
type ITupleLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Terms() ITermsContext

	// IsTupleLiteralContext differentiates from other interfaces.
	IsTupleLiteralContext()
}

type TupleLiteralContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTupleLiteralContext() *TupleLiteralContext {
	var p = new(TupleLiteralContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_tupleLiteral
	return p
}

func InitEmptyTupleLiteralContext(p *TupleLiteralContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_tupleLiteral
}

func (*TupleLiteralContext) IsTupleLiteralContext() {}

func NewTupleLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TupleLiteralContext {
	var p = new(TupleLiteralContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_tupleLiteral

	return p
}

func (s *TupleLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *TupleLiteralContext) Terms() ITermsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITermsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITermsContext)
}

func (s *TupleLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TupleLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterTupleLiteral(s)
	}
}

func (s *TupleLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitTupleLiteral(s)
	}
}

func (p *SimplifiedCqlParser) TupleLiteral() (localctx ITupleLiteralContext) {
	localctx = NewTupleLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, SimplifiedCqlParserRULE_tupleLiteral)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(682)
		p.Match(SimplifiedCqlParserT__0)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(683)
		p.Terms()
	}
	{
		p.SetState(684)
		p.Match(SimplifiedCqlParserT__1)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUdtLiteralContext is an interface to support dynamic dispatch.
type IUdtLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FieldLiterals() IFieldLiteralsContext

	// IsUdtLiteralContext differentiates from other interfaces.
	IsUdtLiteralContext()
}

type UdtLiteralContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUdtLiteralContext() *UdtLiteralContext {
	var p = new(UdtLiteralContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_udtLiteral
	return p
}

func InitEmptyUdtLiteralContext(p *UdtLiteralContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_udtLiteral
}

func (*UdtLiteralContext) IsUdtLiteralContext() {}

func NewUdtLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UdtLiteralContext {
	var p = new(UdtLiteralContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_udtLiteral

	return p
}

func (s *UdtLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *UdtLiteralContext) FieldLiterals() IFieldLiteralsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFieldLiteralsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFieldLiteralsContext)
}

func (s *UdtLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UdtLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UdtLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterUdtLiteral(s)
	}
}

func (s *UdtLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitUdtLiteral(s)
	}
}

func (p *SimplifiedCqlParser) UdtLiteral() (localctx IUdtLiteralContext) {
	localctx = NewUdtLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, SimplifiedCqlParserRULE_udtLiteral)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(686)
		p.Match(SimplifiedCqlParserT__18)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(687)
		p.FieldLiterals()
	}
	{
		p.SetState(688)
		p.Match(SimplifiedCqlParserT__19)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFieldLiteralsContext is an interface to support dynamic dispatch.
type IFieldLiteralsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllFieldLiteral() []IFieldLiteralContext
	FieldLiteral(i int) IFieldLiteralContext

	// IsFieldLiteralsContext differentiates from other interfaces.
	IsFieldLiteralsContext()
}

type FieldLiteralsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFieldLiteralsContext() *FieldLiteralsContext {
	var p = new(FieldLiteralsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_fieldLiterals
	return p
}

func InitEmptyFieldLiteralsContext(p *FieldLiteralsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_fieldLiterals
}

func (*FieldLiteralsContext) IsFieldLiteralsContext() {}

func NewFieldLiteralsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldLiteralsContext {
	var p = new(FieldLiteralsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_fieldLiterals

	return p
}

func (s *FieldLiteralsContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldLiteralsContext) AllFieldLiteral() []IFieldLiteralContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFieldLiteralContext); ok {
			len++
		}
	}

	tst := make([]IFieldLiteralContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFieldLiteralContext); ok {
			tst[i] = t.(IFieldLiteralContext)
			i++
		}
	}

	return tst
}

func (s *FieldLiteralsContext) FieldLiteral(i int) IFieldLiteralContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFieldLiteralContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFieldLiteralContext)
}

func (s *FieldLiteralsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldLiteralsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldLiteralsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterFieldLiterals(s)
	}
}

func (s *FieldLiteralsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitFieldLiterals(s)
	}
}

func (p *SimplifiedCqlParser) FieldLiterals() (localctx IFieldLiteralsContext) {
	localctx = NewFieldLiteralsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, SimplifiedCqlParserRULE_fieldLiterals)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(690)
		p.FieldLiteral()
	}
	p.SetState(695)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserT__2 {
		{
			p.SetState(691)
			p.Match(SimplifiedCqlParserT__2)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(692)
			p.FieldLiteral()
		}

		p.SetState(697)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFieldLiteralContext is an interface to support dynamic dispatch.
type IFieldLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	Term() ITermContext

	// IsFieldLiteralContext differentiates from other interfaces.
	IsFieldLiteralContext()
}

type FieldLiteralContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFieldLiteralContext() *FieldLiteralContext {
	var p = new(FieldLiteralContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_fieldLiteral
	return p
}

func InitEmptyFieldLiteralContext(p *FieldLiteralContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_fieldLiteral
}

func (*FieldLiteralContext) IsFieldLiteralContext() {}

func NewFieldLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldLiteralContext {
	var p = new(FieldLiteralContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_fieldLiteral

	return p
}

func (s *FieldLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldLiteralContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *FieldLiteralContext) Term() ITermContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITermContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITermContext)
}

func (s *FieldLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterFieldLiteral(s)
	}
}

func (s *FieldLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitFieldLiteral(s)
	}
}

func (p *SimplifiedCqlParser) FieldLiteral() (localctx IFieldLiteralContext) {
	localctx = NewFieldLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, SimplifiedCqlParserRULE_fieldLiteral)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(698)
		p.Identifier()
	}
	{
		p.SetState(699)
		p.Match(SimplifiedCqlParserT__17)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(700)
		p.Term()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunctionCallContext is an interface to support dynamic dispatch.
type IFunctionCallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FunctionName() IFunctionNameContext
	FunctionArgs() IFunctionArgsContext

	// IsFunctionCallContext differentiates from other interfaces.
	IsFunctionCallContext()
}

type FunctionCallContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionCallContext() *FunctionCallContext {
	var p = new(FunctionCallContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_functionCall
	return p
}

func InitEmptyFunctionCallContext(p *FunctionCallContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_functionCall
}

func (*FunctionCallContext) IsFunctionCallContext() {}

func NewFunctionCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionCallContext {
	var p = new(FunctionCallContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_functionCall

	return p
}

func (s *FunctionCallContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionCallContext) FunctionName() IFunctionNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionNameContext)
}

func (s *FunctionCallContext) FunctionArgs() IFunctionArgsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionArgsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionArgsContext)
}

func (s *FunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionCallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterFunctionCall(s)
	}
}

func (s *FunctionCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitFunctionCall(s)
	}
}

func (p *SimplifiedCqlParser) FunctionCall() (localctx IFunctionCallContext) {
	localctx = NewFunctionCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, SimplifiedCqlParserRULE_functionCall)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(702)
		p.FunctionName()
	}
	{
		p.SetState(703)
		p.Match(SimplifiedCqlParserT__0)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(705)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&8245521357371867714) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&2198454794647) != 0) {
		{
			p.SetState(704)
			p.FunctionArgs()
		}

	}
	{
		p.SetState(707)
		p.Match(SimplifiedCqlParserT__1)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunctionArgsContext is an interface to support dynamic dispatch.
type IFunctionArgsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllFunctionArg() []IFunctionArgContext
	FunctionArg(i int) IFunctionArgContext

	// IsFunctionArgsContext differentiates from other interfaces.
	IsFunctionArgsContext()
}

type FunctionArgsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionArgsContext() *FunctionArgsContext {
	var p = new(FunctionArgsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_functionArgs
	return p
}

func InitEmptyFunctionArgsContext(p *FunctionArgsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_functionArgs
}

func (*FunctionArgsContext) IsFunctionArgsContext() {}

func NewFunctionArgsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionArgsContext {
	var p = new(FunctionArgsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_functionArgs

	return p
}

func (s *FunctionArgsContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionArgsContext) AllFunctionArg() []IFunctionArgContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFunctionArgContext); ok {
			len++
		}
	}

	tst := make([]IFunctionArgContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFunctionArgContext); ok {
			tst[i] = t.(IFunctionArgContext)
			i++
		}
	}

	return tst
}

func (s *FunctionArgsContext) FunctionArg(i int) IFunctionArgContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionArgContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionArgContext)
}

func (s *FunctionArgsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionArgsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionArgsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterFunctionArgs(s)
	}
}

func (s *FunctionArgsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitFunctionArgs(s)
	}
}

func (p *SimplifiedCqlParser) FunctionArgs() (localctx IFunctionArgsContext) {
	localctx = NewFunctionArgsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, SimplifiedCqlParserRULE_functionArgs)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(709)
		p.FunctionArg()
	}
	p.SetState(714)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserT__2 {
		{
			p.SetState(710)
			p.Match(SimplifiedCqlParserT__2)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(711)
			p.FunctionArg()
		}

		p.SetState(716)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunctionArgContext is an interface to support dynamic dispatch.
type IFunctionArgContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	Term() ITermContext

	// IsFunctionArgContext differentiates from other interfaces.
	IsFunctionArgContext()
}

type FunctionArgContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionArgContext() *FunctionArgContext {
	var p = new(FunctionArgContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_functionArg
	return p
}

func InitEmptyFunctionArgContext(p *FunctionArgContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_functionArg
}

func (*FunctionArgContext) IsFunctionArgContext() {}

func NewFunctionArgContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionArgContext {
	var p = new(FunctionArgContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_functionArg

	return p
}

func (s *FunctionArgContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionArgContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *FunctionArgContext) Term() ITermContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITermContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITermContext)
}

func (s *FunctionArgContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionArgContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionArgContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterFunctionArg(s)
	}
}

func (s *FunctionArgContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitFunctionArg(s)
	}
}

func (p *SimplifiedCqlParser) FunctionArg() (localctx IFunctionArgContext) {
	localctx = NewFunctionArgContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, SimplifiedCqlParserRULE_functionArg)
	p.SetState(719)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 74, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(717)
			p.Identifier()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(718)
			p.Term()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBindMarkersContext is an interface to support dynamic dispatch.
type IBindMarkersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllBindMarker() []IBindMarkerContext
	BindMarker(i int) IBindMarkerContext

	// IsBindMarkersContext differentiates from other interfaces.
	IsBindMarkersContext()
}

type BindMarkersContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindMarkersContext() *BindMarkersContext {
	var p = new(BindMarkersContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_bindMarkers
	return p
}

func InitEmptyBindMarkersContext(p *BindMarkersContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_bindMarkers
}

func (*BindMarkersContext) IsBindMarkersContext() {}

func NewBindMarkersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindMarkersContext {
	var p = new(BindMarkersContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_bindMarkers

	return p
}

func (s *BindMarkersContext) GetParser() antlr.Parser { return s.parser }

func (s *BindMarkersContext) AllBindMarker() []IBindMarkerContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IBindMarkerContext); ok {
			len++
		}
	}

	tst := make([]IBindMarkerContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IBindMarkerContext); ok {
			tst[i] = t.(IBindMarkerContext)
			i++
		}
	}

	return tst
}

func (s *BindMarkersContext) BindMarker(i int) IBindMarkerContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBindMarkerContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBindMarkerContext)
}

func (s *BindMarkersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindMarkersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindMarkersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterBindMarkers(s)
	}
}

func (s *BindMarkersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitBindMarkers(s)
	}
}

func (p *SimplifiedCqlParser) BindMarkers() (localctx IBindMarkersContext) {
	localctx = NewBindMarkersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, SimplifiedCqlParserRULE_bindMarkers)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(721)
		p.BindMarker()
	}
	p.SetState(726)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserT__2 {
		{
			p.SetState(722)
			p.Match(SimplifiedCqlParserT__2)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(723)
			p.BindMarker()
		}

		p.SetState(728)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBindMarkerContext is an interface to support dynamic dispatch.
type IBindMarkerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PositionalBindMarker() IPositionalBindMarkerContext
	NamedBindMarker() INamedBindMarkerContext

	// IsBindMarkerContext differentiates from other interfaces.
	IsBindMarkerContext()
}

type BindMarkerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindMarkerContext() *BindMarkerContext {
	var p = new(BindMarkerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_bindMarker
	return p
}

func InitEmptyBindMarkerContext(p *BindMarkerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_bindMarker
}

func (*BindMarkerContext) IsBindMarkerContext() {}

func NewBindMarkerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindMarkerContext {
	var p = new(BindMarkerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_bindMarker

	return p
}

func (s *BindMarkerContext) GetParser() antlr.Parser { return s.parser }

func (s *BindMarkerContext) PositionalBindMarker() IPositionalBindMarkerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPositionalBindMarkerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPositionalBindMarkerContext)
}

func (s *BindMarkerContext) NamedBindMarker() INamedBindMarkerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INamedBindMarkerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INamedBindMarkerContext)
}

func (s *BindMarkerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindMarkerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindMarkerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterBindMarker(s)
	}
}

func (s *BindMarkerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitBindMarker(s)
	}
}

func (p *SimplifiedCqlParser) BindMarker() (localctx IBindMarkerContext) {
	localctx = NewBindMarkerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, SimplifiedCqlParserRULE_bindMarker)
	p.SetState(731)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case SimplifiedCqlParserQMARK:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(729)
			p.PositionalBindMarker()
		}

	case SimplifiedCqlParserT__17:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(730)
			p.NamedBindMarker()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPositionalBindMarkerContext is an interface to support dynamic dispatch.
type IPositionalBindMarkerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	QMARK() antlr.TerminalNode

	// IsPositionalBindMarkerContext differentiates from other interfaces.
	IsPositionalBindMarkerContext()
}

type PositionalBindMarkerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPositionalBindMarkerContext() *PositionalBindMarkerContext {
	var p = new(PositionalBindMarkerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_positionalBindMarker
	return p
}

func InitEmptyPositionalBindMarkerContext(p *PositionalBindMarkerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_positionalBindMarker
}

func (*PositionalBindMarkerContext) IsPositionalBindMarkerContext() {}

func NewPositionalBindMarkerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PositionalBindMarkerContext {
	var p = new(PositionalBindMarkerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_positionalBindMarker

	return p
}

func (s *PositionalBindMarkerContext) GetParser() antlr.Parser { return s.parser }

func (s *PositionalBindMarkerContext) QMARK() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserQMARK, 0)
}

func (s *PositionalBindMarkerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PositionalBindMarkerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PositionalBindMarkerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterPositionalBindMarker(s)
	}
}

func (s *PositionalBindMarkerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitPositionalBindMarker(s)
	}
}

func (p *SimplifiedCqlParser) PositionalBindMarker() (localctx IPositionalBindMarkerContext) {
	localctx = NewPositionalBindMarkerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, SimplifiedCqlParserRULE_positionalBindMarker)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(733)
		p.Match(SimplifiedCqlParserQMARK)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INamedBindMarkerContext is an interface to support dynamic dispatch.
type INamedBindMarkerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext

	// IsNamedBindMarkerContext differentiates from other interfaces.
	IsNamedBindMarkerContext()
}

type NamedBindMarkerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamedBindMarkerContext() *NamedBindMarkerContext {
	var p = new(NamedBindMarkerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_namedBindMarker
	return p
}

func InitEmptyNamedBindMarkerContext(p *NamedBindMarkerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_namedBindMarker
}

func (*NamedBindMarkerContext) IsNamedBindMarkerContext() {}

func NewNamedBindMarkerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamedBindMarkerContext {
	var p = new(NamedBindMarkerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_namedBindMarker

	return p
}

func (s *NamedBindMarkerContext) GetParser() antlr.Parser { return s.parser }

func (s *NamedBindMarkerContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *NamedBindMarkerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamedBindMarkerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamedBindMarkerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterNamedBindMarker(s)
	}
}

func (s *NamedBindMarkerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitNamedBindMarker(s)
	}
}

func (p *SimplifiedCqlParser) NamedBindMarker() (localctx INamedBindMarkerContext) {
	localctx = NewNamedBindMarkerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, SimplifiedCqlParserRULE_namedBindMarker)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(735)
		p.Match(SimplifiedCqlParserT__17)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(736)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITermsContext is an interface to support dynamic dispatch.
type ITermsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllTerm() []ITermContext
	Term(i int) ITermContext

	// IsTermsContext differentiates from other interfaces.
	IsTermsContext()
}

type TermsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTermsContext() *TermsContext {
	var p = new(TermsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_terms
	return p
}

func InitEmptyTermsContext(p *TermsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_terms
}

func (*TermsContext) IsTermsContext() {}

func NewTermsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TermsContext {
	var p = new(TermsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_terms

	return p
}

func (s *TermsContext) GetParser() antlr.Parser { return s.parser }

func (s *TermsContext) AllTerm() []ITermContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITermContext); ok {
			len++
		}
	}

	tst := make([]ITermContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITermContext); ok {
			tst[i] = t.(ITermContext)
			i++
		}
	}

	return tst
}

func (s *TermsContext) Term(i int) ITermContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITermContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITermContext)
}

func (s *TermsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TermsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TermsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterTerms(s)
	}
}

func (s *TermsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitTerms(s)
	}
}

func (p *SimplifiedCqlParser) Terms() (localctx ITermsContext) {
	localctx = NewTermsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, SimplifiedCqlParserRULE_terms)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(738)
		p.Term()
	}
	p.SetState(743)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserT__2 {
		{
			p.SetState(739)
			p.Match(SimplifiedCqlParserT__2)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(740)
			p.Term()
		}

		p.SetState(745)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITermContext is an interface to support dynamic dispatch.
type ITermContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Literal() ILiteralContext
	BindMarker() IBindMarkerContext
	FunctionCall() IFunctionCallContext
	TypeCast() ITypeCastContext

	// IsTermContext differentiates from other interfaces.
	IsTermContext()
}

type TermContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTermContext() *TermContext {
	var p = new(TermContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_term
	return p
}

func InitEmptyTermContext(p *TermContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_term
}

func (*TermContext) IsTermContext() {}

func NewTermContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TermContext {
	var p = new(TermContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_term

	return p
}

func (s *TermContext) GetParser() antlr.Parser { return s.parser }

func (s *TermContext) Literal() ILiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *TermContext) BindMarker() IBindMarkerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBindMarkerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBindMarkerContext)
}

func (s *TermContext) FunctionCall() IFunctionCallContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionCallContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionCallContext)
}

func (s *TermContext) TypeCast() ITypeCastContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeCastContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeCastContext)
}

func (s *TermContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TermContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TermContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterTerm(s)
	}
}

func (s *TermContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitTerm(s)
	}
}

func (p *SimplifiedCqlParser) Term() (localctx ITermContext) {
	localctx = NewTermContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, SimplifiedCqlParserRULE_term)
	p.SetState(750)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 78, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(746)
			p.Literal()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(747)
			p.BindMarker()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(748)
			p.FunctionCall()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(749)
			p.TypeCast()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeCastContext is an interface to support dynamic dispatch.
type ITypeCastContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CqlType() ICqlTypeContext
	Term() ITermContext

	// IsTypeCastContext differentiates from other interfaces.
	IsTypeCastContext()
}

type TypeCastContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeCastContext() *TypeCastContext {
	var p = new(TypeCastContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_typeCast
	return p
}

func InitEmptyTypeCastContext(p *TypeCastContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_typeCast
}

func (*TypeCastContext) IsTypeCastContext() {}

func NewTypeCastContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeCastContext {
	var p = new(TypeCastContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_typeCast

	return p
}

func (s *TypeCastContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeCastContext) CqlType() ICqlTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICqlTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICqlTypeContext)
}

func (s *TypeCastContext) Term() ITermContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITermContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITermContext)
}

func (s *TypeCastContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeCastContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeCastContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterTypeCast(s)
	}
}

func (s *TypeCastContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitTypeCast(s)
	}
}

func (p *SimplifiedCqlParser) TypeCast() (localctx ITypeCastContext) {
	localctx = NewTypeCastContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, SimplifiedCqlParserRULE_typeCast)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(752)
		p.Match(SimplifiedCqlParserT__0)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(753)
		p.CqlType()
	}
	{
		p.SetState(754)
		p.Match(SimplifiedCqlParserT__1)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(755)
		p.Term()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICqlTypeContext is an interface to support dynamic dispatch.
type ICqlTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PrimitiveType() IPrimitiveTypeContext
	CollectionType() ICollectionTypeContext
	TupleType() ITupleTypeContext
	UserTypeName() IUserTypeNameContext
	K_FROZEN() antlr.TerminalNode
	CqlType() ICqlTypeContext

	// IsCqlTypeContext differentiates from other interfaces.
	IsCqlTypeContext()
}

type CqlTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCqlTypeContext() *CqlTypeContext {
	var p = new(CqlTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_cqlType
	return p
}

func InitEmptyCqlTypeContext(p *CqlTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_cqlType
}

func (*CqlTypeContext) IsCqlTypeContext() {}

func NewCqlTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CqlTypeContext {
	var p = new(CqlTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_cqlType

	return p
}

func (s *CqlTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *CqlTypeContext) PrimitiveType() IPrimitiveTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimitiveTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimitiveTypeContext)
}

func (s *CqlTypeContext) CollectionType() ICollectionTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICollectionTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICollectionTypeContext)
}

func (s *CqlTypeContext) TupleType() ITupleTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITupleTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITupleTypeContext)
}

func (s *CqlTypeContext) UserTypeName() IUserTypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUserTypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUserTypeNameContext)
}

func (s *CqlTypeContext) K_FROZEN() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_FROZEN, 0)
}

func (s *CqlTypeContext) CqlType() ICqlTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICqlTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICqlTypeContext)
}

func (s *CqlTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CqlTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CqlTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterCqlType(s)
	}
}

func (s *CqlTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitCqlType(s)
	}
}

func (p *SimplifiedCqlParser) CqlType() (localctx ICqlTypeContext) {
	localctx = NewCqlTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, SimplifiedCqlParserRULE_cqlType)
	p.SetState(766)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 79, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(757)
			p.PrimitiveType()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(758)
			p.CollectionType()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(759)
			p.TupleType()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(760)
			p.UserTypeName()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(761)
			p.Match(SimplifiedCqlParserK_FROZEN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(762)
			p.Match(SimplifiedCqlParserT__12)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(763)
			p.CqlType()
		}
		{
			p.SetState(764)
			p.Match(SimplifiedCqlParserT__14)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrimitiveTypeContext is an interface to support dynamic dispatch.
type IPrimitiveTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	K_ASCII() antlr.TerminalNode
	K_BIGINT() antlr.TerminalNode
	K_BLOB() antlr.TerminalNode
	K_BOOLEAN() antlr.TerminalNode
	K_COUNTER() antlr.TerminalNode
	K_DATE() antlr.TerminalNode
	K_DECIMAL() antlr.TerminalNode
	K_DOUBLE() antlr.TerminalNode
	K_DURATION() antlr.TerminalNode
	K_FLOAT() antlr.TerminalNode
	K_INET() antlr.TerminalNode
	K_INT() antlr.TerminalNode
	K_SMALLINT() antlr.TerminalNode
	K_TEXT() antlr.TerminalNode
	K_TIME() antlr.TerminalNode
	K_TIMESTAMP() antlr.TerminalNode
	K_TIMEUUID() antlr.TerminalNode
	K_TINYINT() antlr.TerminalNode
	K_UUID() antlr.TerminalNode
	K_VARCHAR() antlr.TerminalNode
	K_VARINT() antlr.TerminalNode

	// IsPrimitiveTypeContext differentiates from other interfaces.
	IsPrimitiveTypeContext()
}

type PrimitiveTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimitiveTypeContext() *PrimitiveTypeContext {
	var p = new(PrimitiveTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_primitiveType
	return p
}

func InitEmptyPrimitiveTypeContext(p *PrimitiveTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_primitiveType
}

func (*PrimitiveTypeContext) IsPrimitiveTypeContext() {}

func NewPrimitiveTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimitiveTypeContext {
	var p = new(PrimitiveTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_primitiveType

	return p
}

func (s *PrimitiveTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimitiveTypeContext) K_ASCII() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_ASCII, 0)
}

func (s *PrimitiveTypeContext) K_BIGINT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_BIGINT, 0)
}

func (s *PrimitiveTypeContext) K_BLOB() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_BLOB, 0)
}

func (s *PrimitiveTypeContext) K_BOOLEAN() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_BOOLEAN, 0)
}

func (s *PrimitiveTypeContext) K_COUNTER() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_COUNTER, 0)
}

func (s *PrimitiveTypeContext) K_DATE() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_DATE, 0)
}

func (s *PrimitiveTypeContext) K_DECIMAL() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_DECIMAL, 0)
}

func (s *PrimitiveTypeContext) K_DOUBLE() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_DOUBLE, 0)
}

func (s *PrimitiveTypeContext) K_DURATION() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_DURATION, 0)
}

func (s *PrimitiveTypeContext) K_FLOAT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_FLOAT, 0)
}

func (s *PrimitiveTypeContext) K_INET() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_INET, 0)
}

func (s *PrimitiveTypeContext) K_INT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_INT, 0)
}

func (s *PrimitiveTypeContext) K_SMALLINT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_SMALLINT, 0)
}

func (s *PrimitiveTypeContext) K_TEXT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_TEXT, 0)
}

func (s *PrimitiveTypeContext) K_TIME() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_TIME, 0)
}

func (s *PrimitiveTypeContext) K_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_TIMESTAMP, 0)
}

func (s *PrimitiveTypeContext) K_TIMEUUID() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_TIMEUUID, 0)
}

func (s *PrimitiveTypeContext) K_TINYINT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_TINYINT, 0)
}

func (s *PrimitiveTypeContext) K_UUID() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_UUID, 0)
}

func (s *PrimitiveTypeContext) K_VARCHAR() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_VARCHAR, 0)
}

func (s *PrimitiveTypeContext) K_VARINT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_VARINT, 0)
}

func (s *PrimitiveTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimitiveTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimitiveTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterPrimitiveType(s)
	}
}

func (s *PrimitiveTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitPrimitiveType(s)
	}
}

func (p *SimplifiedCqlParser) PrimitiveType() (localctx IPrimitiveTypeContext) {
	localctx = NewPrimitiveTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, SimplifiedCqlParserRULE_primitiveType)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(768)
		_la = p.GetTokenStream().LA(1)

		if !(((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&153458429397041152) != 0) || ((int64((_la-75)) & ^0x3f) == 0 && ((int64(1)<<(_la-75))&213055) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICollectionTypeContext is an interface to support dynamic dispatch.
type ICollectionTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	K_LIST() antlr.TerminalNode
	AllCqlType() []ICqlTypeContext
	CqlType(i int) ICqlTypeContext
	K_SET() antlr.TerminalNode
	K_MAP() antlr.TerminalNode

	// IsCollectionTypeContext differentiates from other interfaces.
	IsCollectionTypeContext()
}

type CollectionTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCollectionTypeContext() *CollectionTypeContext {
	var p = new(CollectionTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_collectionType
	return p
}

func InitEmptyCollectionTypeContext(p *CollectionTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_collectionType
}

func (*CollectionTypeContext) IsCollectionTypeContext() {}

func NewCollectionTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CollectionTypeContext {
	var p = new(CollectionTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_collectionType

	return p
}

func (s *CollectionTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *CollectionTypeContext) K_LIST() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_LIST, 0)
}

func (s *CollectionTypeContext) AllCqlType() []ICqlTypeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICqlTypeContext); ok {
			len++
		}
	}

	tst := make([]ICqlTypeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICqlTypeContext); ok {
			tst[i] = t.(ICqlTypeContext)
			i++
		}
	}

	return tst
}

func (s *CollectionTypeContext) CqlType(i int) ICqlTypeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICqlTypeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICqlTypeContext)
}

func (s *CollectionTypeContext) K_SET() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_SET, 0)
}

func (s *CollectionTypeContext) K_MAP() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_MAP, 0)
}

func (s *CollectionTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CollectionTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CollectionTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterCollectionType(s)
	}
}

func (s *CollectionTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitCollectionType(s)
	}
}

func (p *SimplifiedCqlParser) CollectionType() (localctx ICollectionTypeContext) {
	localctx = NewCollectionTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, SimplifiedCqlParserRULE_collectionType)
	p.SetState(787)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case SimplifiedCqlParserK_LIST:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(770)
			p.Match(SimplifiedCqlParserK_LIST)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(771)
			p.Match(SimplifiedCqlParserT__12)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(772)
			p.CqlType()
		}
		{
			p.SetState(773)
			p.Match(SimplifiedCqlParserT__14)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SimplifiedCqlParserK_SET:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(775)
			p.Match(SimplifiedCqlParserK_SET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(776)
			p.Match(SimplifiedCqlParserT__12)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(777)
			p.CqlType()
		}
		{
			p.SetState(778)
			p.Match(SimplifiedCqlParserT__14)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SimplifiedCqlParserK_MAP:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(780)
			p.Match(SimplifiedCqlParserK_MAP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(781)
			p.Match(SimplifiedCqlParserT__12)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(782)
			p.CqlType()
		}
		{
			p.SetState(783)
			p.Match(SimplifiedCqlParserT__2)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(784)
			p.CqlType()
		}
		{
			p.SetState(785)
			p.Match(SimplifiedCqlParserT__14)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITupleTypeContext is an interface to support dynamic dispatch.
type ITupleTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	K_TUPLE() antlr.TerminalNode
	AllCqlType() []ICqlTypeContext
	CqlType(i int) ICqlTypeContext

	// IsTupleTypeContext differentiates from other interfaces.
	IsTupleTypeContext()
}

type TupleTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTupleTypeContext() *TupleTypeContext {
	var p = new(TupleTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_tupleType
	return p
}

func InitEmptyTupleTypeContext(p *TupleTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_tupleType
}

func (*TupleTypeContext) IsTupleTypeContext() {}

func NewTupleTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TupleTypeContext {
	var p = new(TupleTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_tupleType

	return p
}

func (s *TupleTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *TupleTypeContext) K_TUPLE() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_TUPLE, 0)
}

func (s *TupleTypeContext) AllCqlType() []ICqlTypeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICqlTypeContext); ok {
			len++
		}
	}

	tst := make([]ICqlTypeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICqlTypeContext); ok {
			tst[i] = t.(ICqlTypeContext)
			i++
		}
	}

	return tst
}

func (s *TupleTypeContext) CqlType(i int) ICqlTypeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICqlTypeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICqlTypeContext)
}

func (s *TupleTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TupleTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterTupleType(s)
	}
}

func (s *TupleTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitTupleType(s)
	}
}

func (p *SimplifiedCqlParser) TupleType() (localctx ITupleTypeContext) {
	localctx = NewTupleTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, SimplifiedCqlParserRULE_tupleType)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(789)
		p.Match(SimplifiedCqlParserK_TUPLE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(790)
		p.Match(SimplifiedCqlParserT__12)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(791)
		p.CqlType()
	}
	p.SetState(796)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserT__2 {
		{
			p.SetState(792)
			p.Match(SimplifiedCqlParserT__2)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(793)
			p.CqlType()
		}

		p.SetState(798)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(799)
		p.Match(SimplifiedCqlParserT__14)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITableNameContext is an interface to support dynamic dispatch.
type ITableNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	QualifiedIdentifier() IQualifiedIdentifierContext

	// IsTableNameContext differentiates from other interfaces.
	IsTableNameContext()
}

type TableNameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableNameContext() *TableNameContext {
	var p = new(TableNameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_tableName
	return p
}

func InitEmptyTableNameContext(p *TableNameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_tableName
}

func (*TableNameContext) IsTableNameContext() {}

func NewTableNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableNameContext {
	var p = new(TableNameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_tableName

	return p
}

func (s *TableNameContext) GetParser() antlr.Parser { return s.parser }

func (s *TableNameContext) QualifiedIdentifier() IQualifiedIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualifiedIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualifiedIdentifierContext)
}

func (s *TableNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterTableName(s)
	}
}

func (s *TableNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitTableName(s)
	}
}

func (p *SimplifiedCqlParser) TableName() (localctx ITableNameContext) {
	localctx = NewTableNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, SimplifiedCqlParserRULE_tableName)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(801)
		p.QualifiedIdentifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunctionNameContext is an interface to support dynamic dispatch.
type IFunctionNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	QualifiedIdentifier() IQualifiedIdentifierContext

	// IsFunctionNameContext differentiates from other interfaces.
	IsFunctionNameContext()
}

type FunctionNameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionNameContext() *FunctionNameContext {
	var p = new(FunctionNameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_functionName
	return p
}

func InitEmptyFunctionNameContext(p *FunctionNameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_functionName
}

func (*FunctionNameContext) IsFunctionNameContext() {}

func NewFunctionNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionNameContext {
	var p = new(FunctionNameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_functionName

	return p
}

func (s *FunctionNameContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionNameContext) QualifiedIdentifier() IQualifiedIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualifiedIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualifiedIdentifierContext)
}

func (s *FunctionNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterFunctionName(s)
	}
}

func (s *FunctionNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitFunctionName(s)
	}
}

func (p *SimplifiedCqlParser) FunctionName() (localctx IFunctionNameContext) {
	localctx = NewFunctionNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, SimplifiedCqlParserRULE_functionName)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(803)
		p.QualifiedIdentifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUserTypeNameContext is an interface to support dynamic dispatch.
type IUserTypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	QualifiedIdentifier() IQualifiedIdentifierContext

	// IsUserTypeNameContext differentiates from other interfaces.
	IsUserTypeNameContext()
}

type UserTypeNameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUserTypeNameContext() *UserTypeNameContext {
	var p = new(UserTypeNameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_userTypeName
	return p
}

func InitEmptyUserTypeNameContext(p *UserTypeNameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_userTypeName
}

func (*UserTypeNameContext) IsUserTypeNameContext() {}

func NewUserTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UserTypeNameContext {
	var p = new(UserTypeNameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_userTypeName

	return p
}

func (s *UserTypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *UserTypeNameContext) QualifiedIdentifier() IQualifiedIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualifiedIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualifiedIdentifierContext)
}

func (s *UserTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UserTypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UserTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterUserTypeName(s)
	}
}

func (s *UserTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitUserTypeName(s)
	}
}

func (p *SimplifiedCqlParser) UserTypeName() (localctx IUserTypeNameContext) {
	localctx = NewUserTypeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, SimplifiedCqlParserRULE_userTypeName)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(805)
		p.QualifiedIdentifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IKeyspaceNameContext is an interface to support dynamic dispatch.
type IKeyspaceNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext

	// IsKeyspaceNameContext differentiates from other interfaces.
	IsKeyspaceNameContext()
}

type KeyspaceNameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeyspaceNameContext() *KeyspaceNameContext {
	var p = new(KeyspaceNameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_keyspaceName
	return p
}

func InitEmptyKeyspaceNameContext(p *KeyspaceNameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_keyspaceName
}

func (*KeyspaceNameContext) IsKeyspaceNameContext() {}

func NewKeyspaceNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeyspaceNameContext {
	var p = new(KeyspaceNameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_keyspaceName

	return p
}

func (s *KeyspaceNameContext) GetParser() antlr.Parser { return s.parser }

func (s *KeyspaceNameContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *KeyspaceNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeyspaceNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KeyspaceNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterKeyspaceName(s)
	}
}

func (s *KeyspaceNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitKeyspaceName(s)
	}
}

func (p *SimplifiedCqlParser) KeyspaceName() (localctx IKeyspaceNameContext) {
	localctx = NewKeyspaceNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, SimplifiedCqlParserRULE_keyspaceName)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(807)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IQualifiedIdentifierContext is an interface to support dynamic dispatch.
type IQualifiedIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	KeyspaceName() IKeyspaceNameContext

	// IsQualifiedIdentifierContext differentiates from other interfaces.
	IsQualifiedIdentifierContext()
}

type QualifiedIdentifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQualifiedIdentifierContext() *QualifiedIdentifierContext {
	var p = new(QualifiedIdentifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_qualifiedIdentifier
	return p
}

func InitEmptyQualifiedIdentifierContext(p *QualifiedIdentifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_qualifiedIdentifier
}

func (*QualifiedIdentifierContext) IsQualifiedIdentifierContext() {}

func NewQualifiedIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QualifiedIdentifierContext {
	var p = new(QualifiedIdentifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_qualifiedIdentifier

	return p
}

func (s *QualifiedIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *QualifiedIdentifierContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *QualifiedIdentifierContext) KeyspaceName() IKeyspaceNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IKeyspaceNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IKeyspaceNameContext)
}

func (s *QualifiedIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QualifiedIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QualifiedIdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterQualifiedIdentifier(s)
	}
}

func (s *QualifiedIdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitQualifiedIdentifier(s)
	}
}

func (p *SimplifiedCqlParser) QualifiedIdentifier() (localctx IQualifiedIdentifierContext) {
	localctx = NewQualifiedIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, SimplifiedCqlParserRULE_qualifiedIdentifier)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(812)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 82, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(809)
			p.KeyspaceName()
		}
		{
			p.SetState(810)
			p.Match(SimplifiedCqlParserT__10)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(814)
		p.Identifier()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIdentifiersContext is an interface to support dynamic dispatch.
type IIdentifiersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext

	// IsIdentifiersContext differentiates from other interfaces.
	IsIdentifiersContext()
}

type IdentifiersContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifiersContext() *IdentifiersContext {
	var p = new(IdentifiersContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_identifiers
	return p
}

func InitEmptyIdentifiersContext(p *IdentifiersContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_identifiers
}

func (*IdentifiersContext) IsIdentifiersContext() {}

func NewIdentifiersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifiersContext {
	var p = new(IdentifiersContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_identifiers

	return p
}

func (s *IdentifiersContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifiersContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *IdentifiersContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *IdentifiersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifiersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifiersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterIdentifiers(s)
	}
}

func (s *IdentifiersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitIdentifiers(s)
	}
}

func (p *SimplifiedCqlParser) Identifiers() (localctx IIdentifiersContext) {
	localctx = NewIdentifiersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, SimplifiedCqlParserRULE_identifiers)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(816)
		p.Identifier()
	}
	p.SetState(821)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserT__2 {
		{
			p.SetState(817)
			p.Match(SimplifiedCqlParserT__2)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(818)
			p.Identifier()
		}

		p.SetState(823)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIdentifierContext is an interface to support dynamic dispatch.
type IIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UNQUOTED_IDENTIFIER() antlr.TerminalNode
	QUOTED_IDENTIFIER() antlr.TerminalNode
	UnreservedKeyword() IUnreservedKeywordContext

	// IsIdentifierContext differentiates from other interfaces.
	IsIdentifierContext()
}

type IdentifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierContext() *IdentifierContext {
	var p = new(IdentifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_identifier
	return p
}

func InitEmptyIdentifierContext(p *IdentifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_identifier
}

func (*IdentifierContext) IsIdentifierContext() {}

func NewIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierContext {
	var p = new(IdentifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_identifier

	return p
}

func (s *IdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierContext) UNQUOTED_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserUNQUOTED_IDENTIFIER, 0)
}

func (s *IdentifierContext) QUOTED_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserQUOTED_IDENTIFIER, 0)
}

func (s *IdentifierContext) UnreservedKeyword() IUnreservedKeywordContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnreservedKeywordContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnreservedKeywordContext)
}

func (s *IdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterIdentifier(s)
	}
}

func (s *IdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitIdentifier(s)
	}
}

func (p *SimplifiedCqlParser) Identifier() (localctx IIdentifierContext) {
	localctx = NewIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, SimplifiedCqlParserRULE_identifier)
	p.SetState(827)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case SimplifiedCqlParserUNQUOTED_IDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(824)
			p.Match(SimplifiedCqlParserUNQUOTED_IDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SimplifiedCqlParserQUOTED_IDENTIFIER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(825)
			p.Match(SimplifiedCqlParserQUOTED_IDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SimplifiedCqlParserK_AS, SimplifiedCqlParserK_ASCII, SimplifiedCqlParserK_BIGINT, SimplifiedCqlParserK_BLOB, SimplifiedCqlParserK_BOOLEAN, SimplifiedCqlParserK_CAST, SimplifiedCqlParserK_CLUSTERING, SimplifiedCqlParserK_CONTAINS, SimplifiedCqlParserK_COUNTER, SimplifiedCqlParserK_COUNT, SimplifiedCqlParserK_DATE, SimplifiedCqlParserK_DECIMAL, SimplifiedCqlParserK_DISTINCT, SimplifiedCqlParserK_DOUBLE, SimplifiedCqlParserK_DURATION, SimplifiedCqlParserK_EXISTS, SimplifiedCqlParserK_FILTERING, SimplifiedCqlParserK_FLOAT, SimplifiedCqlParserK_FROZEN, SimplifiedCqlParserK_GROUP, SimplifiedCqlParserK_INET, SimplifiedCqlParserK_INT, SimplifiedCqlParserK_JSON, SimplifiedCqlParserK_KEY, SimplifiedCqlParserK_LIKE, SimplifiedCqlParserK_LIST, SimplifiedCqlParserK_MAP, SimplifiedCqlParserK_PARTITION, SimplifiedCqlParserK_PER, SimplifiedCqlParserK_SMALLINT, SimplifiedCqlParserK_TEXT, SimplifiedCqlParserK_TIMESTAMP, SimplifiedCqlParserK_TIMEUUID, SimplifiedCqlParserK_TIME, SimplifiedCqlParserK_TINYINT, SimplifiedCqlParserK_TTL, SimplifiedCqlParserK_TUPLE, SimplifiedCqlParserK_TYPE, SimplifiedCqlParserK_UUID, SimplifiedCqlParserK_VALUES, SimplifiedCqlParserK_VARCHAR, SimplifiedCqlParserK_VARINT, SimplifiedCqlParserK_WRITETIME:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(826)
			p.UnreservedKeyword()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnreservedKeywordContext is an interface to support dynamic dispatch.
type IUnreservedKeywordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	K_AS() antlr.TerminalNode
	K_CAST() antlr.TerminalNode
	K_CLUSTERING() antlr.TerminalNode
	K_CONTAINS() antlr.TerminalNode
	K_COUNT() antlr.TerminalNode
	K_DISTINCT() antlr.TerminalNode
	K_EXISTS() antlr.TerminalNode
	K_FILTERING() antlr.TerminalNode
	K_FROZEN() antlr.TerminalNode
	K_GROUP() antlr.TerminalNode
	K_JSON() antlr.TerminalNode
	K_KEY() antlr.TerminalNode
	K_LIKE() antlr.TerminalNode
	K_LIST() antlr.TerminalNode
	K_MAP() antlr.TerminalNode
	K_PARTITION() antlr.TerminalNode
	K_PER() antlr.TerminalNode
	K_TTL() antlr.TerminalNode
	K_TUPLE() antlr.TerminalNode
	K_TYPE() antlr.TerminalNode
	K_VALUES() antlr.TerminalNode
	K_WRITETIME() antlr.TerminalNode
	PrimitiveType() IPrimitiveTypeContext

	// IsUnreservedKeywordContext differentiates from other interfaces.
	IsUnreservedKeywordContext()
}

type UnreservedKeywordContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnreservedKeywordContext() *UnreservedKeywordContext {
	var p = new(UnreservedKeywordContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_unreservedKeyword
	return p
}

func InitEmptyUnreservedKeywordContext(p *UnreservedKeywordContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_unreservedKeyword
}

func (*UnreservedKeywordContext) IsUnreservedKeywordContext() {}

func NewUnreservedKeywordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnreservedKeywordContext {
	var p = new(UnreservedKeywordContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_unreservedKeyword

	return p
}

func (s *UnreservedKeywordContext) GetParser() antlr.Parser { return s.parser }

func (s *UnreservedKeywordContext) K_AS() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_AS, 0)
}

func (s *UnreservedKeywordContext) K_CAST() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_CAST, 0)
}

func (s *UnreservedKeywordContext) K_CLUSTERING() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_CLUSTERING, 0)
}

func (s *UnreservedKeywordContext) K_CONTAINS() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_CONTAINS, 0)
}

func (s *UnreservedKeywordContext) K_COUNT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_COUNT, 0)
}

func (s *UnreservedKeywordContext) K_DISTINCT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_DISTINCT, 0)
}

func (s *UnreservedKeywordContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_EXISTS, 0)
}

func (s *UnreservedKeywordContext) K_FILTERING() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_FILTERING, 0)
}

func (s *UnreservedKeywordContext) K_FROZEN() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_FROZEN, 0)
}

func (s *UnreservedKeywordContext) K_GROUP() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_GROUP, 0)
}

func (s *UnreservedKeywordContext) K_JSON() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_JSON, 0)
}

func (s *UnreservedKeywordContext) K_KEY() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_KEY, 0)
}

func (s *UnreservedKeywordContext) K_LIKE() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_LIKE, 0)
}

func (s *UnreservedKeywordContext) K_LIST() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_LIST, 0)
}

func (s *UnreservedKeywordContext) K_MAP() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_MAP, 0)
}

func (s *UnreservedKeywordContext) K_PARTITION() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_PARTITION, 0)
}

func (s *UnreservedKeywordContext) K_PER() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_PER, 0)
}

func (s *UnreservedKeywordContext) K_TTL() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_TTL, 0)
}

func (s *UnreservedKeywordContext) K_TUPLE() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_TUPLE, 0)
}

func (s *UnreservedKeywordContext) K_TYPE() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_TYPE, 0)
}

func (s *UnreservedKeywordContext) K_VALUES() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_VALUES, 0)
}

func (s *UnreservedKeywordContext) K_WRITETIME() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_WRITETIME, 0)
}

func (s *UnreservedKeywordContext) PrimitiveType() IPrimitiveTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimitiveTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimitiveTypeContext)
}

func (s *UnreservedKeywordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnreservedKeywordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnreservedKeywordContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterUnreservedKeyword(s)
	}
}

func (s *UnreservedKeywordContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitUnreservedKeyword(s)
	}
}

func (p *SimplifiedCqlParser) UnreservedKeyword() (localctx IUnreservedKeywordContext) {
	localctx = NewUnreservedKeywordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, SimplifiedCqlParserRULE_unreservedKeyword)
	p.SetState(852)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case SimplifiedCqlParserK_AS:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(829)
			p.Match(SimplifiedCqlParserK_AS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SimplifiedCqlParserK_CAST:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(830)
			p.Match(SimplifiedCqlParserK_CAST)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SimplifiedCqlParserK_CLUSTERING:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(831)
			p.Match(SimplifiedCqlParserK_CLUSTERING)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SimplifiedCqlParserK_CONTAINS:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(832)
			p.Match(SimplifiedCqlParserK_CONTAINS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SimplifiedCqlParserK_COUNT:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(833)
			p.Match(SimplifiedCqlParserK_COUNT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SimplifiedCqlParserK_DISTINCT:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(834)
			p.Match(SimplifiedCqlParserK_DISTINCT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SimplifiedCqlParserK_EXISTS:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(835)
			p.Match(SimplifiedCqlParserK_EXISTS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SimplifiedCqlParserK_FILTERING:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(836)
			p.Match(SimplifiedCqlParserK_FILTERING)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SimplifiedCqlParserK_FROZEN:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(837)
			p.Match(SimplifiedCqlParserK_FROZEN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SimplifiedCqlParserK_GROUP:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(838)
			p.Match(SimplifiedCqlParserK_GROUP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SimplifiedCqlParserK_JSON:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(839)
			p.Match(SimplifiedCqlParserK_JSON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SimplifiedCqlParserK_KEY:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(840)
			p.Match(SimplifiedCqlParserK_KEY)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SimplifiedCqlParserK_LIKE:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(841)
			p.Match(SimplifiedCqlParserK_LIKE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SimplifiedCqlParserK_LIST:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(842)
			p.Match(SimplifiedCqlParserK_LIST)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SimplifiedCqlParserK_MAP:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(843)
			p.Match(SimplifiedCqlParserK_MAP)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SimplifiedCqlParserK_PARTITION:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(844)
			p.Match(SimplifiedCqlParserK_PARTITION)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SimplifiedCqlParserK_PER:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(845)
			p.Match(SimplifiedCqlParserK_PER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SimplifiedCqlParserK_TTL:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(846)
			p.Match(SimplifiedCqlParserK_TTL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SimplifiedCqlParserK_TUPLE:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(847)
			p.Match(SimplifiedCqlParserK_TUPLE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SimplifiedCqlParserK_TYPE:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(848)
			p.Match(SimplifiedCqlParserK_TYPE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SimplifiedCqlParserK_VALUES:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(849)
			p.Match(SimplifiedCqlParserK_VALUES)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SimplifiedCqlParserK_WRITETIME:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(850)
			p.Match(SimplifiedCqlParserK_WRITETIME)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SimplifiedCqlParserK_ASCII, SimplifiedCqlParserK_BIGINT, SimplifiedCqlParserK_BLOB, SimplifiedCqlParserK_BOOLEAN, SimplifiedCqlParserK_COUNTER, SimplifiedCqlParserK_DATE, SimplifiedCqlParserK_DECIMAL, SimplifiedCqlParserK_DOUBLE, SimplifiedCqlParserK_DURATION, SimplifiedCqlParserK_FLOAT, SimplifiedCqlParserK_INET, SimplifiedCqlParserK_INT, SimplifiedCqlParserK_SMALLINT, SimplifiedCqlParserK_TEXT, SimplifiedCqlParserK_TIMESTAMP, SimplifiedCqlParserK_TIMEUUID, SimplifiedCqlParserK_TIME, SimplifiedCqlParserK_TINYINT, SimplifiedCqlParserK_UUID, SimplifiedCqlParserK_VARCHAR, SimplifiedCqlParserK_VARINT:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(851)
			p.PrimitiveType()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnrecognizedStatementContext is an interface to support dynamic dispatch.
type IUnrecognizedStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllUnrecognizedToken() []IUnrecognizedTokenContext
	UnrecognizedToken(i int) IUnrecognizedTokenContext

	// IsUnrecognizedStatementContext differentiates from other interfaces.
	IsUnrecognizedStatementContext()
}

type UnrecognizedStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnrecognizedStatementContext() *UnrecognizedStatementContext {
	var p = new(UnrecognizedStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_unrecognizedStatement
	return p
}

func InitEmptyUnrecognizedStatementContext(p *UnrecognizedStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_unrecognizedStatement
}

func (*UnrecognizedStatementContext) IsUnrecognizedStatementContext() {}

func NewUnrecognizedStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnrecognizedStatementContext {
	var p = new(UnrecognizedStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_unrecognizedStatement

	return p
}

func (s *UnrecognizedStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *UnrecognizedStatementContext) AllUnrecognizedToken() []IUnrecognizedTokenContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IUnrecognizedTokenContext); ok {
			len++
		}
	}

	tst := make([]IUnrecognizedTokenContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IUnrecognizedTokenContext); ok {
			tst[i] = t.(IUnrecognizedTokenContext)
			i++
		}
	}

	return tst
}

func (s *UnrecognizedStatementContext) UnrecognizedToken(i int) IUnrecognizedTokenContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnrecognizedTokenContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnrecognizedTokenContext)
}

func (s *UnrecognizedStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnrecognizedStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnrecognizedStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterUnrecognizedStatement(s)
	}
}

func (s *UnrecognizedStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitUnrecognizedStatement(s)
	}
}

func (p *SimplifiedCqlParser) UnrecognizedStatement() (localctx IUnrecognizedStatementContext) {
	localctx = NewUnrecognizedStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, SimplifiedCqlParserRULE_unrecognizedStatement)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(857)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 86, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(854)
				p.UnrecognizedToken()
			}

		}
		p.SetState(859)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 86, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnrecognizedTokenContext is an interface to support dynamic dispatch.
type IUnrecognizedTokenContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsUnrecognizedTokenContext differentiates from other interfaces.
	IsUnrecognizedTokenContext()
}

type UnrecognizedTokenContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnrecognizedTokenContext() *UnrecognizedTokenContext {
	var p = new(UnrecognizedTokenContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_unrecognizedToken
	return p
}

func InitEmptyUnrecognizedTokenContext(p *UnrecognizedTokenContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_unrecognizedToken
}

func (*UnrecognizedTokenContext) IsUnrecognizedTokenContext() {}

func NewUnrecognizedTokenContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnrecognizedTokenContext {
	var p = new(UnrecognizedTokenContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_unrecognizedToken

	return p
}

func (s *UnrecognizedTokenContext) GetParser() antlr.Parser { return s.parser }
func (s *UnrecognizedTokenContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnrecognizedTokenContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnrecognizedTokenContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterUnrecognizedToken(s)
	}
}

func (s *UnrecognizedTokenContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitUnrecognizedToken(s)
	}
}

func (p *SimplifiedCqlParser) UnrecognizedToken() (localctx IUnrecognizedTokenContext) {
	localctx = NewUnrecognizedTokenContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, SimplifiedCqlParserRULE_unrecognizedToken)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(860)
	p.MatchWildcard()

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}
